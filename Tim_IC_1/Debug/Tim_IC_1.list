
Tim_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf8  08002cf8  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d00  08002d00  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002d08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002d70  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002d70  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e08  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a03  00000000  00000000  0000dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022848  00000000  00000000  00010aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c803  00000000  00000000  00033336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0194  00000000  00000000  0003fb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  0010fd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00112e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002cc8 	.word	0x08002cc8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002cc8 	.word	0x08002cc8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SysTick_Handler>:

#include "main_1.h"
extern TIM_HandleTypeDef timer2;

void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f8:	f000 faa4 	bl	8000a44 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 80004fc:	f000 fbf0 	bl	8000ce0 <HAL_SYSTICK_Callback>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <TIM2_IRQHandler>:

//IRQ names are Present in Startup file of Project
void TIM2_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <TIM2_IRQHandler+0x10>)
 800050a:	f001 fb88 	bl	8001c1e <HAL_TIM_IRQHandler>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000084 	.word	0x20000084

08000518 <main>:
void GPIO_init(void);

TIM_HandleTypeDef timer2;

int main()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_Init();
 800051c:	f000 fa40 	bl	80009a0 <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_50_MHZ);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f000 f807 	bl	8000534 <SystemClockConfig>
	Timer2_init();
 8000526:	f000 f89b 	bl	8000660 <Timer2_init>
	GPIO_init();
 800052a:	f000 f8cb 	bl	80006c4 <GPIO_init>

	while(1);
 800052e:	bf00      	nop
 8000530:	e7fd      	b.n	800052e <main+0x16>
	...

08000534 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(uint8_t clk_freq)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	@ 0x58
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 800053e:	2300      	movs	r3, #0
 8000540:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000548:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24

	osc_init.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clk_freq)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b78      	cmp	r3, #120	@ 0x78
 800055c:	d03a      	beq.n	80005d4 <SystemClockConfig+0xa0>
 800055e:	2b78      	cmp	r3, #120	@ 0x78
 8000560:	dc77      	bgt.n	8000652 <SystemClockConfig+0x11e>
 8000562:	2b32      	cmp	r3, #50	@ 0x32
 8000564:	d002      	beq.n	800056c <SystemClockConfig+0x38>
 8000566:	2b54      	cmp	r3, #84	@ 0x54
 8000568:	d01a      	beq.n	80005a0 <SystemClockConfig+0x6c>

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
 800056a:	e072      	b.n	8000652 <SystemClockConfig+0x11e>
		osc_init.PLL.PLLM = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 100;
 8000570:	2364      	movs	r3, #100	@ 0x64
 8000572:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 800057c:	2302      	movs	r3, #2
 800057e:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000590:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000596:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000598:	2301      	movs	r3, #1
 800059a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 800059e:	e033      	b.n	8000608 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 160;
 80005a4:	23a0      	movs	r3, #160	@ 0xa0
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_2WS;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 80005d2:	e019      	b.n	8000608 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 240;
 80005d8:	23f0      	movs	r3, #240	@ 0xf0
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f8:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000600:	2303      	movs	r3, #3
 8000602:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000606:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f819 	bl	8001644 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClockConfig+0xe8>
		{
			error_handler();
 8000618:	f000 f878 	bl	800070c <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 800061c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fcf6 	bl	8001018 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClockConfig+0x102>
		{
			error_handler();
 8000632:	f000 f86b 	bl	800070c <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 8000636:	f000 fdd5 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 800063a:	4603      	mov	r3, r0
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <SystemClockConfig+0x128>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fb22 	bl	8000c8e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800064a:	2004      	movs	r0, #4
 800064c:	f000 fb2c 	bl	8000ca8 <HAL_SYSTICK_CLKSourceConfig>
 8000650:	e000      	b.n	8000654 <SystemClockConfig+0x120>
		return;
 8000652:	bf00      	nop
}
 8000654:	3758      	adds	r7, #88	@ 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	10624dd3 	.word	0x10624dd3

08000660 <Timer2_init>:

void Timer2_init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	/*To use Timer IC(Input Capture)
	 * 1. Initialize the Timer Input Capture Time Base -->  HAL_TIM_IC_Init();
	 * 2. Configure the input channel of Timer --> HAL_TIM_IC_ConfigChannel(); */
	TIM_IC_InitTypeDef timer2IC;
	timer2.Instance = TIM2;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <Timer2_init+0x60>)
 8000668:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066c:	601a      	str	r2, [r3, #0]
	timer2.Init.Prescaler = 1;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <Timer2_init+0x60>)
 8000670:	2201      	movs	r2, #1
 8000672:	605a      	str	r2, [r3, #4]
	timer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <Timer2_init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
	timer2.Init.Period = 0xFFFFFFFF;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <Timer2_init+0x60>)
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_IC_Init(&timer2) != HAL_OK)
 8000682:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <Timer2_init+0x60>)
 8000684:	f001 fa7c 	bl	8001b80 <HAL_TIM_IC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <Timer2_init+0x32>
	{
		error_handler();
 800068e:	f000 f83d 	bl	800070c <error_handler>
	}

	timer2IC.ICFilter = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	timer2IC.ICPolarity = TIM_ICPOLARITY_RISING;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
	timer2IC.ICPrescaler = TIM_ICPSC_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
	timer2IC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]

	if(HAL_TIM_IC_ConfigChannel(&timer2, &timer2IC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <Timer2_init+0x60>)
 80006aa:	f001 fba8 	bl	8001dfe <HAL_TIM_IC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <Timer2_init+0x58>
		{
			error_handler();
 80006b4:	f000 f82a 	bl	800070c <error_handler>
		}
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000084 	.word	0x20000084

080006c4 <GPIO_init>:

void GPIO_init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <GPIO_init+0x40>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <GPIO_init+0x40>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <GPIO_init+0x40>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

	gpio.Pin = GPIO_PIN_5;
 80006e6:	2320      	movs	r3, #32
 80006e8:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpio);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	@ (8000708 <GPIO_init+0x44>)
 80006f8:	f000 fafa 	bl	8000cf0 <HAL_GPIO_Init>
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000

0800070c <error_handler>:

void error_handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	printf("Failed\n");
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <error_handler+0x10>)
 8000712:	f001 ff45 	bl	80025a0 <puts>
	while(1);
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <error_handler+0xa>
 800071a:	bf00      	nop
 800071c:	08002ce0 	.word	0x08002ce0

08000720 <HAL_MspInit>:


#include "main_1.h"

void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 fa7d 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_MspInit+0x40>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072e:	4a0c      	ldr	r2, [pc, #48]	@ (8000760 <HAL_MspInit+0x40>)
 8000730:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000734:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f06f 000b 	mvn.w	r0, #11
 800073e:	f000 fa7c 	bl	8000c3a <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	f06f 000a 	mvn.w	r0, #10
 800074a:	f000 fa76 	bl	8000c3a <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	f06f 0009 	mvn.w	r0, #9
 8000756:	f000 fa70 	bl	8000c3a <HAL_NVIC_SetPriority>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef timer2_gpio;
	//Enable the clock for Timer2 and GPIO which is used for Timer2_Channel1 Alternate function
	__HAL_RCC_TIM12_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	6413      	str	r3, [r2, #64]	@ 0x40
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6313      	str	r3, [r2, #48]	@ 0x30
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_TIM_IC_MspInit+0x74>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

	//GPIO configuration
	timer2_gpio.Pin = GPIO_PIN_0;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
	timer2_gpio.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
	timer2_gpio.Alternate = GPIO_AF1_TIM2;
 80007ac:	2301      	movs	r3, #1
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
	timer2_gpio.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &timer2_gpio);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <HAL_TIM_IC_MspInit+0x78>)
 80007bc:	f000 fa98 	bl	8000cf0 <HAL_GPIO_Init>

	//NVIC settings and Priority
	HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	210f      	movs	r1, #15
 80007c4:	201c      	movs	r0, #28
 80007c6:	f000 fa38 	bl	8000c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ca:	201c      	movs	r0, #28
 80007cc:	f000 fa51 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
  }

  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf1      	blt.n	800082c <_write+0x12>
  }
  return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087a:	605a      	str	r2, [r3, #4]
  return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f001 ff86 	bl	80027fc <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20020000 	.word	0x20020000
 800091c:	00000400 	.word	0x00000400
 8000920:	200000cc 	.word	0x200000cc
 8000924:	20000220 	.word	0x20000220

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000984 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 ff45 	bl	8002808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fdcb 	bl	8000518 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000990:	08002d08 	.word	0x08002d08
  ldr r2, =_sbss
 8000994:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000998:	20000220 	.word	0x20000220

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f92b 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fea4 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f943 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f90b 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000d0 	.word	0x200000d0

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000d0 	.word	0x200000d0

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	@ (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	@ 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	@ 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d106      	bne.n	8000cc4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cc2:	e005      	b.n	8000cd0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cca:	f023 0304 	bic.w	r3, r3, #4
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e165      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8154 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d005      	beq.n	8000d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d130      	bne.n	8000da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0201 	and.w	r2, r3, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d017      	beq.n	8000de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d123      	bne.n	8000e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0203 	and.w	r2, r3, #3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80ae 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a58      	ldr	r2, [pc, #352]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff8 <HAL_GPIO_Init+0x308>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x21a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8000ffc <HAL_GPIO_Init+0x30c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x216>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8001000 <HAL_GPIO_Init+0x310>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x212>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8001004 <HAL_GPIO_Init+0x314>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x20e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8001008 <HAL_GPIO_Init+0x318>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x20a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800100c <HAL_GPIO_Init+0x31c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x206>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a49      	ldr	r2, [pc, #292]	@ (8001010 <HAL_GPIO_Init+0x320>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x202>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e00c      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e00a      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e008      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1c:	4935      	ldr	r1, [pc, #212]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4e:	4a31      	ldr	r2, [pc, #196]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f78:	4a26      	ldr	r2, [pc, #152]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fcc:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	f67f ae96 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800
 8001004:	40020c00 	.word	0x40020c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40021400 	.word	0x40021400
 8001010:	40021800 	.word	0x40021800
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0cc      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800102c:	4b68      	ldr	r3, [pc, #416]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d90c      	bls.n	8001054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	4b63      	ldr	r3, [pc, #396]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0b8      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800106c:	4b59      	ldr	r3, [pc, #356]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a58      	ldr	r2, [pc, #352]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001084:	4b53      	ldr	r3, [pc, #332]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a52      	ldr	r2, [pc, #328]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800108e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001090:	4b50      	ldr	r3, [pc, #320]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	494d      	ldr	r1, [pc, #308]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d044      	beq.n	8001138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d107      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d119      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e07f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d003      	beq.n	80010d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d109      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e06f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e067      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f6:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f023 0203 	bic.w	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4934      	ldr	r1, [pc, #208]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	4313      	orrs	r3, r2
 8001106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001108:	f7ff fcb0 	bl	8000a6c <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	e00a      	b.n	8001126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001110:	f7ff fcac 	bl	8000a6c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111e:	4293      	cmp	r3, r2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e04f      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 020c 	and.w	r2, r3, #12
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	429a      	cmp	r2, r3
 8001136:	d1eb      	bne.n	8001110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d20c      	bcs.n	8001160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e032      	b.n	80011c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4916      	ldr	r1, [pc, #88]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	490e      	ldr	r1, [pc, #56]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800119e:	f000 f821 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	490a      	ldr	r1, [pc, #40]	@ (80011d8 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	5ccb      	ldrb	r3, [r1, r3]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_RCC_ClockConfig+0x1c8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc10 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	08002ce8 	.word	0x08002ce8
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e8:	b0ae      	sub	sp, #184	@ 0xb8
 80011ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120a:	4bcb      	ldr	r3, [pc, #812]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b0c      	cmp	r3, #12
 8001214:	f200 8206 	bhi.w	8001624 <HAL_RCC_GetSysClockFreq+0x440>
 8001218:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <HAL_RCC_GetSysClockFreq+0x3c>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001255 	.word	0x08001255
 8001224:	08001625 	.word	0x08001625
 8001228:	08001625 	.word	0x08001625
 800122c:	08001625 	.word	0x08001625
 8001230:	0800125d 	.word	0x0800125d
 8001234:	08001625 	.word	0x08001625
 8001238:	08001625 	.word	0x08001625
 800123c:	08001625 	.word	0x08001625
 8001240:	08001265 	.word	0x08001265
 8001244:	08001625 	.word	0x08001625
 8001248:	08001625 	.word	0x08001625
 800124c:	08001625 	.word	0x08001625
 8001250:	08001455 	.word	0x08001455
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4bb9      	ldr	r3, [pc, #740]	@ (800153c <HAL_RCC_GetSysClockFreq+0x358>)
 8001256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800125a:	e1e7      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800125c:	4bb8      	ldr	r3, [pc, #736]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x35c>)
 800125e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001262:	e1e3      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001264:	4bb4      	ldr	r3, [pc, #720]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800126c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001270:	4bb1      	ldr	r3, [pc, #708]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d071      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127c:	4bae      	ldr	r3, [pc, #696]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	2200      	movs	r2, #0
 8001284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001288:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800128c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800129e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80012a2:	4622      	mov	r2, r4
 80012a4:	462b      	mov	r3, r5
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	0159      	lsls	r1, r3, #5
 80012b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012b4:	0150      	lsls	r0, r2, #5
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4621      	mov	r1, r4
 80012bc:	1a51      	subs	r1, r2, r1
 80012be:	6439      	str	r1, [r7, #64]	@ 0x40
 80012c0:	4629      	mov	r1, r5
 80012c2:	eb63 0301 	sbc.w	r3, r3, r1
 80012c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80012d4:	4649      	mov	r1, r9
 80012d6:	018b      	lsls	r3, r1, #6
 80012d8:	4641      	mov	r1, r8
 80012da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012de:	4641      	mov	r1, r8
 80012e0:	018a      	lsls	r2, r1, #6
 80012e2:	4641      	mov	r1, r8
 80012e4:	1a51      	subs	r1, r2, r1
 80012e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80012e8:	4649      	mov	r1, r9
 80012ea:	eb63 0301 	sbc.w	r3, r3, r1
 80012ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80012fc:	4649      	mov	r1, r9
 80012fe:	00cb      	lsls	r3, r1, #3
 8001300:	4641      	mov	r1, r8
 8001302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001306:	4641      	mov	r1, r8
 8001308:	00ca      	lsls	r2, r1, #3
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	4603      	mov	r3, r0
 8001310:	4622      	mov	r2, r4
 8001312:	189b      	adds	r3, r3, r2
 8001314:	633b      	str	r3, [r7, #48]	@ 0x30
 8001316:	462b      	mov	r3, r5
 8001318:	460a      	mov	r2, r1
 800131a:	eb42 0303 	adc.w	r3, r2, r3
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800132c:	4629      	mov	r1, r5
 800132e:	024b      	lsls	r3, r1, #9
 8001330:	4621      	mov	r1, r4
 8001332:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001336:	4621      	mov	r1, r4
 8001338:	024a      	lsls	r2, r1, #9
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001342:	2200      	movs	r2, #0
 8001344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001348:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800134c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001350:	f7fe ff58 	bl	8000204 <__aeabi_uldivmod>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4613      	mov	r3, r2
 800135a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800135e:	e067      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001360:	4b75      	ldr	r3, [pc, #468]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	2200      	movs	r2, #0
 8001368:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800136c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001378:	67bb      	str	r3, [r7, #120]	@ 0x78
 800137a:	2300      	movs	r3, #0
 800137c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800137e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001382:	4622      	mov	r2, r4
 8001384:	462b      	mov	r3, r5
 8001386:	f04f 0000 	mov.w	r0, #0
 800138a:	f04f 0100 	mov.w	r1, #0
 800138e:	0159      	lsls	r1, r3, #5
 8001390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001394:	0150      	lsls	r0, r2, #5
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4621      	mov	r1, r4
 800139c:	1a51      	subs	r1, r2, r1
 800139e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013a0:	4629      	mov	r1, r5
 80013a2:	eb63 0301 	sbc.w	r3, r3, r1
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80013b4:	4649      	mov	r1, r9
 80013b6:	018b      	lsls	r3, r1, #6
 80013b8:	4641      	mov	r1, r8
 80013ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013be:	4641      	mov	r1, r8
 80013c0:	018a      	lsls	r2, r1, #6
 80013c2:	4641      	mov	r1, r8
 80013c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80013c8:	4649      	mov	r1, r9
 80013ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013e2:	4692      	mov	sl, r2
 80013e4:	469b      	mov	fp, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	eb1a 0303 	adds.w	r3, sl, r3
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	462b      	mov	r3, r5
 80013f0:	eb4b 0303 	adc.w	r3, fp, r3
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001402:	4629      	mov	r1, r5
 8001404:	028b      	lsls	r3, r1, #10
 8001406:	4621      	mov	r1, r4
 8001408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800140c:	4621      	mov	r1, r4
 800140e:	028a      	lsls	r2, r1, #10
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001418:	2200      	movs	r2, #0
 800141a:	673b      	str	r3, [r7, #112]	@ 0x70
 800141c:	677a      	str	r2, [r7, #116]	@ 0x74
 800141e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001422:	f7fe feef 	bl	8000204 <__aeabi_uldivmod>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4613      	mov	r3, r2
 800142c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	3301      	adds	r3, #1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001452:	e0eb      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001454:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800145c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d06b      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146c:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <HAL_RCC_GetSysClockFreq+0x354>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	2200      	movs	r2, #0
 8001474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800147a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001480:	2300      	movs	r3, #0
 8001482:	667b      	str	r3, [r7, #100]	@ 0x64
 8001484:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001488:	4622      	mov	r2, r4
 800148a:	462b      	mov	r3, r5
 800148c:	f04f 0000 	mov.w	r0, #0
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	0159      	lsls	r1, r3, #5
 8001496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149a:	0150      	lsls	r0, r2, #5
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4621      	mov	r1, r4
 80014a2:	1a51      	subs	r1, r2, r1
 80014a4:	61b9      	str	r1, [r7, #24]
 80014a6:	4629      	mov	r1, r5
 80014a8:	eb63 0301 	sbc.w	r3, r3, r1
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014ba:	4659      	mov	r1, fp
 80014bc:	018b      	lsls	r3, r1, #6
 80014be:	4651      	mov	r1, sl
 80014c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014c4:	4651      	mov	r1, sl
 80014c6:	018a      	lsls	r2, r1, #6
 80014c8:	4651      	mov	r1, sl
 80014ca:	ebb2 0801 	subs.w	r8, r2, r1
 80014ce:	4659      	mov	r1, fp
 80014d0:	eb63 0901 	sbc.w	r9, r3, r1
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e8:	4690      	mov	r8, r2
 80014ea:	4699      	mov	r9, r3
 80014ec:	4623      	mov	r3, r4
 80014ee:	eb18 0303 	adds.w	r3, r8, r3
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	462b      	mov	r3, r5
 80014f6:	eb49 0303 	adc.w	r3, r9, r3
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001508:	4629      	mov	r1, r5
 800150a:	024b      	lsls	r3, r1, #9
 800150c:	4621      	mov	r1, r4
 800150e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001512:	4621      	mov	r1, r4
 8001514:	024a      	lsls	r2, r1, #9
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800151e:	2200      	movs	r2, #0
 8001520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001522:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001524:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001528:	f7fe fe6c 	bl	8000204 <__aeabi_uldivmod>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4613      	mov	r3, r2
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001536:	e065      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x420>
 8001538:	40023800 	.word	0x40023800
 800153c:	00f42400 	.word	0x00f42400
 8001540:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001544:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <HAL_RCC_GetSysClockFreq+0x458>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	2200      	movs	r2, #0
 800154c:	4618      	mov	r0, r3
 800154e:	4611      	mov	r1, r2
 8001550:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001554:	653b      	str	r3, [r7, #80]	@ 0x50
 8001556:	2300      	movs	r3, #0
 8001558:	657b      	str	r3, [r7, #84]	@ 0x54
 800155a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800155e:	4642      	mov	r2, r8
 8001560:	464b      	mov	r3, r9
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	0159      	lsls	r1, r3, #5
 800156c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001570:	0150      	lsls	r0, r2, #5
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4641      	mov	r1, r8
 8001578:	1a51      	subs	r1, r2, r1
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	4649      	mov	r1, r9
 800157e:	eb63 0301 	sbc.w	r3, r3, r1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001590:	4659      	mov	r1, fp
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4651      	mov	r1, sl
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4651      	mov	r1, sl
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4651      	mov	r1, sl
 80015a0:	1a54      	subs	r4, r2, r1
 80015a2:	4659      	mov	r1, fp
 80015a4:	eb63 0501 	sbc.w	r5, r3, r1
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	00eb      	lsls	r3, r5, #3
 80015b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015b6:	00e2      	lsls	r2, r4, #3
 80015b8:	4614      	mov	r4, r2
 80015ba:	461d      	mov	r5, r3
 80015bc:	4643      	mov	r3, r8
 80015be:	18e3      	adds	r3, r4, r3
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	464b      	mov	r3, r9
 80015c4:	eb45 0303 	adc.w	r3, r5, r3
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015d6:	4629      	mov	r1, r5
 80015d8:	028b      	lsls	r3, r1, #10
 80015da:	4621      	mov	r1, r4
 80015dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015e0:	4621      	mov	r1, r4
 80015e2:	028a      	lsls	r2, r1, #10
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015ec:	2200      	movs	r2, #0
 80015ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015f6:	f7fe fe05 	bl	8000204 <__aeabi_uldivmod>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4613      	mov	r3, r2
 8001600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_RCC_GetSysClockFreq+0x458>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	0f1b      	lsrs	r3, r3, #28
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001622:	e003      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800162a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800162c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001630:	4618      	mov	r0, r3
 8001632:	37b8      	adds	r7, #184	@ 0xb8
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	00f42400 	.word	0x00f42400

08001644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e28d      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8083 	beq.w	800176a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001664:	4b94      	ldr	r3, [pc, #592]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d019      	beq.n	80016a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001670:	4b91      	ldr	r3, [pc, #580]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
        || \
 8001678:	2b08      	cmp	r3, #8
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800167c:	4b8e      	ldr	r3, [pc, #568]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b8b      	ldr	r3, [pc, #556]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4b84      	ldr	r3, [pc, #528]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_RCC_OscConfig+0x124>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d157      	bne.n	8001768 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e25a      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x90>
 80016c6:	4b7c      	ldr	r3, [pc, #496]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7b      	ldr	r2, [pc, #492]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xcc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0xb4>
 80016de:	4b76      	ldr	r3, [pc, #472]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a75      	ldr	r2, [pc, #468]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b73      	ldr	r3, [pc, #460]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a72      	ldr	r2, [pc, #456]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xcc>
 80016f8:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b6c      	ldr	r3, [pc, #432]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a6b      	ldr	r2, [pc, #428]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff f9a8 	bl	8000a6c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff f9a4 	bl	8000a6c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e21f      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xdc>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f994 	bl	8000a6c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff f990 	bl	8000a6c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	@ 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e20b      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x104>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d06f      	beq.n	8001856 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001776:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d017      	beq.n	80017b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
        || \
 800178a:	2b08      	cmp	r3, #8
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800178e:	4b4a      	ldr	r3, [pc, #296]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b47      	ldr	r3, [pc, #284]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d11c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b44      	ldr	r3, [pc, #272]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d116      	bne.n	80017e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x186>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e1d3      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4937      	ldr	r1, [pc, #220]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	e03a      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e8:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <HAL_RCC_OscConfig+0x278>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f93d 	bl	8000a6c <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff f939 	bl	8000a6c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1b4      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4925      	ldr	r1, [pc, #148]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x278>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f91c 	bl	8000a6c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff f918 	bl	8000a6c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e193      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d036      	beq.n	80018d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_RCC_OscConfig+0x27c>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff f8fc 	bl	8000a6c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f8f8 	bl	8000a6c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e173      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x234>
 8001896:	e01b      	b.n	80018d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_OscConfig+0x27c>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff f8e5 	bl	8000a6c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e00e      	b.n	80018c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f8e1 	bl	8000a6c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d907      	bls.n	80018c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e15c      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470000 	.word	0x42470000
 80018c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ea      	bne.n	80018a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8097 	beq.w	8001a0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b83      	ldr	r3, [pc, #524]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a7e      	ldr	r2, [pc, #504]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b79      	ldr	r3, [pc, #484]	@ (8001af4 <HAL_RCC_OscConfig+0x4b0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_RCC_OscConfig+0x4b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x4b0>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff f8a1 	bl	8000a6c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff f89d 	bl	8000a6c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e118      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <HAL_RCC_OscConfig+0x4b0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x31e>
 8001954:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001958:	4a65      	ldr	r2, [pc, #404]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x358>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x340>
 800196a:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	4a60      	ldr	r2, [pc, #384]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	@ 0x70
 8001976:	4b5e      	ldr	r3, [pc, #376]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	4a5d      	ldr	r2, [pc, #372]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6713      	str	r3, [r2, #112]	@ 0x70
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x358>
 8001984:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001988:	4a59      	ldr	r2, [pc, #356]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001990:	4b57      	ldr	r3, [pc, #348]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001994:	4a56      	ldr	r2, [pc, #344]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d015      	beq.n	80019d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff f862 	bl	8000a6c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff f85e 	bl	8000a6c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0d7      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0ee      	beq.n	80019ac <HAL_RCC_OscConfig+0x368>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f84c 	bl	8000a6c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f848 	bl	8000a6c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0c1      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ee      	bne.n	80019d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	4a3a      	ldr	r2, [pc, #232]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80ad 	beq.w	8001b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a16:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d060      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d145      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_RCC_OscConfig+0x4b4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f81c 	bl	8000a6c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f818 	bl	8000a6c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e093      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	071b      	lsls	r3, r3, #28
 8001a82:	491b      	ldr	r1, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_OscConfig+0x4b4>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ffed 	bl	8000a6c <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7fe ffe9 	bl	8000a6c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e064      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x452>
 8001ab4:	e05c      	b.n	8001b70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_OscConfig+0x4b4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7fe ffd6 	bl	8000a6c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7fe ffd2 	bl	8000a6c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e04d      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x480>
 8001ae2:	e045      	b.n	8001b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <HAL_RCC_OscConfig+0x538>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d030      	beq.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d129      	bne.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d122      	bne.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d119      	bne.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10f      	bne.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fddc 	bl	8000764 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 f9ec 	bl	8001f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01b      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0202 	mvn.w	r2, #2
 8001c52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f978 	bl	8001f5e <HAL_TIM_IC_CaptureCallback>
 8001c6e:	e005      	b.n	8001c7c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f96a 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f97b 	bl	8001f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01b      	beq.n	8001cce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0204 	mvn.w	r2, #4
 8001c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f952 	bl	8001f5e <HAL_TIM_IC_CaptureCallback>
 8001cba:	e005      	b.n	8001cc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f944 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f955 	bl	8001f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01b      	beq.n	8001d1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0208 	mvn.w	r2, #8
 8001cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f92c 	bl	8001f5e <HAL_TIM_IC_CaptureCallback>
 8001d06:	e005      	b.n	8001d14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f91e 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f92f 	bl	8001f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01b      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0210 	mvn.w	r2, #16
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f906 	bl	8001f5e <HAL_TIM_IC_CaptureCallback>
 8001d52:	e005      	b.n	8001d60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8f8 	bl	8001f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f909 	bl	8001f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00c      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0201 	mvn.w	r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8d6 	bl	8001f36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00c      	beq.n	8001dae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fad7 	bl	800235c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8da 	bl	8001f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0220 	mvn.w	r2, #32
 8001dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 faa9 	bl	8002348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e088      	b.n	8001f2e <HAL_TIM_IC_ConfigChannel+0x130>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d11b      	bne.n	8001e62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001e3a:	f000 f95b 	bl	80020f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020c 	bic.w	r2, r2, #12
 8001e4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6999      	ldr	r1, [r3, #24]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
 8001e60:	e060      	b.n	8001f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11c      	bne.n	8001ea2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001e78:	f000 f9b0 	bl	80021dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6999      	ldr	r1, [r3, #24]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
 8001ea0:	e040      	b.n	8001f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001eb8:	f000 f9cd 	bl	8002256 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020c 	bic.w	r2, r2, #12
 8001eca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69d9      	ldr	r1, [r3, #28]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	61da      	str	r2, [r3, #28]
 8001ede:	e021      	b.n	8001f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d11c      	bne.n	8001f20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001ef6:	f000 f9ea 	bl	80022ce <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001f08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69d9      	ldr	r1, [r3, #28]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	61da      	str	r2, [r3, #28]
 8001f1e:	e001      	b.n	8001f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a46      	ldr	r2, [pc, #280]	@ (80020c8 <TIM_Base_SetConfig+0x12c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fba:	d00f      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a43      	ldr	r2, [pc, #268]	@ (80020cc <TIM_Base_SetConfig+0x130>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00b      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a42      	ldr	r2, [pc, #264]	@ (80020d0 <TIM_Base_SetConfig+0x134>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a41      	ldr	r2, [pc, #260]	@ (80020d4 <TIM_Base_SetConfig+0x138>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a40      	ldr	r2, [pc, #256]	@ (80020d8 <TIM_Base_SetConfig+0x13c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d108      	bne.n	8001fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a35      	ldr	r2, [pc, #212]	@ (80020c8 <TIM_Base_SetConfig+0x12c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffc:	d027      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <TIM_Base_SetConfig+0x130>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d023      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a31      	ldr	r2, [pc, #196]	@ (80020d0 <TIM_Base_SetConfig+0x134>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a30      	ldr	r2, [pc, #192]	@ (80020d4 <TIM_Base_SetConfig+0x138>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2f      	ldr	r2, [pc, #188]	@ (80020d8 <TIM_Base_SetConfig+0x13c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d017      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2e      	ldr	r2, [pc, #184]	@ (80020dc <TIM_Base_SetConfig+0x140>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <TIM_Base_SetConfig+0x144>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00f      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2c      	ldr	r2, [pc, #176]	@ (80020e4 <TIM_Base_SetConfig+0x148>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00b      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2b      	ldr	r2, [pc, #172]	@ (80020e8 <TIM_Base_SetConfig+0x14c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <TIM_Base_SetConfig+0x150>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a29      	ldr	r2, [pc, #164]	@ (80020f0 <TIM_Base_SetConfig+0x154>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <TIM_Base_SetConfig+0x12c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0xf8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <TIM_Base_SetConfig+0x13c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f023 0201 	bic.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
  }
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40010400 	.word	0x40010400
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	40001800 	.word	0x40001800
 80020ec:	40001c00 	.word	0x40001c00
 80020f0:	40002000 	.word	0x40002000

080020f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 0201 	bic.w	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a28      	ldr	r2, [pc, #160]	@ (80021c0 <TIM_TI1_SetConfig+0xcc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01b      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d017      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <TIM_TI1_SetConfig+0xd0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a24      	ldr	r2, [pc, #144]	@ (80021c8 <TIM_TI1_SetConfig+0xd4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00f      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <TIM_TI1_SetConfig+0xd8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00b      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a22      	ldr	r2, [pc, #136]	@ (80021d0 <TIM_TI1_SetConfig+0xdc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <TIM_TI1_SetConfig+0xe0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <TIM_TI1_SetConfig+0x66>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a20      	ldr	r2, [pc, #128]	@ (80021d8 <TIM_TI1_SetConfig+0xe4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <TIM_TI1_SetConfig+0x6a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <TIM_TI1_SetConfig+0x6c>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e003      	b.n	800217e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	b2db      	uxtb	r3, r3
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f023 030a 	bic.w	r3, r3, #10
 8002198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f003 030a 	and.w	r3, r3, #10
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	621a      	str	r2, [r3, #32]
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40010400 	.word	0x40010400
 80021d4:	40014000 	.word	0x40014000
 80021d8:	40001800 	.word	0x40001800

080021dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 0210 	bic.w	r2, r3, #16
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800221a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	031b      	lsls	r3, r3, #12
 8002220:	b29b      	uxth	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800222e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002292:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	b2db      	uxtb	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80022a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800230c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	b29b      	uxth	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002320:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	031b      	lsls	r3, r3, #12
 8002326:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	621a      	str	r2, [r3, #32]
}
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <std>:
 8002370:	2300      	movs	r3, #0
 8002372:	b510      	push	{r4, lr}
 8002374:	4604      	mov	r4, r0
 8002376:	e9c0 3300 	strd	r3, r3, [r0]
 800237a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800237e:	6083      	str	r3, [r0, #8]
 8002380:	8181      	strh	r1, [r0, #12]
 8002382:	6643      	str	r3, [r0, #100]	@ 0x64
 8002384:	81c2      	strh	r2, [r0, #14]
 8002386:	6183      	str	r3, [r0, #24]
 8002388:	4619      	mov	r1, r3
 800238a:	2208      	movs	r2, #8
 800238c:	305c      	adds	r0, #92	@ 0x5c
 800238e:	f000 f9e7 	bl	8002760 <memset>
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <std+0x58>)
 8002394:	6263      	str	r3, [r4, #36]	@ 0x24
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <std+0x5c>)
 8002398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <std+0x60>)
 800239c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <std+0x64>)
 80023a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <std+0x68>)
 80023a4:	6224      	str	r4, [r4, #32]
 80023a6:	429c      	cmp	r4, r3
 80023a8:	d006      	beq.n	80023b8 <std+0x48>
 80023aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023ae:	4294      	cmp	r4, r2
 80023b0:	d002      	beq.n	80023b8 <std+0x48>
 80023b2:	33d0      	adds	r3, #208	@ 0xd0
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d105      	bne.n	80023c4 <std+0x54>
 80023b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c0:	f000 ba46 	b.w	8002850 <__retarget_lock_init_recursive>
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	bf00      	nop
 80023c8:	080025b1 	.word	0x080025b1
 80023cc:	080025d3 	.word	0x080025d3
 80023d0:	0800260b 	.word	0x0800260b
 80023d4:	0800262f 	.word	0x0800262f
 80023d8:	200000d4 	.word	0x200000d4

080023dc <stdio_exit_handler>:
 80023dc:	4a02      	ldr	r2, [pc, #8]	@ (80023e8 <stdio_exit_handler+0xc>)
 80023de:	4903      	ldr	r1, [pc, #12]	@ (80023ec <stdio_exit_handler+0x10>)
 80023e0:	4803      	ldr	r0, [pc, #12]	@ (80023f0 <stdio_exit_handler+0x14>)
 80023e2:	f000 b869 	b.w	80024b8 <_fwalk_sglue>
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	08002b51 	.word	0x08002b51
 80023f0:	2000001c 	.word	0x2000001c

080023f4 <cleanup_stdio>:
 80023f4:	6841      	ldr	r1, [r0, #4]
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <cleanup_stdio+0x34>)
 80023f8:	4299      	cmp	r1, r3
 80023fa:	b510      	push	{r4, lr}
 80023fc:	4604      	mov	r4, r0
 80023fe:	d001      	beq.n	8002404 <cleanup_stdio+0x10>
 8002400:	f000 fba6 	bl	8002b50 <_fflush_r>
 8002404:	68a1      	ldr	r1, [r4, #8]
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <cleanup_stdio+0x38>)
 8002408:	4299      	cmp	r1, r3
 800240a:	d002      	beq.n	8002412 <cleanup_stdio+0x1e>
 800240c:	4620      	mov	r0, r4
 800240e:	f000 fb9f 	bl	8002b50 <_fflush_r>
 8002412:	68e1      	ldr	r1, [r4, #12]
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <cleanup_stdio+0x3c>)
 8002416:	4299      	cmp	r1, r3
 8002418:	d004      	beq.n	8002424 <cleanup_stdio+0x30>
 800241a:	4620      	mov	r0, r4
 800241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002420:	f000 bb96 	b.w	8002b50 <_fflush_r>
 8002424:	bd10      	pop	{r4, pc}
 8002426:	bf00      	nop
 8002428:	200000d4 	.word	0x200000d4
 800242c:	2000013c 	.word	0x2000013c
 8002430:	200001a4 	.word	0x200001a4

08002434 <global_stdio_init.part.0>:
 8002434:	b510      	push	{r4, lr}
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <global_stdio_init.part.0+0x30>)
 8002438:	4c0b      	ldr	r4, [pc, #44]	@ (8002468 <global_stdio_init.part.0+0x34>)
 800243a:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <global_stdio_init.part.0+0x38>)
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	4620      	mov	r0, r4
 8002440:	2200      	movs	r2, #0
 8002442:	2104      	movs	r1, #4
 8002444:	f7ff ff94 	bl	8002370 <std>
 8002448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800244c:	2201      	movs	r2, #1
 800244e:	2109      	movs	r1, #9
 8002450:	f7ff ff8e 	bl	8002370 <std>
 8002454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002458:	2202      	movs	r2, #2
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800245e:	2112      	movs	r1, #18
 8002460:	f7ff bf86 	b.w	8002370 <std>
 8002464:	2000020c 	.word	0x2000020c
 8002468:	200000d4 	.word	0x200000d4
 800246c:	080023dd 	.word	0x080023dd

08002470 <__sfp_lock_acquire>:
 8002470:	4801      	ldr	r0, [pc, #4]	@ (8002478 <__sfp_lock_acquire+0x8>)
 8002472:	f000 b9ee 	b.w	8002852 <__retarget_lock_acquire_recursive>
 8002476:	bf00      	nop
 8002478:	20000215 	.word	0x20000215

0800247c <__sfp_lock_release>:
 800247c:	4801      	ldr	r0, [pc, #4]	@ (8002484 <__sfp_lock_release+0x8>)
 800247e:	f000 b9e9 	b.w	8002854 <__retarget_lock_release_recursive>
 8002482:	bf00      	nop
 8002484:	20000215 	.word	0x20000215

08002488 <__sinit>:
 8002488:	b510      	push	{r4, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	f7ff fff0 	bl	8002470 <__sfp_lock_acquire>
 8002490:	6a23      	ldr	r3, [r4, #32]
 8002492:	b11b      	cbz	r3, 800249c <__sinit+0x14>
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002498:	f7ff bff0 	b.w	800247c <__sfp_lock_release>
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <__sinit+0x28>)
 800249e:	6223      	str	r3, [r4, #32]
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__sinit+0x2c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f5      	bne.n	8002494 <__sinit+0xc>
 80024a8:	f7ff ffc4 	bl	8002434 <global_stdio_init.part.0>
 80024ac:	e7f2      	b.n	8002494 <__sinit+0xc>
 80024ae:	bf00      	nop
 80024b0:	080023f5 	.word	0x080023f5
 80024b4:	2000020c 	.word	0x2000020c

080024b8 <_fwalk_sglue>:
 80024b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024bc:	4607      	mov	r7, r0
 80024be:	4688      	mov	r8, r1
 80024c0:	4614      	mov	r4, r2
 80024c2:	2600      	movs	r6, #0
 80024c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024c8:	f1b9 0901 	subs.w	r9, r9, #1
 80024cc:	d505      	bpl.n	80024da <_fwalk_sglue+0x22>
 80024ce:	6824      	ldr	r4, [r4, #0]
 80024d0:	2c00      	cmp	r4, #0
 80024d2:	d1f7      	bne.n	80024c4 <_fwalk_sglue+0xc>
 80024d4:	4630      	mov	r0, r6
 80024d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024da:	89ab      	ldrh	r3, [r5, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d907      	bls.n	80024f0 <_fwalk_sglue+0x38>
 80024e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024e4:	3301      	adds	r3, #1
 80024e6:	d003      	beq.n	80024f0 <_fwalk_sglue+0x38>
 80024e8:	4629      	mov	r1, r5
 80024ea:	4638      	mov	r0, r7
 80024ec:	47c0      	blx	r8
 80024ee:	4306      	orrs	r6, r0
 80024f0:	3568      	adds	r5, #104	@ 0x68
 80024f2:	e7e9      	b.n	80024c8 <_fwalk_sglue+0x10>

080024f4 <_puts_r>:
 80024f4:	6a03      	ldr	r3, [r0, #32]
 80024f6:	b570      	push	{r4, r5, r6, lr}
 80024f8:	6884      	ldr	r4, [r0, #8]
 80024fa:	4605      	mov	r5, r0
 80024fc:	460e      	mov	r6, r1
 80024fe:	b90b      	cbnz	r3, 8002504 <_puts_r+0x10>
 8002500:	f7ff ffc2 	bl	8002488 <__sinit>
 8002504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002506:	07db      	lsls	r3, r3, #31
 8002508:	d405      	bmi.n	8002516 <_puts_r+0x22>
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	0598      	lsls	r0, r3, #22
 800250e:	d402      	bmi.n	8002516 <_puts_r+0x22>
 8002510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002512:	f000 f99e 	bl	8002852 <__retarget_lock_acquire_recursive>
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	0719      	lsls	r1, r3, #28
 800251a:	d502      	bpl.n	8002522 <_puts_r+0x2e>
 800251c:	6923      	ldr	r3, [r4, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d135      	bne.n	800258e <_puts_r+0x9a>
 8002522:	4621      	mov	r1, r4
 8002524:	4628      	mov	r0, r5
 8002526:	f000 f8c5 	bl	80026b4 <__swsetup_r>
 800252a:	b380      	cbz	r0, 800258e <_puts_r+0x9a>
 800252c:	f04f 35ff 	mov.w	r5, #4294967295
 8002530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002532:	07da      	lsls	r2, r3, #31
 8002534:	d405      	bmi.n	8002542 <_puts_r+0x4e>
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	059b      	lsls	r3, r3, #22
 800253a:	d402      	bmi.n	8002542 <_puts_r+0x4e>
 800253c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800253e:	f000 f989 	bl	8002854 <__retarget_lock_release_recursive>
 8002542:	4628      	mov	r0, r5
 8002544:	bd70      	pop	{r4, r5, r6, pc}
 8002546:	2b00      	cmp	r3, #0
 8002548:	da04      	bge.n	8002554 <_puts_r+0x60>
 800254a:	69a2      	ldr	r2, [r4, #24]
 800254c:	429a      	cmp	r2, r3
 800254e:	dc17      	bgt.n	8002580 <_puts_r+0x8c>
 8002550:	290a      	cmp	r1, #10
 8002552:	d015      	beq.n	8002580 <_puts_r+0x8c>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	6022      	str	r2, [r4, #0]
 800255a:	7019      	strb	r1, [r3, #0]
 800255c:	68a3      	ldr	r3, [r4, #8]
 800255e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002562:	3b01      	subs	r3, #1
 8002564:	60a3      	str	r3, [r4, #8]
 8002566:	2900      	cmp	r1, #0
 8002568:	d1ed      	bne.n	8002546 <_puts_r+0x52>
 800256a:	2b00      	cmp	r3, #0
 800256c:	da11      	bge.n	8002592 <_puts_r+0x9e>
 800256e:	4622      	mov	r2, r4
 8002570:	210a      	movs	r1, #10
 8002572:	4628      	mov	r0, r5
 8002574:	f000 f85f 	bl	8002636 <__swbuf_r>
 8002578:	3001      	adds	r0, #1
 800257a:	d0d7      	beq.n	800252c <_puts_r+0x38>
 800257c:	250a      	movs	r5, #10
 800257e:	e7d7      	b.n	8002530 <_puts_r+0x3c>
 8002580:	4622      	mov	r2, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f000 f857 	bl	8002636 <__swbuf_r>
 8002588:	3001      	adds	r0, #1
 800258a:	d1e7      	bne.n	800255c <_puts_r+0x68>
 800258c:	e7ce      	b.n	800252c <_puts_r+0x38>
 800258e:	3e01      	subs	r6, #1
 8002590:	e7e4      	b.n	800255c <_puts_r+0x68>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	6022      	str	r2, [r4, #0]
 8002598:	220a      	movs	r2, #10
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e7ee      	b.n	800257c <_puts_r+0x88>
	...

080025a0 <puts>:
 80025a0:	4b02      	ldr	r3, [pc, #8]	@ (80025ac <puts+0xc>)
 80025a2:	4601      	mov	r1, r0
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	f7ff bfa5 	b.w	80024f4 <_puts_r>
 80025aa:	bf00      	nop
 80025ac:	20000018 	.word	0x20000018

080025b0 <__sread>:
 80025b0:	b510      	push	{r4, lr}
 80025b2:	460c      	mov	r4, r1
 80025b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b8:	f000 f8fc 	bl	80027b4 <_read_r>
 80025bc:	2800      	cmp	r0, #0
 80025be:	bfab      	itete	ge
 80025c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80025c2:	89a3      	ldrhlt	r3, [r4, #12]
 80025c4:	181b      	addge	r3, r3, r0
 80025c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80025ca:	bfac      	ite	ge
 80025cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80025ce:	81a3      	strhlt	r3, [r4, #12]
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <__swrite>:
 80025d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d6:	461f      	mov	r7, r3
 80025d8:	898b      	ldrh	r3, [r1, #12]
 80025da:	05db      	lsls	r3, r3, #23
 80025dc:	4605      	mov	r5, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	4616      	mov	r6, r2
 80025e2:	d505      	bpl.n	80025f0 <__swrite+0x1e>
 80025e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e8:	2302      	movs	r3, #2
 80025ea:	2200      	movs	r2, #0
 80025ec:	f000 f8d0 	bl	8002790 <_lseek_r>
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	4632      	mov	r2, r6
 80025fe:	463b      	mov	r3, r7
 8002600:	4628      	mov	r0, r5
 8002602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002606:	f000 b8e7 	b.w	80027d8 <_write_r>

0800260a <__sseek>:
 800260a:	b510      	push	{r4, lr}
 800260c:	460c      	mov	r4, r1
 800260e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002612:	f000 f8bd 	bl	8002790 <_lseek_r>
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	89a3      	ldrh	r3, [r4, #12]
 800261a:	bf15      	itete	ne
 800261c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800261e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002626:	81a3      	strheq	r3, [r4, #12]
 8002628:	bf18      	it	ne
 800262a:	81a3      	strhne	r3, [r4, #12]
 800262c:	bd10      	pop	{r4, pc}

0800262e <__sclose>:
 800262e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002632:	f000 b89d 	b.w	8002770 <_close_r>

08002636 <__swbuf_r>:
 8002636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002638:	460e      	mov	r6, r1
 800263a:	4614      	mov	r4, r2
 800263c:	4605      	mov	r5, r0
 800263e:	b118      	cbz	r0, 8002648 <__swbuf_r+0x12>
 8002640:	6a03      	ldr	r3, [r0, #32]
 8002642:	b90b      	cbnz	r3, 8002648 <__swbuf_r+0x12>
 8002644:	f7ff ff20 	bl	8002488 <__sinit>
 8002648:	69a3      	ldr	r3, [r4, #24]
 800264a:	60a3      	str	r3, [r4, #8]
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	071a      	lsls	r2, r3, #28
 8002650:	d501      	bpl.n	8002656 <__swbuf_r+0x20>
 8002652:	6923      	ldr	r3, [r4, #16]
 8002654:	b943      	cbnz	r3, 8002668 <__swbuf_r+0x32>
 8002656:	4621      	mov	r1, r4
 8002658:	4628      	mov	r0, r5
 800265a:	f000 f82b 	bl	80026b4 <__swsetup_r>
 800265e:	b118      	cbz	r0, 8002668 <__swbuf_r+0x32>
 8002660:	f04f 37ff 	mov.w	r7, #4294967295
 8002664:	4638      	mov	r0, r7
 8002666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	6922      	ldr	r2, [r4, #16]
 800266c:	1a98      	subs	r0, r3, r2
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	b2f6      	uxtb	r6, r6
 8002672:	4283      	cmp	r3, r0
 8002674:	4637      	mov	r7, r6
 8002676:	dc05      	bgt.n	8002684 <__swbuf_r+0x4e>
 8002678:	4621      	mov	r1, r4
 800267a:	4628      	mov	r0, r5
 800267c:	f000 fa68 	bl	8002b50 <_fflush_r>
 8002680:	2800      	cmp	r0, #0
 8002682:	d1ed      	bne.n	8002660 <__swbuf_r+0x2a>
 8002684:	68a3      	ldr	r3, [r4, #8]
 8002686:	3b01      	subs	r3, #1
 8002688:	60a3      	str	r3, [r4, #8]
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	6022      	str	r2, [r4, #0]
 8002690:	701e      	strb	r6, [r3, #0]
 8002692:	6962      	ldr	r2, [r4, #20]
 8002694:	1c43      	adds	r3, r0, #1
 8002696:	429a      	cmp	r2, r3
 8002698:	d004      	beq.n	80026a4 <__swbuf_r+0x6e>
 800269a:	89a3      	ldrh	r3, [r4, #12]
 800269c:	07db      	lsls	r3, r3, #31
 800269e:	d5e1      	bpl.n	8002664 <__swbuf_r+0x2e>
 80026a0:	2e0a      	cmp	r6, #10
 80026a2:	d1df      	bne.n	8002664 <__swbuf_r+0x2e>
 80026a4:	4621      	mov	r1, r4
 80026a6:	4628      	mov	r0, r5
 80026a8:	f000 fa52 	bl	8002b50 <_fflush_r>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d0d9      	beq.n	8002664 <__swbuf_r+0x2e>
 80026b0:	e7d6      	b.n	8002660 <__swbuf_r+0x2a>
	...

080026b4 <__swsetup_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <__swsetup_r+0xa8>)
 80026b8:	4605      	mov	r5, r0
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	460c      	mov	r4, r1
 80026be:	b118      	cbz	r0, 80026c8 <__swsetup_r+0x14>
 80026c0:	6a03      	ldr	r3, [r0, #32]
 80026c2:	b90b      	cbnz	r3, 80026c8 <__swsetup_r+0x14>
 80026c4:	f7ff fee0 	bl	8002488 <__sinit>
 80026c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026cc:	0719      	lsls	r1, r3, #28
 80026ce:	d422      	bmi.n	8002716 <__swsetup_r+0x62>
 80026d0:	06da      	lsls	r2, r3, #27
 80026d2:	d407      	bmi.n	80026e4 <__swsetup_r+0x30>
 80026d4:	2209      	movs	r2, #9
 80026d6:	602a      	str	r2, [r5, #0]
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	81a3      	strh	r3, [r4, #12]
 80026de:	f04f 30ff 	mov.w	r0, #4294967295
 80026e2:	e033      	b.n	800274c <__swsetup_r+0x98>
 80026e4:	0758      	lsls	r0, r3, #29
 80026e6:	d512      	bpl.n	800270e <__swsetup_r+0x5a>
 80026e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026ea:	b141      	cbz	r1, 80026fe <__swsetup_r+0x4a>
 80026ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026f0:	4299      	cmp	r1, r3
 80026f2:	d002      	beq.n	80026fa <__swsetup_r+0x46>
 80026f4:	4628      	mov	r0, r5
 80026f6:	f000 f8af 	bl	8002858 <_free_r>
 80026fa:	2300      	movs	r3, #0
 80026fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002704:	81a3      	strh	r3, [r4, #12]
 8002706:	2300      	movs	r3, #0
 8002708:	6063      	str	r3, [r4, #4]
 800270a:	6923      	ldr	r3, [r4, #16]
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	89a3      	ldrh	r3, [r4, #12]
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	81a3      	strh	r3, [r4, #12]
 8002716:	6923      	ldr	r3, [r4, #16]
 8002718:	b94b      	cbnz	r3, 800272e <__swsetup_r+0x7a>
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002724:	d003      	beq.n	800272e <__swsetup_r+0x7a>
 8002726:	4621      	mov	r1, r4
 8002728:	4628      	mov	r0, r5
 800272a:	f000 fa5f 	bl	8002bec <__smakebuf_r>
 800272e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002732:	f013 0201 	ands.w	r2, r3, #1
 8002736:	d00a      	beq.n	800274e <__swsetup_r+0x9a>
 8002738:	2200      	movs	r2, #0
 800273a:	60a2      	str	r2, [r4, #8]
 800273c:	6962      	ldr	r2, [r4, #20]
 800273e:	4252      	negs	r2, r2
 8002740:	61a2      	str	r2, [r4, #24]
 8002742:	6922      	ldr	r2, [r4, #16]
 8002744:	b942      	cbnz	r2, 8002758 <__swsetup_r+0xa4>
 8002746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800274a:	d1c5      	bne.n	80026d8 <__swsetup_r+0x24>
 800274c:	bd38      	pop	{r3, r4, r5, pc}
 800274e:	0799      	lsls	r1, r3, #30
 8002750:	bf58      	it	pl
 8002752:	6962      	ldrpl	r2, [r4, #20]
 8002754:	60a2      	str	r2, [r4, #8]
 8002756:	e7f4      	b.n	8002742 <__swsetup_r+0x8e>
 8002758:	2000      	movs	r0, #0
 800275a:	e7f7      	b.n	800274c <__swsetup_r+0x98>
 800275c:	20000018 	.word	0x20000018

08002760 <memset>:
 8002760:	4402      	add	r2, r0
 8002762:	4603      	mov	r3, r0
 8002764:	4293      	cmp	r3, r2
 8002766:	d100      	bne.n	800276a <memset+0xa>
 8002768:	4770      	bx	lr
 800276a:	f803 1b01 	strb.w	r1, [r3], #1
 800276e:	e7f9      	b.n	8002764 <memset+0x4>

08002770 <_close_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4d06      	ldr	r5, [pc, #24]	@ (800278c <_close_r+0x1c>)
 8002774:	2300      	movs	r3, #0
 8002776:	4604      	mov	r4, r0
 8002778:	4608      	mov	r0, r1
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	f7fe f869 	bl	8000852 <_close>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_close_r+0x1a>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_close_r+0x1a>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	20000210 	.word	0x20000210

08002790 <_lseek_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4d07      	ldr	r5, [pc, #28]	@ (80027b0 <_lseek_r+0x20>)
 8002794:	4604      	mov	r4, r0
 8002796:	4608      	mov	r0, r1
 8002798:	4611      	mov	r1, r2
 800279a:	2200      	movs	r2, #0
 800279c:	602a      	str	r2, [r5, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7fe f87e 	bl	80008a0 <_lseek>
 80027a4:	1c43      	adds	r3, r0, #1
 80027a6:	d102      	bne.n	80027ae <_lseek_r+0x1e>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	b103      	cbz	r3, 80027ae <_lseek_r+0x1e>
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
 80027b0:	20000210 	.word	0x20000210

080027b4 <_read_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d07      	ldr	r5, [pc, #28]	@ (80027d4 <_read_r+0x20>)
 80027b8:	4604      	mov	r4, r0
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	2200      	movs	r2, #0
 80027c0:	602a      	str	r2, [r5, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7fe f80c 	bl	80007e0 <_read>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_read_r+0x1e>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_read_r+0x1e>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000210 	.word	0x20000210

080027d8 <_write_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	4d07      	ldr	r5, [pc, #28]	@ (80027f8 <_write_r+0x20>)
 80027dc:	4604      	mov	r4, r0
 80027de:	4608      	mov	r0, r1
 80027e0:	4611      	mov	r1, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	602a      	str	r2, [r5, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7fe f817 	bl	800081a <_write>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_write_r+0x1e>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_write_r+0x1e>
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	20000210 	.word	0x20000210

080027fc <__errno>:
 80027fc:	4b01      	ldr	r3, [pc, #4]	@ (8002804 <__errno+0x8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000018 	.word	0x20000018

08002808 <__libc_init_array>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	4d0d      	ldr	r5, [pc, #52]	@ (8002840 <__libc_init_array+0x38>)
 800280c:	4c0d      	ldr	r4, [pc, #52]	@ (8002844 <__libc_init_array+0x3c>)
 800280e:	1b64      	subs	r4, r4, r5
 8002810:	10a4      	asrs	r4, r4, #2
 8002812:	2600      	movs	r6, #0
 8002814:	42a6      	cmp	r6, r4
 8002816:	d109      	bne.n	800282c <__libc_init_array+0x24>
 8002818:	4d0b      	ldr	r5, [pc, #44]	@ (8002848 <__libc_init_array+0x40>)
 800281a:	4c0c      	ldr	r4, [pc, #48]	@ (800284c <__libc_init_array+0x44>)
 800281c:	f000 fa54 	bl	8002cc8 <_init>
 8002820:	1b64      	subs	r4, r4, r5
 8002822:	10a4      	asrs	r4, r4, #2
 8002824:	2600      	movs	r6, #0
 8002826:	42a6      	cmp	r6, r4
 8002828:	d105      	bne.n	8002836 <__libc_init_array+0x2e>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002830:	4798      	blx	r3
 8002832:	3601      	adds	r6, #1
 8002834:	e7ee      	b.n	8002814 <__libc_init_array+0xc>
 8002836:	f855 3b04 	ldr.w	r3, [r5], #4
 800283a:	4798      	blx	r3
 800283c:	3601      	adds	r6, #1
 800283e:	e7f2      	b.n	8002826 <__libc_init_array+0x1e>
 8002840:	08002d00 	.word	0x08002d00
 8002844:	08002d00 	.word	0x08002d00
 8002848:	08002d00 	.word	0x08002d00
 800284c:	08002d04 	.word	0x08002d04

08002850 <__retarget_lock_init_recursive>:
 8002850:	4770      	bx	lr

08002852 <__retarget_lock_acquire_recursive>:
 8002852:	4770      	bx	lr

08002854 <__retarget_lock_release_recursive>:
 8002854:	4770      	bx	lr
	...

08002858 <_free_r>:
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	4605      	mov	r5, r0
 800285c:	2900      	cmp	r1, #0
 800285e:	d041      	beq.n	80028e4 <_free_r+0x8c>
 8002860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002864:	1f0c      	subs	r4, r1, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	bfb8      	it	lt
 800286a:	18e4      	addlt	r4, r4, r3
 800286c:	f000 f8e0 	bl	8002a30 <__malloc_lock>
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <_free_r+0x90>)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	b933      	cbnz	r3, 8002884 <_free_r+0x2c>
 8002876:	6063      	str	r3, [r4, #4]
 8002878:	6014      	str	r4, [r2, #0]
 800287a:	4628      	mov	r0, r5
 800287c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002880:	f000 b8dc 	b.w	8002a3c <__malloc_unlock>
 8002884:	42a3      	cmp	r3, r4
 8002886:	d908      	bls.n	800289a <_free_r+0x42>
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	1821      	adds	r1, r4, r0
 800288c:	428b      	cmp	r3, r1
 800288e:	bf01      	itttt	eq
 8002890:	6819      	ldreq	r1, [r3, #0]
 8002892:	685b      	ldreq	r3, [r3, #4]
 8002894:	1809      	addeq	r1, r1, r0
 8002896:	6021      	streq	r1, [r4, #0]
 8002898:	e7ed      	b.n	8002876 <_free_r+0x1e>
 800289a:	461a      	mov	r2, r3
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	b10b      	cbz	r3, 80028a4 <_free_r+0x4c>
 80028a0:	42a3      	cmp	r3, r4
 80028a2:	d9fa      	bls.n	800289a <_free_r+0x42>
 80028a4:	6811      	ldr	r1, [r2, #0]
 80028a6:	1850      	adds	r0, r2, r1
 80028a8:	42a0      	cmp	r0, r4
 80028aa:	d10b      	bne.n	80028c4 <_free_r+0x6c>
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	4401      	add	r1, r0
 80028b0:	1850      	adds	r0, r2, r1
 80028b2:	4283      	cmp	r3, r0
 80028b4:	6011      	str	r1, [r2, #0]
 80028b6:	d1e0      	bne.n	800287a <_free_r+0x22>
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	6053      	str	r3, [r2, #4]
 80028be:	4408      	add	r0, r1
 80028c0:	6010      	str	r0, [r2, #0]
 80028c2:	e7da      	b.n	800287a <_free_r+0x22>
 80028c4:	d902      	bls.n	80028cc <_free_r+0x74>
 80028c6:	230c      	movs	r3, #12
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	e7d6      	b.n	800287a <_free_r+0x22>
 80028cc:	6820      	ldr	r0, [r4, #0]
 80028ce:	1821      	adds	r1, r4, r0
 80028d0:	428b      	cmp	r3, r1
 80028d2:	bf04      	itt	eq
 80028d4:	6819      	ldreq	r1, [r3, #0]
 80028d6:	685b      	ldreq	r3, [r3, #4]
 80028d8:	6063      	str	r3, [r4, #4]
 80028da:	bf04      	itt	eq
 80028dc:	1809      	addeq	r1, r1, r0
 80028de:	6021      	streq	r1, [r4, #0]
 80028e0:	6054      	str	r4, [r2, #4]
 80028e2:	e7ca      	b.n	800287a <_free_r+0x22>
 80028e4:	bd38      	pop	{r3, r4, r5, pc}
 80028e6:	bf00      	nop
 80028e8:	2000021c 	.word	0x2000021c

080028ec <sbrk_aligned>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	4e0f      	ldr	r6, [pc, #60]	@ (800292c <sbrk_aligned+0x40>)
 80028f0:	460c      	mov	r4, r1
 80028f2:	6831      	ldr	r1, [r6, #0]
 80028f4:	4605      	mov	r5, r0
 80028f6:	b911      	cbnz	r1, 80028fe <sbrk_aligned+0x12>
 80028f8:	f000 f9d6 	bl	8002ca8 <_sbrk_r>
 80028fc:	6030      	str	r0, [r6, #0]
 80028fe:	4621      	mov	r1, r4
 8002900:	4628      	mov	r0, r5
 8002902:	f000 f9d1 	bl	8002ca8 <_sbrk_r>
 8002906:	1c43      	adds	r3, r0, #1
 8002908:	d103      	bne.n	8002912 <sbrk_aligned+0x26>
 800290a:	f04f 34ff 	mov.w	r4, #4294967295
 800290e:	4620      	mov	r0, r4
 8002910:	bd70      	pop	{r4, r5, r6, pc}
 8002912:	1cc4      	adds	r4, r0, #3
 8002914:	f024 0403 	bic.w	r4, r4, #3
 8002918:	42a0      	cmp	r0, r4
 800291a:	d0f8      	beq.n	800290e <sbrk_aligned+0x22>
 800291c:	1a21      	subs	r1, r4, r0
 800291e:	4628      	mov	r0, r5
 8002920:	f000 f9c2 	bl	8002ca8 <_sbrk_r>
 8002924:	3001      	adds	r0, #1
 8002926:	d1f2      	bne.n	800290e <sbrk_aligned+0x22>
 8002928:	e7ef      	b.n	800290a <sbrk_aligned+0x1e>
 800292a:	bf00      	nop
 800292c:	20000218 	.word	0x20000218

08002930 <_malloc_r>:
 8002930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002934:	1ccd      	adds	r5, r1, #3
 8002936:	f025 0503 	bic.w	r5, r5, #3
 800293a:	3508      	adds	r5, #8
 800293c:	2d0c      	cmp	r5, #12
 800293e:	bf38      	it	cc
 8002940:	250c      	movcc	r5, #12
 8002942:	2d00      	cmp	r5, #0
 8002944:	4606      	mov	r6, r0
 8002946:	db01      	blt.n	800294c <_malloc_r+0x1c>
 8002948:	42a9      	cmp	r1, r5
 800294a:	d904      	bls.n	8002956 <_malloc_r+0x26>
 800294c:	230c      	movs	r3, #12
 800294e:	6033      	str	r3, [r6, #0]
 8002950:	2000      	movs	r0, #0
 8002952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a2c <_malloc_r+0xfc>
 800295a:	f000 f869 	bl	8002a30 <__malloc_lock>
 800295e:	f8d8 3000 	ldr.w	r3, [r8]
 8002962:	461c      	mov	r4, r3
 8002964:	bb44      	cbnz	r4, 80029b8 <_malloc_r+0x88>
 8002966:	4629      	mov	r1, r5
 8002968:	4630      	mov	r0, r6
 800296a:	f7ff ffbf 	bl	80028ec <sbrk_aligned>
 800296e:	1c43      	adds	r3, r0, #1
 8002970:	4604      	mov	r4, r0
 8002972:	d158      	bne.n	8002a26 <_malloc_r+0xf6>
 8002974:	f8d8 4000 	ldr.w	r4, [r8]
 8002978:	4627      	mov	r7, r4
 800297a:	2f00      	cmp	r7, #0
 800297c:	d143      	bne.n	8002a06 <_malloc_r+0xd6>
 800297e:	2c00      	cmp	r4, #0
 8002980:	d04b      	beq.n	8002a1a <_malloc_r+0xea>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	4639      	mov	r1, r7
 8002986:	4630      	mov	r0, r6
 8002988:	eb04 0903 	add.w	r9, r4, r3
 800298c:	f000 f98c 	bl	8002ca8 <_sbrk_r>
 8002990:	4581      	cmp	r9, r0
 8002992:	d142      	bne.n	8002a1a <_malloc_r+0xea>
 8002994:	6821      	ldr	r1, [r4, #0]
 8002996:	1a6d      	subs	r5, r5, r1
 8002998:	4629      	mov	r1, r5
 800299a:	4630      	mov	r0, r6
 800299c:	f7ff ffa6 	bl	80028ec <sbrk_aligned>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d03a      	beq.n	8002a1a <_malloc_r+0xea>
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	442b      	add	r3, r5
 80029a8:	6023      	str	r3, [r4, #0]
 80029aa:	f8d8 3000 	ldr.w	r3, [r8]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	bb62      	cbnz	r2, 8002a0c <_malloc_r+0xdc>
 80029b2:	f8c8 7000 	str.w	r7, [r8]
 80029b6:	e00f      	b.n	80029d8 <_malloc_r+0xa8>
 80029b8:	6822      	ldr	r2, [r4, #0]
 80029ba:	1b52      	subs	r2, r2, r5
 80029bc:	d420      	bmi.n	8002a00 <_malloc_r+0xd0>
 80029be:	2a0b      	cmp	r2, #11
 80029c0:	d917      	bls.n	80029f2 <_malloc_r+0xc2>
 80029c2:	1961      	adds	r1, r4, r5
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	6025      	str	r5, [r4, #0]
 80029c8:	bf18      	it	ne
 80029ca:	6059      	strne	r1, [r3, #4]
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	bf08      	it	eq
 80029d0:	f8c8 1000 	streq.w	r1, [r8]
 80029d4:	5162      	str	r2, [r4, r5]
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	4630      	mov	r0, r6
 80029da:	f000 f82f 	bl	8002a3c <__malloc_unlock>
 80029de:	f104 000b 	add.w	r0, r4, #11
 80029e2:	1d23      	adds	r3, r4, #4
 80029e4:	f020 0007 	bic.w	r0, r0, #7
 80029e8:	1ac2      	subs	r2, r0, r3
 80029ea:	bf1c      	itt	ne
 80029ec:	1a1b      	subne	r3, r3, r0
 80029ee:	50a3      	strne	r3, [r4, r2]
 80029f0:	e7af      	b.n	8002952 <_malloc_r+0x22>
 80029f2:	6862      	ldr	r2, [r4, #4]
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	bf0c      	ite	eq
 80029f8:	f8c8 2000 	streq.w	r2, [r8]
 80029fc:	605a      	strne	r2, [r3, #4]
 80029fe:	e7eb      	b.n	80029d8 <_malloc_r+0xa8>
 8002a00:	4623      	mov	r3, r4
 8002a02:	6864      	ldr	r4, [r4, #4]
 8002a04:	e7ae      	b.n	8002964 <_malloc_r+0x34>
 8002a06:	463c      	mov	r4, r7
 8002a08:	687f      	ldr	r7, [r7, #4]
 8002a0a:	e7b6      	b.n	800297a <_malloc_r+0x4a>
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	42a3      	cmp	r3, r4
 8002a12:	d1fb      	bne.n	8002a0c <_malloc_r+0xdc>
 8002a14:	2300      	movs	r3, #0
 8002a16:	6053      	str	r3, [r2, #4]
 8002a18:	e7de      	b.n	80029d8 <_malloc_r+0xa8>
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	6033      	str	r3, [r6, #0]
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f000 f80c 	bl	8002a3c <__malloc_unlock>
 8002a24:	e794      	b.n	8002950 <_malloc_r+0x20>
 8002a26:	6005      	str	r5, [r0, #0]
 8002a28:	e7d6      	b.n	80029d8 <_malloc_r+0xa8>
 8002a2a:	bf00      	nop
 8002a2c:	2000021c 	.word	0x2000021c

08002a30 <__malloc_lock>:
 8002a30:	4801      	ldr	r0, [pc, #4]	@ (8002a38 <__malloc_lock+0x8>)
 8002a32:	f7ff bf0e 	b.w	8002852 <__retarget_lock_acquire_recursive>
 8002a36:	bf00      	nop
 8002a38:	20000214 	.word	0x20000214

08002a3c <__malloc_unlock>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	@ (8002a44 <__malloc_unlock+0x8>)
 8002a3e:	f7ff bf09 	b.w	8002854 <__retarget_lock_release_recursive>
 8002a42:	bf00      	nop
 8002a44:	20000214 	.word	0x20000214

08002a48 <__sflush_r>:
 8002a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a50:	0716      	lsls	r6, r2, #28
 8002a52:	4605      	mov	r5, r0
 8002a54:	460c      	mov	r4, r1
 8002a56:	d454      	bmi.n	8002b02 <__sflush_r+0xba>
 8002a58:	684b      	ldr	r3, [r1, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	dc02      	bgt.n	8002a64 <__sflush_r+0x1c>
 8002a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	dd48      	ble.n	8002af6 <__sflush_r+0xae>
 8002a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a66:	2e00      	cmp	r6, #0
 8002a68:	d045      	beq.n	8002af6 <__sflush_r+0xae>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a70:	682f      	ldr	r7, [r5, #0]
 8002a72:	6a21      	ldr	r1, [r4, #32]
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	d030      	beq.n	8002ada <__sflush_r+0x92>
 8002a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	0759      	lsls	r1, r3, #29
 8002a7e:	d505      	bpl.n	8002a8c <__sflush_r+0x44>
 8002a80:	6863      	ldr	r3, [r4, #4]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a86:	b10b      	cbz	r3, 8002a8c <__sflush_r+0x44>
 8002a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a90:	6a21      	ldr	r1, [r4, #32]
 8002a92:	4628      	mov	r0, r5
 8002a94:	47b0      	blx	r6
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	d106      	bne.n	8002aaa <__sflush_r+0x62>
 8002a9c:	6829      	ldr	r1, [r5, #0]
 8002a9e:	291d      	cmp	r1, #29
 8002aa0:	d82b      	bhi.n	8002afa <__sflush_r+0xb2>
 8002aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <__sflush_r+0x104>)
 8002aa4:	410a      	asrs	r2, r1
 8002aa6:	07d6      	lsls	r6, r2, #31
 8002aa8:	d427      	bmi.n	8002afa <__sflush_r+0xb2>
 8002aaa:	2200      	movs	r2, #0
 8002aac:	6062      	str	r2, [r4, #4]
 8002aae:	04d9      	lsls	r1, r3, #19
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	6022      	str	r2, [r4, #0]
 8002ab4:	d504      	bpl.n	8002ac0 <__sflush_r+0x78>
 8002ab6:	1c42      	adds	r2, r0, #1
 8002ab8:	d101      	bne.n	8002abe <__sflush_r+0x76>
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	b903      	cbnz	r3, 8002ac0 <__sflush_r+0x78>
 8002abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ac2:	602f      	str	r7, [r5, #0]
 8002ac4:	b1b9      	cbz	r1, 8002af6 <__sflush_r+0xae>
 8002ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002aca:	4299      	cmp	r1, r3
 8002acc:	d002      	beq.n	8002ad4 <__sflush_r+0x8c>
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f7ff fec2 	bl	8002858 <_free_r>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ad8:	e00d      	b.n	8002af6 <__sflush_r+0xae>
 8002ada:	2301      	movs	r3, #1
 8002adc:	4628      	mov	r0, r5
 8002ade:	47b0      	blx	r6
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	1c50      	adds	r0, r2, #1
 8002ae4:	d1c9      	bne.n	8002a7a <__sflush_r+0x32>
 8002ae6:	682b      	ldr	r3, [r5, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0c6      	beq.n	8002a7a <__sflush_r+0x32>
 8002aec:	2b1d      	cmp	r3, #29
 8002aee:	d001      	beq.n	8002af4 <__sflush_r+0xac>
 8002af0:	2b16      	cmp	r3, #22
 8002af2:	d11e      	bne.n	8002b32 <__sflush_r+0xea>
 8002af4:	602f      	str	r7, [r5, #0]
 8002af6:	2000      	movs	r0, #0
 8002af8:	e022      	b.n	8002b40 <__sflush_r+0xf8>
 8002afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	e01b      	b.n	8002b3a <__sflush_r+0xf2>
 8002b02:	690f      	ldr	r7, [r1, #16]
 8002b04:	2f00      	cmp	r7, #0
 8002b06:	d0f6      	beq.n	8002af6 <__sflush_r+0xae>
 8002b08:	0793      	lsls	r3, r2, #30
 8002b0a:	680e      	ldr	r6, [r1, #0]
 8002b0c:	bf08      	it	eq
 8002b0e:	694b      	ldreq	r3, [r1, #20]
 8002b10:	600f      	str	r7, [r1, #0]
 8002b12:	bf18      	it	ne
 8002b14:	2300      	movne	r3, #0
 8002b16:	eba6 0807 	sub.w	r8, r6, r7
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	f1b8 0f00 	cmp.w	r8, #0
 8002b20:	dde9      	ble.n	8002af6 <__sflush_r+0xae>
 8002b22:	6a21      	ldr	r1, [r4, #32]
 8002b24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b26:	4643      	mov	r3, r8
 8002b28:	463a      	mov	r2, r7
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	47b0      	blx	r6
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	dc08      	bgt.n	8002b44 <__sflush_r+0xfc>
 8002b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3a:	81a3      	strh	r3, [r4, #12]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b44:	4407      	add	r7, r0
 8002b46:	eba8 0800 	sub.w	r8, r8, r0
 8002b4a:	e7e7      	b.n	8002b1c <__sflush_r+0xd4>
 8002b4c:	dfbffffe 	.word	0xdfbffffe

08002b50 <_fflush_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	690b      	ldr	r3, [r1, #16]
 8002b54:	4605      	mov	r5, r0
 8002b56:	460c      	mov	r4, r1
 8002b58:	b913      	cbnz	r3, 8002b60 <_fflush_r+0x10>
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	b118      	cbz	r0, 8002b6a <_fflush_r+0x1a>
 8002b62:	6a03      	ldr	r3, [r0, #32]
 8002b64:	b90b      	cbnz	r3, 8002b6a <_fflush_r+0x1a>
 8002b66:	f7ff fc8f 	bl	8002488 <__sinit>
 8002b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f3      	beq.n	8002b5a <_fflush_r+0xa>
 8002b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b74:	07d0      	lsls	r0, r2, #31
 8002b76:	d404      	bmi.n	8002b82 <_fflush_r+0x32>
 8002b78:	0599      	lsls	r1, r3, #22
 8002b7a:	d402      	bmi.n	8002b82 <_fflush_r+0x32>
 8002b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b7e:	f7ff fe68 	bl	8002852 <__retarget_lock_acquire_recursive>
 8002b82:	4628      	mov	r0, r5
 8002b84:	4621      	mov	r1, r4
 8002b86:	f7ff ff5f 	bl	8002a48 <__sflush_r>
 8002b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b8c:	07da      	lsls	r2, r3, #31
 8002b8e:	4605      	mov	r5, r0
 8002b90:	d4e4      	bmi.n	8002b5c <_fflush_r+0xc>
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	059b      	lsls	r3, r3, #22
 8002b96:	d4e1      	bmi.n	8002b5c <_fflush_r+0xc>
 8002b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b9a:	f7ff fe5b 	bl	8002854 <__retarget_lock_release_recursive>
 8002b9e:	e7dd      	b.n	8002b5c <_fflush_r+0xc>

08002ba0 <__swhatbuf_r>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	b096      	sub	sp, #88	@ 0x58
 8002bac:	4615      	mov	r5, r2
 8002bae:	461e      	mov	r6, r3
 8002bb0:	da0d      	bge.n	8002bce <__swhatbuf_r+0x2e>
 8002bb2:	89a3      	ldrh	r3, [r4, #12]
 8002bb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2340      	movne	r3, #64	@ 0x40
 8002bc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	6031      	str	r1, [r6, #0]
 8002bc8:	602b      	str	r3, [r5, #0]
 8002bca:	b016      	add	sp, #88	@ 0x58
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	466a      	mov	r2, sp
 8002bd0:	f000 f848 	bl	8002c64 <_fstat_r>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	dbec      	blt.n	8002bb2 <__swhatbuf_r+0x12>
 8002bd8:	9901      	ldr	r1, [sp, #4]
 8002bda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002bde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002be2:	4259      	negs	r1, r3
 8002be4:	4159      	adcs	r1, r3
 8002be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bea:	e7eb      	b.n	8002bc4 <__swhatbuf_r+0x24>

08002bec <__smakebuf_r>:
 8002bec:	898b      	ldrh	r3, [r1, #12]
 8002bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bf0:	079d      	lsls	r5, r3, #30
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	d507      	bpl.n	8002c08 <__smakebuf_r+0x1c>
 8002bf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002bfc:	6023      	str	r3, [r4, #0]
 8002bfe:	6123      	str	r3, [r4, #16]
 8002c00:	2301      	movs	r3, #1
 8002c02:	6163      	str	r3, [r4, #20]
 8002c04:	b003      	add	sp, #12
 8002c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c08:	ab01      	add	r3, sp, #4
 8002c0a:	466a      	mov	r2, sp
 8002c0c:	f7ff ffc8 	bl	8002ba0 <__swhatbuf_r>
 8002c10:	9f00      	ldr	r7, [sp, #0]
 8002c12:	4605      	mov	r5, r0
 8002c14:	4639      	mov	r1, r7
 8002c16:	4630      	mov	r0, r6
 8002c18:	f7ff fe8a 	bl	8002930 <_malloc_r>
 8002c1c:	b948      	cbnz	r0, 8002c32 <__smakebuf_r+0x46>
 8002c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c22:	059a      	lsls	r2, r3, #22
 8002c24:	d4ee      	bmi.n	8002c04 <__smakebuf_r+0x18>
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	81a3      	strh	r3, [r4, #12]
 8002c30:	e7e2      	b.n	8002bf8 <__smakebuf_r+0xc>
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	6020      	str	r0, [r4, #0]
 8002c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c42:	b15b      	cbz	r3, 8002c5c <__smakebuf_r+0x70>
 8002c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f000 f81d 	bl	8002c88 <_isatty_r>
 8002c4e:	b128      	cbz	r0, 8002c5c <__smakebuf_r+0x70>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	81a3      	strh	r3, [r4, #12]
 8002c5c:	89a3      	ldrh	r3, [r4, #12]
 8002c5e:	431d      	orrs	r5, r3
 8002c60:	81a5      	strh	r5, [r4, #12]
 8002c62:	e7cf      	b.n	8002c04 <__smakebuf_r+0x18>

08002c64 <_fstat_r>:
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4d07      	ldr	r5, [pc, #28]	@ (8002c84 <_fstat_r+0x20>)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	f7fd fdfa 	bl	800086a <_fstat>
 8002c76:	1c43      	adds	r3, r0, #1
 8002c78:	d102      	bne.n	8002c80 <_fstat_r+0x1c>
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	b103      	cbz	r3, 8002c80 <_fstat_r+0x1c>
 8002c7e:	6023      	str	r3, [r4, #0]
 8002c80:	bd38      	pop	{r3, r4, r5, pc}
 8002c82:	bf00      	nop
 8002c84:	20000210 	.word	0x20000210

08002c88 <_isatty_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4d06      	ldr	r5, [pc, #24]	@ (8002ca4 <_isatty_r+0x1c>)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f7fd fdf9 	bl	800088a <_isatty>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d102      	bne.n	8002ca2 <_isatty_r+0x1a>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	b103      	cbz	r3, 8002ca2 <_isatty_r+0x1a>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	20000210 	.word	0x20000210

08002ca8 <_sbrk_r>:
 8002ca8:	b538      	push	{r3, r4, r5, lr}
 8002caa:	4d06      	ldr	r5, [pc, #24]	@ (8002cc4 <_sbrk_r+0x1c>)
 8002cac:	2300      	movs	r3, #0
 8002cae:	4604      	mov	r4, r0
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	602b      	str	r3, [r5, #0]
 8002cb4:	f7fd fe02 	bl	80008bc <_sbrk>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_sbrk_r+0x1a>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_sbrk_r+0x1a>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	20000210 	.word	0x20000210

08002cc8 <_init>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr

08002cd4 <_fini>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	bf00      	nop
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr
