
CAN_Data_Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003d3c  08003d3c  00004d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08003ef8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003ef8  00005238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009caa  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197f  00000000  00000000  0000ed36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  000106b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000631  00000000  00000000  00010ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218dd  00000000  00000000  00011509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa5f  00000000  00000000  00032de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae28  00000000  00000000  0003d845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010866d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e4  00000000  00000000  001086b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  0010ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d24 	.word	0x08003d24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003d24 	.word	0x08003d24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:
#include "main_1.h"
extern CAN_HandleTypeDef hcan;
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fc00 	bl	8000db8 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 80005b8:	f001 fb8c 	bl	8001cd4 <HAL_SYSTICK_Callback>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <CAN1_TX_IRQHandler+0x10>)
 80005c6:	f001 f84f 	bl	8001668 <HAL_CAN_IRQHandler>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c0 	.word	0x200000c0

080005d4 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <CAN1_RX0_IRQHandler+0x10>)
 80005da:	f001 f845 	bl	8001668 <HAL_CAN_IRQHandler>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c0 	.word	0x200000c0

080005e8 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <CAN1_RX1_IRQHandler+0x10>)
 80005ee:	f001 f83b 	bl	8001668 <HAL_CAN_IRQHandler>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000c0 	.word	0x200000c0

080005fc <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <CAN1_SCE_IRQHandler+0x10>)
 8000602:	f001 f831 	bl	8001668 <HAL_CAN_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000c0 	.word	0x200000c0

08000610 <main>:

UART_HandleTypeDef huart;
CAN_HandleTypeDef hcan;

int main()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_Init();
 8000614:	f000 fb7e 	bl	8000d14 <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_50_MHZ);
 8000618:	2032      	movs	r0, #50	@ 0x32
 800061a:	f000 f8cf 	bl	80007bc <SystemClockConfig>

	UART2_Init();
 800061e:	f000 f821 	bl	8000664 <UART2_Init>

	CAN_Init(); // This will change the CAN controller from Sleep mode to Initialization mode
 8000622:	f000 f845 	bl	80006b0 <CAN_Init>

	CAN_Filter_Config(); // While Receiving CAN data we have to use filters HAL_CAN_ConfigFilter();
 8000626:	f000 f8a1 	bl	800076c <CAN_Filter_Config>

	//This will Enables bxCAN interrupts @arg CAN_Interrupts.
	if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF) != HAL_OK)
 800062a:	f240 4103 	movw	r1, #1027	@ 0x403
 800062e:	480b      	ldr	r0, [pc, #44]	@ (800065c <main+0x4c>)
 8000630:	f000 fff4 	bl	800161c <HAL_CAN_ActivateNotification>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x2e>
	{
		error_handler();
 800063a:	f000 fa31 	bl	8000aa0 <error_handler>
	}

	// This will change CAN from Initialization mode to Normal mode
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <main+0x4c>)
 8000640:	f000 fdb6 	bl	80011b0 <HAL_CAN_Start>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <main+0x3e>
	{
		error_handler();
 800064a:	f000 fa29 	bl	8000aa0 <error_handler>
	}
	CAN_Tx();
 800064e:	f000 f865 	bl	800071c <CAN_Tx>

	send_msg("Ready to Receive ID's");
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <main+0x50>)
 8000654:	f000 fa00 	bl	8000a58 <send_msg>

	while(1);
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x48>
 800065c:	200000c0 	.word	0x200000c0
 8000660:	08003d3c 	.word	0x08003d3c

08000664 <UART2_Init>:

	return 0;
}

void UART2_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	huart.Instance = USART2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <UART2_Init+0x44>)
 800066a:	4a10      	ldr	r2, [pc, #64]	@ (80006ac <UART2_Init+0x48>)
 800066c:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <UART2_Init+0x44>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <UART2_Init+0x44>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <UART2_Init+0x44>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <UART2_Init+0x44>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <UART2_Init+0x44>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <UART2_Init+0x44>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]

	if((HAL_UART_Init(&huart)) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <UART2_Init+0x44>)
 8000696:	f002 faa1 	bl	8002bdc <HAL_UART_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <UART2_Init+0x40>
	{
		error_handler();
 80006a0:	f000 f9fe 	bl	8000aa0 <error_handler>
	}
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000078 	.word	0x20000078
 80006ac:	40004400 	.word	0x40004400

080006b0 <CAN_Init>:

void CAN_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <CAN_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	@ (8000718 <CAN_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <CAN_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <CAN_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <CAN_Init+0x64>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <CAN_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <CAN_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <CAN_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <CAN_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	775a      	strb	r2, [r3, #29]

	//Time Quanta Parameter settings
	//hcan.Init.Prescaler = 5; //To get 250Kbps Pre-scalar is 10
	hcan.Init.Prescaler = 10;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <CAN_Init+0x64>)
 80006e6:	220a      	movs	r2, #10
 80006e8:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <CAN_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <CAN_Init+0x64>)
 80006f2:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80006f6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <CAN_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
*/

	if(HAL_CAN_Init(&hcan) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <CAN_Init+0x64>)
 8000700:	f000 fb7a 	bl	8000df8 <HAL_CAN_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <CAN_Init+0x5e>
		{
			error_handler();
 800070a:	f000 f9c9 	bl	8000aa0 <error_handler>
		}

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000c0 	.word	0x200000c0
 8000718:	40006400 	.word	0x40006400

0800071c <CAN_Tx>:

void CAN_Tx(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef CAN_Tx;
	uint32_t TxMailbox;
	//uint8_t data_msg[5] = {'H','E','L','L','0'};
	uint8_t data_msg[8] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <CAN_Tx+0x48>)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072a:	e883 0003 	stmia.w	r3, {r0, r1}

	CAN_Tx.StdId = 0x330;
 800072e:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000732:	613b      	str	r3, [r7, #16]
	CAN_Tx.IDE = CAN_ID_STD;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
	CAN_Tx.RTR = CAN_RTR_DATA;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
	CAN_Tx.DLC = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(&hcan, &CAN_Tx, data_msg, &TxMailbox) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	f107 0110 	add.w	r1, r7, #16
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <CAN_Tx+0x4c>)
 800074c:	f000 fd74 	bl	8001238 <HAL_CAN_AddTxMessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <CAN_Tx+0x3e>
		{
			error_handler();
 8000756:	f000 f9a3 	bl	8000aa0 <error_handler>
		}
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08003d54 	.word	0x08003d54
 8000768:	200000c0 	.word	0x200000c0

0800076c <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_Filter;

	CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
	CAN_Filter.FilterIdHigh = 0x620 << 5;
 8000776:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800077a:	603b      	str	r3, [r7, #0]
	CAN_Filter.FilterIdLow = 0x0000; //For Standard ID's(11bit) Low filter ID is not used
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
	CAN_Filter.FilterMaskIdHigh = 0x7F0 << 5;
 8000780:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000784:	60bb      	str	r3, [r7, #8]
	CAN_Filter.FilterMaskIdLow = 0x0000; //For Standard ID's(11bit) Low filter MaskID is not used
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
	CAN_Filter.FilterFIFOAssignment = CAN_RX_FIFO0; //Can use CAN_FILTER_FIFO0 as well
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
	CAN_Filter.FilterBank = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
	CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
	CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan, &CAN_Filter) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <CAN_Filter_Config+0x4c>)
 80007a0:	f000 fc26 	bl	8000ff0 <HAL_CAN_ConfigFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <CAN_Filter_Config+0x42>
		{
			error_handler();
 80007aa:	f000 f979 	bl	8000aa0 <error_handler>
		}

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000c0 	.word	0x200000c0

080007bc <SystemClockConfig>:
void SystemClockConfig(uint8_t clk_freq)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_BYPASS;
 80007d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24

	osc_init.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clk_freq)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b78      	cmp	r3, #120	@ 0x78
 80007e4:	d03a      	beq.n	800085c <SystemClockConfig+0xa0>
 80007e6:	2b78      	cmp	r3, #120	@ 0x78
 80007e8:	dc77      	bgt.n	80008da <SystemClockConfig+0x11e>
 80007ea:	2b32      	cmp	r3, #50	@ 0x32
 80007ec:	d002      	beq.n	80007f4 <SystemClockConfig+0x38>
 80007ee:	2b54      	cmp	r3, #84	@ 0x54
 80007f0:	d01a      	beq.n	8000828 <SystemClockConfig+0x6c>

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
 80007f2:	e072      	b.n	80008da <SystemClockConfig+0x11e>
		osc_init.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 100;
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000820:	2301      	movs	r3, #1
 8000822:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000826:	e033      	b.n	8000890 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 160;
 800082c:	23a0      	movs	r3, #160	@ 0xa0
 800082e:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_2WS;
 8000854:	2302      	movs	r3, #2
 8000856:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 800085a:	e019      	b.n	8000890 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 800085c:	2308      	movs	r3, #8
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 240;
 8000860:	23f0      	movs	r3, #240	@ 0xf0
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800087c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000880:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000888:	2303      	movs	r3, #3
 800088a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 800088e:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 ff03 	bl	80026a0 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClockConfig+0xe8>
		{
			error_handler();
 80008a0:	f000 f8fe 	bl	8000aa0 <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 80008a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fbac 	bl	800200c <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClockConfig+0x102>
		{
			error_handler();
 80008ba:	f000 f8f1 	bl	8000aa0 <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 80008be:	f001 fcbf 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <SystemClockConfig+0x128>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	099b      	lsrs	r3, r3, #6
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f9d8 	bl	8001c82 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008d2:	2004      	movs	r0, #4
 80008d4:	f001 f9e2 	bl	8001c9c <HAL_SYSTICK_CLKSourceConfig>
 80008d8:	e000      	b.n	80008dc <SystemClockConfig+0x120>
		return;
 80008da:	bf00      	nop
}
 80008dc:	3758      	adds	r7, #88	@ 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	10624dd3 	.word	0x10624dd3

080008e8 <HAL_CAN_TxMailbox0CompleteCallback>:

/*CAN Interrupt Callbacks for TX & RX*/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	//send_msg("\r\nMessage Transmitted:Mailbox0\r\n");
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox1");
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8000906:	f000 f8a7 	bl	8000a58 <send_msg>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08003d5c 	.word	0x08003d5c

08000918 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox2");
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8000922:	f000 f899 	bl	8000a58 <send_msg>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08003d7c 	.word	0x08003d7c

08000934 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef CAN_RxHeader;
	uint8_t Rec_data[8];

	CAN_RxHeader.IDE = CAN_ID_STD;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
	CAN_RxHeader.RTR = CAN_RTR_DATA;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
	CAN_RxHeader.DLC = 8;
 8000944:	2308      	movs	r3, #8
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0, &CAN_RxHeader, Rec_data) != HAL_OK)
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	2100      	movs	r1, #0
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 fd40 	bl	80013d8 <HAL_CAN_GetRxMessage>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	{
		error_handler();
 800095e:	f000 f89f 	bl	8000aa0 <error_handler>
	}

	if(CAN_RxHeader.StdId == 0x621)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f240 6221 	movw	r2, #1569	@ 0x621
 8000968:	4293      	cmp	r3, r2
 800096a:	d107      	bne.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		CAN_Tx();
 800096c:	f7ff fed6 	bl	800071c <CAN_Tx>
		speed(Rec_data);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f835 	bl	80009e4 <speed>
		else if(Rec_data[3] == 128)
		{
			send_msg("\r\n ...Reverse... \r\n");
		}
	}
}
 800097a:	e025      	b.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
	else if(CAN_RxHeader.StdId == 0x620)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8000982:	d121      	bne.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
		if(Rec_data[2] == 38)
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	2b26      	cmp	r3, #38	@ 0x26
 8000988:	d103      	bne.n	8000992 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
			send_msg("\r\nMode : ECO \r\n");
 800098a:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800098c:	f000 f864 	bl	8000a58 <send_msg>
}
 8000990:	e01a      	b.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
		else if(Rec_data[2] == 70)
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	2b46      	cmp	r3, #70	@ 0x46
 8000996:	d103      	bne.n	80009a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
			send_msg("\r\nMode : Normal \r\n");
 8000998:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800099a:	f000 f85d 	bl	8000a58 <send_msg>
}
 800099e:	e013      	b.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
		else if(Rec_data[2] == 134)
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	2b86      	cmp	r3, #134	@ 0x86
 80009a4:	d103      	bne.n	80009ae <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
			send_msg("\r\nMode : Sports \r\n");
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80009a8:	f000 f856 	bl	8000a58 <send_msg>
}
 80009ac:	e00c      	b.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
		else if(Rec_data[2] == 96)
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	2b60      	cmp	r3, #96	@ 0x60
 80009b2:	d103      	bne.n	80009bc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			send_msg("\r\n ...Parking... \r\n");
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80009b6:	f000 f84f 	bl	8000a58 <send_msg>
}
 80009ba:	e005      	b.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
		else if(Rec_data[3] == 128)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b80      	cmp	r3, #128	@ 0x80
 80009c0:	d102      	bne.n	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
			send_msg("\r\n ...Reverse... \r\n");
 80009c2:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80009c4:	f000 f848 	bl	8000a58 <send_msg>
}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	@ 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08003d9c 	.word	0x08003d9c
 80009d4:	08003dac 	.word	0x08003dac
 80009d8:	08003dc0 	.word	0x08003dc0
 80009dc:	08003dd4 	.word	0x08003dd4
 80009e0:	08003de8 	.word	0x08003de8

080009e4 <speed>:

void speed(uint8_t *arr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	char speed[5];
	uint32_t speed_val,speed_kmph;
	speed_val = arr[2] << 8 | arr[3];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3302      	adds	r3, #2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	3203      	adds	r2, #3
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]
	speed_kmph = (uint32_t)(0.1183f * (float)speed_val);
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a08:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000a48 <speed+0x64>
 8000a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a14:	ee17 3a90 	vmov	r3, s15
 8000a18:	613b      	str	r3, [r7, #16]
	send_msg("\r\nSpeed in KMPH : ");
 8000a1a:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <speed+0x68>)
 8000a1c:	f000 f81c 	bl	8000a58 <send_msg>
    sprintf(speed,"%lu",speed_kmph);
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	490a      	ldr	r1, [pc, #40]	@ (8000a50 <speed+0x6c>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fce3 	bl	80033f4 <siprintf>
    HAL_UART_Transmit(&huart,(uint8_t *)speed, sizeof(speed), HAL_MAX_DELAY);
 8000a2e:	f107 0108 	add.w	r1, r7, #8
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2205      	movs	r2, #5
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <speed+0x70>)
 8000a3a:	f002 f91f 	bl	8002c7c <HAL_UART_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	3df24745 	.word	0x3df24745
 8000a4c:	08003dfc 	.word	0x08003dfc
 8000a50:	08003e10 	.word	0x08003e10
 8000a54:	20000078 	.word	0x20000078

08000a58 <send_msg>:

void send_msg(char msg[])
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fbd5 	bl	8000210 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <send_msg+0x28>)
 8000a72:	f002 f903 	bl	8002c7c <HAL_UART_Transmit>
  //  char line[3];
   // sprintf(line,"\r\n");
   // HAL_UART_Transmit(&huart, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000078 	.word	0x20000078

08000a84 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	send_msg("Error Occurred");
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <HAL_CAN_ErrorCallback+0x18>)
 8000a8e:	f7ff ffe3 	bl	8000a58 <send_msg>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08003e14 	.word	0x08003e14

08000aa0 <error_handler>:


void error_handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    send_msg("Entered into Error Handler");
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <error_handler+0x10>)
 8000aa6:	f7ff ffd7 	bl	8000a58 <send_msg>
	while(1);
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <error_handler+0xa>
 8000aae:	bf00      	nop
 8000ab0:	08003e24 	.word	0x08003e24

08000ab4 <HAL_MspInit>:
#include "main_1.h"

void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f001 f8ad 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_MspInit+0x40>)
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <HAL_MspInit+0x40>)
 8000ac4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000ac8:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	f06f 000b 	mvn.w	r0, #11
 8000ad2:	f001 f8ac 	bl	8001c2e <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f06f 000a 	mvn.w	r0, #10
 8000ade:	f001 f8a6 	bl	8001c2e <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f06f 0009 	mvn.w	r0, #9
 8000aea:	f001 f8a0 	bl	8001c2e <HAL_NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	/*Implementing Low level init's of USART2 peripheral*/
	//1. Enable the clock for the UART2 peripheral
		__HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a1d      	ldr	r2, [pc, #116]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
	//2. Pin muxing configurations
		gpio_uart.Pin = GPIO_PIN_2;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
		gpio_uart.Alternate = GPIO_AF7_USART2;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
		gpio_uart.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b54:	f001 f8c6 	bl	8001ce4 <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b64:	f001 f8be 	bl	8001ce4 <HAL_GPIO_Init>
	//3. Enable the IRQ and set-up the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b68:	2026      	movs	r0, #38	@ 0x26
 8000b6a:	f001 f87c 	bl	8001c66 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	2026      	movs	r0, #38	@ 0x26
 8000b74:	f001 f85b 	bl	8001c2e <HAL_NVIC_SetPriority>
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_CAN;
	//Enable clock for CAN1
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <HAL_CAN_MspInit+0xa0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <HAL_CAN_MspInit+0xa0>)
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <HAL_CAN_MspInit+0xa0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

	//Pin Muxing Configuration
	gpio_CAN.Pin = GPIO_PIN_11;
 8000bac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bb0:	60fb      	str	r3, [r7, #12]
	gpio_CAN.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	613b      	str	r3, [r7, #16]
	gpio_CAN.Alternate = GPIO_AF9_CAN1;
 8000bb6:	2309      	movs	r3, #9
 8000bb8:	61fb      	str	r3, [r7, #28]
	gpio_CAN.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
	gpio_CAN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	@ (8000c2c <HAL_CAN_MspInit+0xa4>)
 8000bca:	f001 f88b 	bl	8001ce4 <HAL_GPIO_Init>

	gpio_CAN.Pin = GPIO_PIN_12;
 8000bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <HAL_CAN_MspInit+0xa4>)
 8000bdc:	f001 f882 	bl	8001ce4 <HAL_GPIO_Init>

	//Enable the IRQ and set-up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000be0:	2013      	movs	r0, #19
 8000be2:	f001 f840 	bl	8001c66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000be6:	2014      	movs	r0, #20
 8000be8:	f001 f83d 	bl	8001c66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bec:	2015      	movs	r0, #21
 8000bee:	f001 f83a 	bl	8001c66 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bf2:	2016      	movs	r0, #22
 8000bf4:	f001 f837 	bl	8001c66 <HAL_NVIC_EnableIRQ>

	//HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	2013      	movs	r0, #19
 8000bfe:	f001 f816 	bl	8001c2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	2014      	movs	r0, #20
 8000c08:	f001 f811 	bl	8001c2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	210f      	movs	r1, #15
 8000c10:	2015      	movs	r0, #21
 8000c12:	f001 f80c 	bl	8001c2e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	210f      	movs	r1, #15
 8000c1a:	2016      	movs	r0, #22
 8000c1c:	f001 f807 	bl	8001c2e <HAL_NVIC_SetPriority>
}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 fbe8 	bl	8003434 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200000e8 	.word	0x200000e8
 8000c98:	20000238 	.word	0x20000238

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fba7 	bl	8003440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc8d 	bl	8000610 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d04:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8000d08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d0c:	20000238 	.word	0x20000238

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 ff6b 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff feb4 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 ff83 	bl	8001c82 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 ff4b 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200000ec 	.word	0x200000ec

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200000ec 	.word	0x200000ec

08000df8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0ed      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff feb6 	bl	8000b88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2c:	f7ff ffd8 	bl	8000de0 <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e32:	e012      	b.n	8000e5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e34:	f7ff ffd4 	bl	8000de0 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b0a      	cmp	r3, #10
 8000e40:	d90b      	bls.n	8000e5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2205      	movs	r2, #5
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0c5      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0e5      	beq.n	8000e34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0202 	bic.w	r2, r2, #2
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e78:	f7ff ffb2 	bl	8000de0 <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7e:	e012      	b.n	8000ea6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e80:	f7ff ffae 	bl	8000de0 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b0a      	cmp	r3, #10
 8000e8c:	d90b      	bls.n	8000ea6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e09f      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e5      	bne.n	8000e80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7e1b      	ldrb	r3, [r3, #24]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7e5b      	ldrb	r3, [r3, #25]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d108      	bne.n	8000ef8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e007      	b.n	8000f08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7e9b      	ldrb	r3, [r3, #26]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d108      	bne.n	8000f22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0220 	orr.w	r2, r2, #32
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e007      	b.n	8000f32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0220 	bic.w	r2, r2, #32
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7edb      	ldrb	r3, [r3, #27]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d108      	bne.n	8000f4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0210 	bic.w	r2, r2, #16
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e007      	b.n	8000f5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0210 	orr.w	r2, r2, #16
 8000f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7f1b      	ldrb	r3, [r3, #28]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d108      	bne.n	8000f76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0208 	orr.w	r2, r2, #8
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e007      	b.n	8000f86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0208 	bic.w	r2, r2, #8
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7f5b      	ldrb	r3, [r3, #29]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d108      	bne.n	8000fa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0204 	orr.w	r2, r2, #4
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	ea42 0103 	orr.w	r1, r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d003      	beq.n	8001016 <HAL_CAN_ConfigFilter+0x26>
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	2b02      	cmp	r3, #2
 8001012:	f040 80be 	bne.w	8001192 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001016:	4b65      	ldr	r3, [pc, #404]	@ (80011ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001018:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001030:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2201      	movs	r2, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d123      	bne.n	80010c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3248      	adds	r2, #72	@ 0x48
 80010a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	3348      	adds	r3, #72	@ 0x48
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d122      	bne.n	800110e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3248      	adds	r2, #72	@ 0x48
 80010ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001102:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001104:	6979      	ldr	r1, [r7, #20]
 8001106:	3348      	adds	r3, #72	@ 0x48
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001128:	e007      	b.n	800113a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d109      	bne.n	8001156 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	401a      	ands	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001154:	e007      	b.n	8001166 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	431a      	orrs	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001184:	f023 0201 	bic.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e006      	b.n	80011a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
  }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40006400 	.word	0x40006400

080011b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d12e      	bne.n	8001222 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fe00 	bl	8000de0 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e2:	e012      	b.n	800120a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff fdfc 	bl	8000de0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90b      	bls.n	800120a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2205      	movs	r2, #5
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e012      	b.n	8001230 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e5      	bne.n	80011e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e006      	b.n	8001230 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <HAL_CAN_AddTxMessage+0x2c>
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	2b02      	cmp	r3, #2
 8001260:	f040 80ad 	bne.w	80013be <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8095 	beq.w	80013ae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	0e1b      	lsrs	r3, r3, #24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10d      	bne.n	80012bc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	6809      	ldr	r1, [r1, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3318      	adds	r3, #24
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	440b      	add	r3, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e00f      	b.n	80012dc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012cc:	68f9      	ldr	r1, [r7, #12]
 80012ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3318      	adds	r3, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	440b      	add	r3, r1
 80012da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3318      	adds	r3, #24
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	440b      	add	r3, r1
 80012ec:	3304      	adds	r3, #4
 80012ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	7d1b      	ldrb	r3, [r3, #20]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d111      	bne.n	800131c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	3304      	adds	r3, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3318      	adds	r3, #24
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	440b      	add	r3, r1
 8001318:	3304      	adds	r3, #4
 800131a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3307      	adds	r3, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	061a      	lsls	r2, r3, #24
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3306      	adds	r3, #6
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3305      	adds	r3, #5
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4313      	orrs	r3, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	3204      	adds	r2, #4
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	4610      	mov	r0, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	ea43 0200 	orr.w	r2, r3, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	440b      	add	r3, r1
 800134e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001352:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3303      	adds	r3, #3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	061a      	lsls	r2, r3, #24
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3302      	adds	r3, #2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	4313      	orrs	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4610      	mov	r0, r2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	6811      	ldr	r1, [r2, #0]
 800137a:	ea43 0200 	orr.w	r2, r3, r0
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001388:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3318      	adds	r3, #24
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	6811      	ldr	r1, [r2, #0]
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3318      	adds	r3, #24
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	440b      	add	r3, r1
 80013a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e00e      	b.n	80013cc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e006      	b.n	80013cc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3724      	adds	r7, #36	@ 0x24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d003      	beq.n	80013fc <HAL_CAN_GetRxMessage+0x24>
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	f040 8103 	bne.w	8001602 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10e      	bne.n	8001420 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d116      	bne.n	800143e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0f7      	b.n	8001610 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0e8      	b.n	8001610 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	331b      	adds	r3, #27
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0204 	and.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10c      	bne.n	8001476 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	331b      	adds	r3, #27
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0d5b      	lsrs	r3, r3, #21
 800146c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e00b      	b.n	800148e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	331b      	adds	r3, #27
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0202 	and.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2208      	movs	r2, #8
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	e00b      	b.n	80014dc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	331b      	adds	r3, #27
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	3304      	adds	r3, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 020f 	and.w	r2, r3, #15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0a1a      	lsrs	r2, r3, #8
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c1a      	lsrs	r2, r3, #16
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3302      	adds	r3, #2
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0e1a      	lsrs	r2, r3, #24
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3303      	adds	r3, #3
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3304      	adds	r3, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0a1a      	lsrs	r2, r3, #8
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3305      	adds	r3, #5
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0c1a      	lsrs	r2, r3, #16
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3306      	adds	r3, #6
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0e1a      	lsrs	r2, r3, #24
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3307      	adds	r3, #7
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0220 	orr.w	r2, r2, #32
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	e007      	b.n	80015fe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e006      	b.n	8001610 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d002      	beq.n	800163a <HAL_CAN_ActivateNotification+0x1e>
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d109      	bne.n	800164e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6959      	ldr	r1, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e006      	b.n	800165c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07c      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff f90c 	bl	80008e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80016d0:	e016      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e4:	e00c      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e002      	b.n	8001700 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f96b 	bl	80019d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff f8ec 	bl	80008fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001724:	e016      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
 8001738:	e00c      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
 800174c:	e002      	b.n	8001754 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f94b 	bl	80019ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001766:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff f8d0 	bl	8000918 <HAL_CAN_TxMailbox2CompleteCallback>
 8001778:	e016      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
 800178c:	e00c      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	e002      	b.n	80017a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f92b 	bl	80019fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f912 	bl	8001a12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff f894 	bl	8000934 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00c      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2210      	movs	r2, #16
 800182e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2208      	movs	r2, #8
 800184a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8f4 	bl	8001a3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8db 	bl	8001a26 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8de 	bl	8001a4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00b      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2208      	movs	r2, #8
 80018ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8d7 	bl	8001a62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d07b      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d072      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001922:	2b00      	cmp	r3, #0
 8001924:	d043      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03e      	beq.n	80019ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001936:	2b60      	cmp	r3, #96	@ 0x60
 8001938:	d02b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x32a>
 800193a:	2b60      	cmp	r3, #96	@ 0x60
 800193c:	d82e      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 800193e:	2b50      	cmp	r3, #80	@ 0x50
 8001940:	d022      	beq.n	8001988 <HAL_CAN_IRQHandler+0x320>
 8001942:	2b50      	cmp	r3, #80	@ 0x50
 8001944:	d82a      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 8001946:	2b40      	cmp	r3, #64	@ 0x40
 8001948:	d019      	beq.n	800197e <HAL_CAN_IRQHandler+0x316>
 800194a:	2b40      	cmp	r3, #64	@ 0x40
 800194c:	d826      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 800194e:	2b30      	cmp	r3, #48	@ 0x30
 8001950:	d010      	beq.n	8001974 <HAL_CAN_IRQHandler+0x30c>
 8001952:	2b30      	cmp	r3, #48	@ 0x30
 8001954:	d822      	bhi.n	800199c <HAL_CAN_IRQHandler+0x334>
 8001956:	2b10      	cmp	r3, #16
 8001958:	d002      	beq.n	8001960 <HAL_CAN_IRQHandler+0x2f8>
 800195a:	2b20      	cmp	r3, #32
 800195c:	d005      	beq.n	800196a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800195e:	e01d      	b.n	800199c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001968:	e019      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001972:	e014      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800197c:	e00f      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001986:	e00a      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001990:	e005      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199a:	e000      	b.n	800199e <HAL_CAN_IRQHandler+0x336>
            break;
 800199c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2204      	movs	r2, #4
 80019b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff f85b 	bl	8000a84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	@ 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	@ (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	@ (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff3e 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff31 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d106      	bne.n	8001cb8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001cb6:	e005      	b.n	8001cc4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e165      	b.n	8001fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8154 	bne.w	8001fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80ae 	beq.w	8001fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	@ (8001fec <HAL_GPIO_Init+0x308>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ff0 <HAL_GPIO_Init+0x30c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <HAL_GPIO_Init+0x310>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff8 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x20a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8002000 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x206>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x21c>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae96 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0cc      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b68      	ldr	r3, [pc, #416]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d90c      	bls.n	8002048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b65      	ldr	r3, [pc, #404]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d044      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e067      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b37      	ldr	r3, [pc, #220]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4934      	ldr	r1, [pc, #208]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fe70 	bl	8000de0 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe fe6c 	bl	8000de0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d20c      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f855 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	@ (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fdd0 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08003e40 	.word	0x08003e40
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4903      	ldr	r1, [pc, #12]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	08003e50 	.word	0x08003e50

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800221c:	f7ff ffdc 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0b5b      	lsrs	r3, r3, #13
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	@ (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	08003e50 	.word	0x08003e50

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b0ae      	sub	sp, #184	@ 0xb8
 8002246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002266:	4bcb      	ldr	r3, [pc, #812]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b0c      	cmp	r3, #12
 8002270:	f200 8206 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x440>
 8002274:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	080022b1 	.word	0x080022b1
 8002280:	08002681 	.word	0x08002681
 8002284:	08002681 	.word	0x08002681
 8002288:	08002681 	.word	0x08002681
 800228c:	080022b9 	.word	0x080022b9
 8002290:	08002681 	.word	0x08002681
 8002294:	08002681 	.word	0x08002681
 8002298:	08002681 	.word	0x08002681
 800229c:	080022c1 	.word	0x080022c1
 80022a0:	08002681 	.word	0x08002681
 80022a4:	08002681 	.word	0x08002681
 80022a8:	08002681 	.word	0x08002681
 80022ac:	080024b1 	.word	0x080024b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4bb9      	ldr	r3, [pc, #740]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x358>)
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022b6:	e1e7      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b8:	4bb8      	ldr	r3, [pc, #736]	@ (800259c <HAL_RCC_GetSysClockFreq+0x35c>)
 80022ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022be:	e1e3      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4bb4      	ldr	r3, [pc, #720]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022cc:	4bb1      	ldr	r3, [pc, #708]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d071      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d8:	4bae      	ldr	r3, [pc, #696]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	2200      	movs	r2, #0
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	0159      	lsls	r1, r3, #5
 800230c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002310:	0150      	lsls	r0, r2, #5
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4621      	mov	r1, r4
 8002318:	1a51      	subs	r1, r2, r1
 800231a:	6439      	str	r1, [r7, #64]	@ 0x40
 800231c:	4629      	mov	r1, r5
 800231e:	eb63 0301 	sbc.w	r3, r3, r1
 8002322:	647b      	str	r3, [r7, #68]	@ 0x44
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002330:	4649      	mov	r1, r9
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	4641      	mov	r1, r8
 8002336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800233a:	4641      	mov	r1, r8
 800233c:	018a      	lsls	r2, r1, #6
 800233e:	4641      	mov	r1, r8
 8002340:	1a51      	subs	r1, r2, r1
 8002342:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002344:	4649      	mov	r1, r9
 8002346:	eb63 0301 	sbc.w	r3, r3, r1
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002358:	4649      	mov	r1, r9
 800235a:	00cb      	lsls	r3, r1, #3
 800235c:	4641      	mov	r1, r8
 800235e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002362:	4641      	mov	r1, r8
 8002364:	00ca      	lsls	r2, r1, #3
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4603      	mov	r3, r0
 800236c:	4622      	mov	r2, r4
 800236e:	189b      	adds	r3, r3, r2
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
 8002372:	462b      	mov	r3, r5
 8002374:	460a      	mov	r2, r1
 8002376:	eb42 0303 	adc.w	r3, r2, r3
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002388:	4629      	mov	r1, r5
 800238a:	024b      	lsls	r3, r1, #9
 800238c:	4621      	mov	r1, r4
 800238e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002392:	4621      	mov	r1, r4
 8002394:	024a      	lsls	r2, r1, #9
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023ac:	f7fd ff88 	bl	80002c0 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023ba:	e067      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023bc:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023d6:	2300      	movs	r3, #0
 80023d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023de:	4622      	mov	r2, r4
 80023e0:	462b      	mov	r3, r5
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	0159      	lsls	r1, r3, #5
 80023ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f0:	0150      	lsls	r0, r2, #5
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4621      	mov	r1, r4
 80023f8:	1a51      	subs	r1, r2, r1
 80023fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023fc:	4629      	mov	r1, r5
 80023fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002410:	4649      	mov	r1, r9
 8002412:	018b      	lsls	r3, r1, #6
 8002414:	4641      	mov	r1, r8
 8002416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800241a:	4641      	mov	r1, r8
 800241c:	018a      	lsls	r2, r1, #6
 800241e:	4641      	mov	r1, r8
 8002420:	ebb2 0a01 	subs.w	sl, r2, r1
 8002424:	4649      	mov	r1, r9
 8002426:	eb63 0b01 	sbc.w	fp, r3, r1
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002436:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800243a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243e:	4692      	mov	sl, r2
 8002440:	469b      	mov	fp, r3
 8002442:	4623      	mov	r3, r4
 8002444:	eb1a 0303 	adds.w	r3, sl, r3
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	462b      	mov	r3, r5
 800244c:	eb4b 0303 	adc.w	r3, fp, r3
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800245e:	4629      	mov	r1, r5
 8002460:	028b      	lsls	r3, r1, #10
 8002462:	4621      	mov	r1, r4
 8002464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002468:	4621      	mov	r1, r4
 800246a:	028a      	lsls	r2, r1, #10
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002474:	2200      	movs	r2, #0
 8002476:	673b      	str	r3, [r7, #112]	@ 0x70
 8002478:	677a      	str	r2, [r7, #116]	@ 0x74
 800247a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800247e:	f7fd ff1f 	bl	80002c0 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4613      	mov	r3, r2
 8002488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800248c:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800249e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ae:	e0eb      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024bc:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d06b      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c8:	4b32      	ldr	r3, [pc, #200]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	2200      	movs	r2, #0
 80024d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024da:	663b      	str	r3, [r7, #96]	@ 0x60
 80024dc:	2300      	movs	r3, #0
 80024de:	667b      	str	r3, [r7, #100]	@ 0x64
 80024e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024e4:	4622      	mov	r2, r4
 80024e6:	462b      	mov	r3, r5
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	0159      	lsls	r1, r3, #5
 80024f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f6:	0150      	lsls	r0, r2, #5
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4621      	mov	r1, r4
 80024fe:	1a51      	subs	r1, r2, r1
 8002500:	61b9      	str	r1, [r7, #24]
 8002502:	4629      	mov	r1, r5
 8002504:	eb63 0301 	sbc.w	r3, r3, r1
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002516:	4659      	mov	r1, fp
 8002518:	018b      	lsls	r3, r1, #6
 800251a:	4651      	mov	r1, sl
 800251c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002520:	4651      	mov	r1, sl
 8002522:	018a      	lsls	r2, r1, #6
 8002524:	4651      	mov	r1, sl
 8002526:	ebb2 0801 	subs.w	r8, r2, r1
 800252a:	4659      	mov	r1, fp
 800252c:	eb63 0901 	sbc.w	r9, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800253c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002540:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002544:	4690      	mov	r8, r2
 8002546:	4699      	mov	r9, r3
 8002548:	4623      	mov	r3, r4
 800254a:	eb18 0303 	adds.w	r3, r8, r3
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	462b      	mov	r3, r5
 8002552:	eb49 0303 	adc.w	r3, r9, r3
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002564:	4629      	mov	r1, r5
 8002566:	024b      	lsls	r3, r1, #9
 8002568:	4621      	mov	r1, r4
 800256a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800256e:	4621      	mov	r1, r4
 8002570:	024a      	lsls	r2, r1, #9
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800257a:	2200      	movs	r2, #0
 800257c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800257e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002580:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002584:	f7fd fe9c 	bl	80002c0 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002592:	e065      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x420>
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x458>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	2200      	movs	r2, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	4611      	mov	r1, r2
 80025ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80025b2:	2300      	movs	r3, #0
 80025b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025ba:	4642      	mov	r2, r8
 80025bc:	464b      	mov	r3, r9
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4641      	mov	r1, r8
 80025d4:	1a51      	subs	r1, r2, r1
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	4649      	mov	r1, r9
 80025da:	eb63 0301 	sbc.w	r3, r3, r1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025ec:	4659      	mov	r1, fp
 80025ee:	018b      	lsls	r3, r1, #6
 80025f0:	4651      	mov	r1, sl
 80025f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f6:	4651      	mov	r1, sl
 80025f8:	018a      	lsls	r2, r1, #6
 80025fa:	4651      	mov	r1, sl
 80025fc:	1a54      	subs	r4, r2, r1
 80025fe:	4659      	mov	r1, fp
 8002600:	eb63 0501 	sbc.w	r5, r3, r1
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	00eb      	lsls	r3, r5, #3
 800260e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002612:	00e2      	lsls	r2, r4, #3
 8002614:	4614      	mov	r4, r2
 8002616:	461d      	mov	r5, r3
 8002618:	4643      	mov	r3, r8
 800261a:	18e3      	adds	r3, r4, r3
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	464b      	mov	r3, r9
 8002620:	eb45 0303 	adc.w	r3, r5, r3
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002648:	2200      	movs	r2, #0
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800264c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800264e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002652:	f7fd fe35 	bl	80002c0 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4613      	mov	r3, r2
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x458>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0f1b      	lsrs	r3, r3, #28
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800266e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267e:	e003      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800268c:	4618      	mov	r0, r3
 800268e:	37b8      	adds	r7, #184	@ 0xb8
 8002690:	46bd      	mov	sp, r7
 8002692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	00f42400 	.word	0x00f42400

080026a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e28d      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8083 	beq.w	80027c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026c0:	4b94      	ldr	r3, [pc, #592]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d019      	beq.n	8002700 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026cc:	4b91      	ldr	r3, [pc, #580]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e4:	d00c      	beq.n	8002700 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4b84      	ldr	r3, [pc, #528]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05b      	beq.n	80027c4 <HAL_RCC_OscConfig+0x124>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d157      	bne.n	80027c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e25a      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x90>
 8002722:	4b7c      	ldr	r3, [pc, #496]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7b      	ldr	r2, [pc, #492]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xcc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0xb4>
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a72      	ldr	r2, [pc, #456]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xcc>
 8002754:	4b6f      	ldr	r3, [pc, #444]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6e      	ldr	r2, [pc, #440]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6b      	ldr	r2, [pc, #428]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fb34 	bl	8000de0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fb30 	bl	8000de0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e21f      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xdc>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fb20 	bl	8000de0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe fb1c 	bl	8000de0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e20b      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	4b57      	ldr	r3, [pc, #348]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x104>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d06f      	beq.n	80028b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027d2:	4b50      	ldr	r3, [pc, #320]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d017      	beq.n	800280e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027de:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b44      	ldr	r3, [pc, #272]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x186>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1d3      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4937      	ldr	r1, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x278>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fac9 	bl	8000de0 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe fac5 	bl	8000de0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1b4      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4925      	ldr	r1, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x278>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe faa8 	bl	8000de0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7fe faa4 	bl	8000de0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e193      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x27c>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fa88 	bl	8000de0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fa84 	bl	8000de0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e173      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x274>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x234>
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_OscConfig+0x27c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fa71 	bl	8000de0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	e00e      	b.n	8002920 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe fa6d 	bl	8000de0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d907      	bls.n	8002920 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e15c      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
 8002914:	40023800 	.word	0x40023800
 8002918:	42470000 	.word	0x42470000
 800291c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b8a      	ldr	r3, [pc, #552]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b83      	ldr	r3, [pc, #524]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a7e      	ldr	r2, [pc, #504]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b79      	ldr	r3, [pc, #484]	@ (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b76      	ldr	r3, [pc, #472]	@ (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	@ (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe fa2d 	bl	8000de0 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fa29 	bl	8000de0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e118      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b50 <HAL_RCC_OscConfig+0x4b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x31e>
 80029b0:	4b66      	ldr	r3, [pc, #408]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a65      	ldr	r2, [pc, #404]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x358>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x340>
 80029c6:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a60      	ldr	r2, [pc, #384]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b5e      	ldr	r3, [pc, #376]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a5d      	ldr	r2, [pc, #372]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x358>
 80029e0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a59      	ldr	r2, [pc, #356]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	4b57      	ldr	r3, [pc, #348]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a56      	ldr	r2, [pc, #344]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe f9ee 	bl	8000de0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe f9ea 	bl	8000de0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0d7      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x368>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f9d8 	bl	8000de0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe f9d4 	bl	8000de0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0c1      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4a:	4b40      	ldr	r3, [pc, #256]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	4a3a      	ldr	r2, [pc, #232]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80ad 	beq.w	8002bcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a72:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d060      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d145      	bne.n	8002b12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_RCC_OscConfig+0x4b4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f9a8 	bl	8000de0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe f9a4 	bl	8000de0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e093      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	071b      	lsls	r3, r3, #28
 8002ade:	491b      	ldr	r1, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x4b4>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe f979 	bl	8000de0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe f975 	bl	8000de0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e064      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x452>
 8002b10:	e05c      	b.n	8002bcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_RCC_OscConfig+0x4b4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe f962 	bl	8000de0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe f95e 	bl	8000de0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e04d      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x480>
 8002b3e:	e045      	b.n	8002bcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e040      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <HAL_RCC_OscConfig+0x538>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d030      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d129      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d122      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d119      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e042      	b.n	8002c74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd ff78 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f973 	bl	8002f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d175      	bne.n	8002d88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Transmit+0x2c>
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e06e      	b.n	8002d8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2221      	movs	r2, #33	@ 0x21
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f891 	bl	8000de0 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x6c>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cf0:	e02e      	b.n	8002d50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2180      	movs	r1, #128	@ 0x80
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f848 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e03a      	b.n	8002d8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cb      	bne.n	8002cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	@ 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f814 	bl	8002d92 <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da2:	e03b      	b.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d037      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe f818 	bl	8000de0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e03a      	b.n	8002e3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d020      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	d01d      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d116      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f81d 	bl	8002e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e00f      	b.n	8002e3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d0b4      	beq.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b095      	sub	sp, #84	@ 0x54
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d119      	bne.n	8002ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 0310 	bic.w	r3, r3, #16
 8002ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002edc:	61ba      	str	r2, [r7, #24]
 8002ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002efe:	bf00      	nop
 8002f00:	3754      	adds	r7, #84	@ 0x54
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f10:	b0c0      	sub	sp, #256	@ 0x100
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	ea40 0301 	orr.w	r3, r0, r1
 8002f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f64:	f021 010c 	bic.w	r1, r1, #12
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f72:	430b      	orrs	r3, r1
 8002f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	6999      	ldr	r1, [r3, #24]
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	ea40 0301 	orr.w	r3, r0, r1
 8002f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80031d8 <UART_SetConfig+0x2cc>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0xa0>
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80031dc <UART_SetConfig+0x2d0>)
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d104      	bne.n	8002fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7ff f934 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fb4:	e003      	b.n	8002fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb6:	f7ff f91b 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8002fba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc8:	f040 810c 	bne.w	80031e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	1891      	adds	r1, r2, r2
 8002fe4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fe6:	415b      	adcs	r3, r3
 8002fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fee:	4621      	mov	r1, r4
 8002ff0:	eb12 0801 	adds.w	r8, r2, r1
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb43 0901 	adc.w	r9, r3, r1
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	4623      	mov	r3, r4
 8003014:	eb18 0303 	adds.w	r3, r8, r3
 8003018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800301c:	462b      	mov	r3, r5
 800301e:	eb49 0303 	adc.w	r3, r9, r3
 8003022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003032:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800303a:	460b      	mov	r3, r1
 800303c:	18db      	adds	r3, r3, r3
 800303e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003040:	4613      	mov	r3, r2
 8003042:	eb42 0303 	adc.w	r3, r2, r3
 8003046:	657b      	str	r3, [r7, #84]	@ 0x54
 8003048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800304c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003050:	f7fd f936 	bl	80002c0 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4b61      	ldr	r3, [pc, #388]	@ (80031e0 <UART_SetConfig+0x2d4>)
 800305a:	fba3 2302 	umull	r2, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	011c      	lsls	r4, r3, #4
 8003062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800306c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	1891      	adds	r1, r2, r2
 800307a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800307c:	415b      	adcs	r3, r3
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003084:	4641      	mov	r1, r8
 8003086:	eb12 0a01 	adds.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb43 0b01 	adc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800309c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a4:	4692      	mov	sl, r2
 80030a6:	469b      	mov	fp, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	eb1a 0303 	adds.w	r3, sl, r3
 80030ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b2:	464b      	mov	r3, r9
 80030b4:	eb4b 0303 	adc.w	r3, fp, r3
 80030b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030d0:	460b      	mov	r3, r1
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d6:	4613      	mov	r3, r2
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030e6:	f7fd f8eb 	bl	80002c0 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <UART_SetConfig+0x2d4>)
 80030f2:	fba3 2301 	umull	r2, r3, r3, r1
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2264      	movs	r2, #100	@ 0x64
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	1acb      	subs	r3, r1, r3
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003106:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <UART_SetConfig+0x2d4>)
 8003108:	fba3 2302 	umull	r2, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003114:	441c      	add	r4, r3
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003120:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003128:	4642      	mov	r2, r8
 800312a:	464b      	mov	r3, r9
 800312c:	1891      	adds	r1, r2, r2
 800312e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003130:	415b      	adcs	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003138:	4641      	mov	r1, r8
 800313a:	1851      	adds	r1, r2, r1
 800313c:	6339      	str	r1, [r7, #48]	@ 0x30
 800313e:	4649      	mov	r1, r9
 8003140:	414b      	adcs	r3, r1
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003150:	4659      	mov	r1, fp
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4651      	mov	r1, sl
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4642      	mov	r2, r8
 8003166:	189b      	adds	r3, r3, r2
 8003168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003184:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800318c:	460b      	mov	r3, r1
 800318e:	18db      	adds	r3, r3, r3
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003192:	4613      	mov	r3, r2
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031a2:	f7fd f88d 	bl	80002c0 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <UART_SetConfig+0x2d4>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	@ 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	3332      	adds	r3, #50	@ 0x32
 80031be:	4a08      	ldr	r2, [pc, #32]	@ (80031e0 <UART_SetConfig+0x2d4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 0207 	and.w	r2, r3, #7
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4422      	add	r2, r4
 80031d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d4:	e106      	b.n	80033e4 <UART_SetConfig+0x4d8>
 80031d6:	bf00      	nop
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40011400 	.word	0x40011400
 80031e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	6239      	str	r1, [r7, #32]
 80031fe:	415b      	adcs	r3, r3
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
 8003202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003206:	4641      	mov	r1, r8
 8003208:	1854      	adds	r4, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb43 0501 	adc.w	r5, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	00eb      	lsls	r3, r5, #3
 800321a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321e:	00e2      	lsls	r2, r4, #3
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	4643      	mov	r3, r8
 8003226:	18e3      	adds	r3, r4, r3
 8003228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800322c:	464b      	mov	r3, r9
 800322e:	eb45 0303 	adc.w	r3, r5, r3
 8003232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003242:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003252:	4629      	mov	r1, r5
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	4621      	mov	r1, r4
 8003258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325c:	4621      	mov	r1, r4
 800325e:	008a      	lsls	r2, r1, #2
 8003260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003264:	f7fd f82c 	bl	80002c0 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b60      	ldr	r3, [pc, #384]	@ (80033f0 <UART_SetConfig+0x4e4>)
 800326e:	fba3 2302 	umull	r2, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	011c      	lsls	r4, r3, #4
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003280:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003288:	4642      	mov	r2, r8
 800328a:	464b      	mov	r3, r9
 800328c:	1891      	adds	r1, r2, r2
 800328e:	61b9      	str	r1, [r7, #24]
 8003290:	415b      	adcs	r3, r3
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003298:	4641      	mov	r1, r8
 800329a:	1851      	adds	r1, r2, r1
 800329c:	6139      	str	r1, [r7, #16]
 800329e:	4649      	mov	r1, r9
 80032a0:	414b      	adcs	r3, r1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b0:	4659      	mov	r1, fp
 80032b2:	00cb      	lsls	r3, r1, #3
 80032b4:	4651      	mov	r1, sl
 80032b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ba:	4651      	mov	r1, sl
 80032bc:	00ca      	lsls	r2, r1, #3
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	4642      	mov	r2, r8
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032cc:	464b      	mov	r3, r9
 80032ce:	460a      	mov	r2, r1
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032f0:	4649      	mov	r1, r9
 80032f2:	008b      	lsls	r3, r1, #2
 80032f4:	4641      	mov	r1, r8
 80032f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fa:	4641      	mov	r1, r8
 80032fc:	008a      	lsls	r2, r1, #2
 80032fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003302:	f7fc ffdd 	bl	80002c0 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4611      	mov	r1, r2
 800330c:	4b38      	ldr	r3, [pc, #224]	@ (80033f0 <UART_SetConfig+0x4e4>)
 800330e:	fba3 2301 	umull	r2, r3, r3, r1
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2264      	movs	r2, #100	@ 0x64
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	1acb      	subs	r3, r1, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	@ 0x32
 8003320:	4a33      	ldr	r2, [pc, #204]	@ (80033f0 <UART_SetConfig+0x4e4>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800332c:	441c      	add	r4, r3
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	2200      	movs	r2, #0
 8003334:	673b      	str	r3, [r7, #112]	@ 0x70
 8003336:	677a      	str	r2, [r7, #116]	@ 0x74
 8003338:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	1891      	adds	r1, r2, r2
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	415b      	adcs	r3, r3
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800334c:	4641      	mov	r1, r8
 800334e:	1851      	adds	r1, r2, r1
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	4649      	mov	r1, r9
 8003354:	414b      	adcs	r3, r1
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003364:	4659      	mov	r1, fp
 8003366:	00cb      	lsls	r3, r1, #3
 8003368:	4651      	mov	r1, sl
 800336a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336e:	4651      	mov	r1, sl
 8003370:	00ca      	lsls	r2, r1, #3
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	4603      	mov	r3, r0
 8003378:	4642      	mov	r2, r8
 800337a:	189b      	adds	r3, r3, r2
 800337c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337e:	464b      	mov	r3, r9
 8003380:	460a      	mov	r2, r1
 8003382:	eb42 0303 	adc.w	r3, r2, r3
 8003386:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	663b      	str	r3, [r7, #96]	@ 0x60
 8003392:	667a      	str	r2, [r7, #100]	@ 0x64
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033a0:	4649      	mov	r1, r9
 80033a2:	008b      	lsls	r3, r1, #2
 80033a4:	4641      	mov	r1, r8
 80033a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033aa:	4641      	mov	r1, r8
 80033ac:	008a      	lsls	r2, r1, #2
 80033ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033b2:	f7fc ff85 	bl	80002c0 <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <UART_SetConfig+0x4e4>)
 80033bc:	fba3 1302 	umull	r1, r3, r3, r2
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	2164      	movs	r1, #100	@ 0x64
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	3332      	adds	r3, #50	@ 0x32
 80033ce:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <UART_SetConfig+0x4e4>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4422      	add	r2, r4
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ea:	46bd      	mov	sp, r7
 80033ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f0:	51eb851f 	.word	0x51eb851f

080033f4 <siprintf>:
 80033f4:	b40e      	push	{r1, r2, r3}
 80033f6:	b500      	push	{lr}
 80033f8:	b09c      	sub	sp, #112	@ 0x70
 80033fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80033fc:	9002      	str	r0, [sp, #8]
 80033fe:	9006      	str	r0, [sp, #24]
 8003400:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003404:	4809      	ldr	r0, [pc, #36]	@ (800342c <siprintf+0x38>)
 8003406:	9107      	str	r1, [sp, #28]
 8003408:	9104      	str	r1, [sp, #16]
 800340a:	4909      	ldr	r1, [pc, #36]	@ (8003430 <siprintf+0x3c>)
 800340c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003410:	9105      	str	r1, [sp, #20]
 8003412:	6800      	ldr	r0, [r0, #0]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	a902      	add	r1, sp, #8
 8003418:	f000 f98c 	bl	8003734 <_svfiprintf_r>
 800341c:	9b02      	ldr	r3, [sp, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	b01c      	add	sp, #112	@ 0x70
 8003424:	f85d eb04 	ldr.w	lr, [sp], #4
 8003428:	b003      	add	sp, #12
 800342a:	4770      	bx	lr
 800342c:	2000000c 	.word	0x2000000c
 8003430:	ffff0208 	.word	0xffff0208

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	@ (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	2000000c 	.word	0x2000000c

08003440 <__libc_init_array>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4d0d      	ldr	r5, [pc, #52]	@ (8003478 <__libc_init_array+0x38>)
 8003444:	4c0d      	ldr	r4, [pc, #52]	@ (800347c <__libc_init_array+0x3c>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	2600      	movs	r6, #0
 800344c:	42a6      	cmp	r6, r4
 800344e:	d109      	bne.n	8003464 <__libc_init_array+0x24>
 8003450:	4d0b      	ldr	r5, [pc, #44]	@ (8003480 <__libc_init_array+0x40>)
 8003452:	4c0c      	ldr	r4, [pc, #48]	@ (8003484 <__libc_init_array+0x44>)
 8003454:	f000 fc66 	bl	8003d24 <_init>
 8003458:	1b64      	subs	r4, r4, r5
 800345a:	10a4      	asrs	r4, r4, #2
 800345c:	2600      	movs	r6, #0
 800345e:	42a6      	cmp	r6, r4
 8003460:	d105      	bne.n	800346e <__libc_init_array+0x2e>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	f855 3b04 	ldr.w	r3, [r5], #4
 8003468:	4798      	blx	r3
 800346a:	3601      	adds	r6, #1
 800346c:	e7ee      	b.n	800344c <__libc_init_array+0xc>
 800346e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003472:	4798      	blx	r3
 8003474:	3601      	adds	r6, #1
 8003476:	e7f2      	b.n	800345e <__libc_init_array+0x1e>
 8003478:	08003e94 	.word	0x08003e94
 800347c:	08003e94 	.word	0x08003e94
 8003480:	08003e94 	.word	0x08003e94
 8003484:	08003e98 	.word	0x08003e98

08003488 <__retarget_lock_acquire_recursive>:
 8003488:	4770      	bx	lr

0800348a <__retarget_lock_release_recursive>:
 800348a:	4770      	bx	lr

0800348c <_free_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4605      	mov	r5, r0
 8003490:	2900      	cmp	r1, #0
 8003492:	d041      	beq.n	8003518 <_free_r+0x8c>
 8003494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003498:	1f0c      	subs	r4, r1, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	18e4      	addlt	r4, r4, r3
 80034a0:	f000 f8e0 	bl	8003664 <__malloc_lock>
 80034a4:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <_free_r+0x90>)
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	b933      	cbnz	r3, 80034b8 <_free_r+0x2c>
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	6014      	str	r4, [r2, #0]
 80034ae:	4628      	mov	r0, r5
 80034b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b4:	f000 b8dc 	b.w	8003670 <__malloc_unlock>
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	d908      	bls.n	80034ce <_free_r+0x42>
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	1821      	adds	r1, r4, r0
 80034c0:	428b      	cmp	r3, r1
 80034c2:	bf01      	itttt	eq
 80034c4:	6819      	ldreq	r1, [r3, #0]
 80034c6:	685b      	ldreq	r3, [r3, #4]
 80034c8:	1809      	addeq	r1, r1, r0
 80034ca:	6021      	streq	r1, [r4, #0]
 80034cc:	e7ed      	b.n	80034aa <_free_r+0x1e>
 80034ce:	461a      	mov	r2, r3
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	b10b      	cbz	r3, 80034d8 <_free_r+0x4c>
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d9fa      	bls.n	80034ce <_free_r+0x42>
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	1850      	adds	r0, r2, r1
 80034dc:	42a0      	cmp	r0, r4
 80034de:	d10b      	bne.n	80034f8 <_free_r+0x6c>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	4401      	add	r1, r0
 80034e4:	1850      	adds	r0, r2, r1
 80034e6:	4283      	cmp	r3, r0
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	d1e0      	bne.n	80034ae <_free_r+0x22>
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	6053      	str	r3, [r2, #4]
 80034f2:	4408      	add	r0, r1
 80034f4:	6010      	str	r0, [r2, #0]
 80034f6:	e7da      	b.n	80034ae <_free_r+0x22>
 80034f8:	d902      	bls.n	8003500 <_free_r+0x74>
 80034fa:	230c      	movs	r3, #12
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	e7d6      	b.n	80034ae <_free_r+0x22>
 8003500:	6820      	ldr	r0, [r4, #0]
 8003502:	1821      	adds	r1, r4, r0
 8003504:	428b      	cmp	r3, r1
 8003506:	bf04      	itt	eq
 8003508:	6819      	ldreq	r1, [r3, #0]
 800350a:	685b      	ldreq	r3, [r3, #4]
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	bf04      	itt	eq
 8003510:	1809      	addeq	r1, r1, r0
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	6054      	str	r4, [r2, #4]
 8003516:	e7ca      	b.n	80034ae <_free_r+0x22>
 8003518:	bd38      	pop	{r3, r4, r5, pc}
 800351a:	bf00      	nop
 800351c:	20000234 	.word	0x20000234

08003520 <sbrk_aligned>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4e0f      	ldr	r6, [pc, #60]	@ (8003560 <sbrk_aligned+0x40>)
 8003524:	460c      	mov	r4, r1
 8003526:	6831      	ldr	r1, [r6, #0]
 8003528:	4605      	mov	r5, r0
 800352a:	b911      	cbnz	r1, 8003532 <sbrk_aligned+0x12>
 800352c:	f000 fba6 	bl	8003c7c <_sbrk_r>
 8003530:	6030      	str	r0, [r6, #0]
 8003532:	4621      	mov	r1, r4
 8003534:	4628      	mov	r0, r5
 8003536:	f000 fba1 	bl	8003c7c <_sbrk_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d103      	bne.n	8003546 <sbrk_aligned+0x26>
 800353e:	f04f 34ff 	mov.w	r4, #4294967295
 8003542:	4620      	mov	r0, r4
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	1cc4      	adds	r4, r0, #3
 8003548:	f024 0403 	bic.w	r4, r4, #3
 800354c:	42a0      	cmp	r0, r4
 800354e:	d0f8      	beq.n	8003542 <sbrk_aligned+0x22>
 8003550:	1a21      	subs	r1, r4, r0
 8003552:	4628      	mov	r0, r5
 8003554:	f000 fb92 	bl	8003c7c <_sbrk_r>
 8003558:	3001      	adds	r0, #1
 800355a:	d1f2      	bne.n	8003542 <sbrk_aligned+0x22>
 800355c:	e7ef      	b.n	800353e <sbrk_aligned+0x1e>
 800355e:	bf00      	nop
 8003560:	20000230 	.word	0x20000230

08003564 <_malloc_r>:
 8003564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003568:	1ccd      	adds	r5, r1, #3
 800356a:	f025 0503 	bic.w	r5, r5, #3
 800356e:	3508      	adds	r5, #8
 8003570:	2d0c      	cmp	r5, #12
 8003572:	bf38      	it	cc
 8003574:	250c      	movcc	r5, #12
 8003576:	2d00      	cmp	r5, #0
 8003578:	4606      	mov	r6, r0
 800357a:	db01      	blt.n	8003580 <_malloc_r+0x1c>
 800357c:	42a9      	cmp	r1, r5
 800357e:	d904      	bls.n	800358a <_malloc_r+0x26>
 8003580:	230c      	movs	r3, #12
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	2000      	movs	r0, #0
 8003586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800358a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003660 <_malloc_r+0xfc>
 800358e:	f000 f869 	bl	8003664 <__malloc_lock>
 8003592:	f8d8 3000 	ldr.w	r3, [r8]
 8003596:	461c      	mov	r4, r3
 8003598:	bb44      	cbnz	r4, 80035ec <_malloc_r+0x88>
 800359a:	4629      	mov	r1, r5
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff ffbf 	bl	8003520 <sbrk_aligned>
 80035a2:	1c43      	adds	r3, r0, #1
 80035a4:	4604      	mov	r4, r0
 80035a6:	d158      	bne.n	800365a <_malloc_r+0xf6>
 80035a8:	f8d8 4000 	ldr.w	r4, [r8]
 80035ac:	4627      	mov	r7, r4
 80035ae:	2f00      	cmp	r7, #0
 80035b0:	d143      	bne.n	800363a <_malloc_r+0xd6>
 80035b2:	2c00      	cmp	r4, #0
 80035b4:	d04b      	beq.n	800364e <_malloc_r+0xea>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	eb04 0903 	add.w	r9, r4, r3
 80035c0:	f000 fb5c 	bl	8003c7c <_sbrk_r>
 80035c4:	4581      	cmp	r9, r0
 80035c6:	d142      	bne.n	800364e <_malloc_r+0xea>
 80035c8:	6821      	ldr	r1, [r4, #0]
 80035ca:	1a6d      	subs	r5, r5, r1
 80035cc:	4629      	mov	r1, r5
 80035ce:	4630      	mov	r0, r6
 80035d0:	f7ff ffa6 	bl	8003520 <sbrk_aligned>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d03a      	beq.n	800364e <_malloc_r+0xea>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	442b      	add	r3, r5
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	f8d8 3000 	ldr.w	r3, [r8]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	bb62      	cbnz	r2, 8003640 <_malloc_r+0xdc>
 80035e6:	f8c8 7000 	str.w	r7, [r8]
 80035ea:	e00f      	b.n	800360c <_malloc_r+0xa8>
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	1b52      	subs	r2, r2, r5
 80035f0:	d420      	bmi.n	8003634 <_malloc_r+0xd0>
 80035f2:	2a0b      	cmp	r2, #11
 80035f4:	d917      	bls.n	8003626 <_malloc_r+0xc2>
 80035f6:	1961      	adds	r1, r4, r5
 80035f8:	42a3      	cmp	r3, r4
 80035fa:	6025      	str	r5, [r4, #0]
 80035fc:	bf18      	it	ne
 80035fe:	6059      	strne	r1, [r3, #4]
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	bf08      	it	eq
 8003604:	f8c8 1000 	streq.w	r1, [r8]
 8003608:	5162      	str	r2, [r4, r5]
 800360a:	604b      	str	r3, [r1, #4]
 800360c:	4630      	mov	r0, r6
 800360e:	f000 f82f 	bl	8003670 <__malloc_unlock>
 8003612:	f104 000b 	add.w	r0, r4, #11
 8003616:	1d23      	adds	r3, r4, #4
 8003618:	f020 0007 	bic.w	r0, r0, #7
 800361c:	1ac2      	subs	r2, r0, r3
 800361e:	bf1c      	itt	ne
 8003620:	1a1b      	subne	r3, r3, r0
 8003622:	50a3      	strne	r3, [r4, r2]
 8003624:	e7af      	b.n	8003586 <_malloc_r+0x22>
 8003626:	6862      	ldr	r2, [r4, #4]
 8003628:	42a3      	cmp	r3, r4
 800362a:	bf0c      	ite	eq
 800362c:	f8c8 2000 	streq.w	r2, [r8]
 8003630:	605a      	strne	r2, [r3, #4]
 8003632:	e7eb      	b.n	800360c <_malloc_r+0xa8>
 8003634:	4623      	mov	r3, r4
 8003636:	6864      	ldr	r4, [r4, #4]
 8003638:	e7ae      	b.n	8003598 <_malloc_r+0x34>
 800363a:	463c      	mov	r4, r7
 800363c:	687f      	ldr	r7, [r7, #4]
 800363e:	e7b6      	b.n	80035ae <_malloc_r+0x4a>
 8003640:	461a      	mov	r2, r3
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	42a3      	cmp	r3, r4
 8003646:	d1fb      	bne.n	8003640 <_malloc_r+0xdc>
 8003648:	2300      	movs	r3, #0
 800364a:	6053      	str	r3, [r2, #4]
 800364c:	e7de      	b.n	800360c <_malloc_r+0xa8>
 800364e:	230c      	movs	r3, #12
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	4630      	mov	r0, r6
 8003654:	f000 f80c 	bl	8003670 <__malloc_unlock>
 8003658:	e794      	b.n	8003584 <_malloc_r+0x20>
 800365a:	6005      	str	r5, [r0, #0]
 800365c:	e7d6      	b.n	800360c <_malloc_r+0xa8>
 800365e:	bf00      	nop
 8003660:	20000234 	.word	0x20000234

08003664 <__malloc_lock>:
 8003664:	4801      	ldr	r0, [pc, #4]	@ (800366c <__malloc_lock+0x8>)
 8003666:	f7ff bf0f 	b.w	8003488 <__retarget_lock_acquire_recursive>
 800366a:	bf00      	nop
 800366c:	2000022c 	.word	0x2000022c

08003670 <__malloc_unlock>:
 8003670:	4801      	ldr	r0, [pc, #4]	@ (8003678 <__malloc_unlock+0x8>)
 8003672:	f7ff bf0a 	b.w	800348a <__retarget_lock_release_recursive>
 8003676:	bf00      	nop
 8003678:	2000022c 	.word	0x2000022c

0800367c <__ssputs_r>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	688e      	ldr	r6, [r1, #8]
 8003682:	461f      	mov	r7, r3
 8003684:	42be      	cmp	r6, r7
 8003686:	680b      	ldr	r3, [r1, #0]
 8003688:	4682      	mov	sl, r0
 800368a:	460c      	mov	r4, r1
 800368c:	4690      	mov	r8, r2
 800368e:	d82d      	bhi.n	80036ec <__ssputs_r+0x70>
 8003690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003698:	d026      	beq.n	80036e8 <__ssputs_r+0x6c>
 800369a:	6965      	ldr	r5, [r4, #20]
 800369c:	6909      	ldr	r1, [r1, #16]
 800369e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036a2:	eba3 0901 	sub.w	r9, r3, r1
 80036a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036aa:	1c7b      	adds	r3, r7, #1
 80036ac:	444b      	add	r3, r9
 80036ae:	106d      	asrs	r5, r5, #1
 80036b0:	429d      	cmp	r5, r3
 80036b2:	bf38      	it	cc
 80036b4:	461d      	movcc	r5, r3
 80036b6:	0553      	lsls	r3, r2, #21
 80036b8:	d527      	bpl.n	800370a <__ssputs_r+0x8e>
 80036ba:	4629      	mov	r1, r5
 80036bc:	f7ff ff52 	bl	8003564 <_malloc_r>
 80036c0:	4606      	mov	r6, r0
 80036c2:	b360      	cbz	r0, 800371e <__ssputs_r+0xa2>
 80036c4:	6921      	ldr	r1, [r4, #16]
 80036c6:	464a      	mov	r2, r9
 80036c8:	f000 fae8 	bl	8003c9c <memcpy>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80036d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d6:	81a3      	strh	r3, [r4, #12]
 80036d8:	6126      	str	r6, [r4, #16]
 80036da:	6165      	str	r5, [r4, #20]
 80036dc:	444e      	add	r6, r9
 80036de:	eba5 0509 	sub.w	r5, r5, r9
 80036e2:	6026      	str	r6, [r4, #0]
 80036e4:	60a5      	str	r5, [r4, #8]
 80036e6:	463e      	mov	r6, r7
 80036e8:	42be      	cmp	r6, r7
 80036ea:	d900      	bls.n	80036ee <__ssputs_r+0x72>
 80036ec:	463e      	mov	r6, r7
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	4632      	mov	r2, r6
 80036f2:	4641      	mov	r1, r8
 80036f4:	f000 faa8 	bl	8003c48 <memmove>
 80036f8:	68a3      	ldr	r3, [r4, #8]
 80036fa:	1b9b      	subs	r3, r3, r6
 80036fc:	60a3      	str	r3, [r4, #8]
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	4433      	add	r3, r6
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	2000      	movs	r0, #0
 8003706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370a:	462a      	mov	r2, r5
 800370c:	f000 fad4 	bl	8003cb8 <_realloc_r>
 8003710:	4606      	mov	r6, r0
 8003712:	2800      	cmp	r0, #0
 8003714:	d1e0      	bne.n	80036d8 <__ssputs_r+0x5c>
 8003716:	6921      	ldr	r1, [r4, #16]
 8003718:	4650      	mov	r0, sl
 800371a:	f7ff feb7 	bl	800348c <_free_r>
 800371e:	230c      	movs	r3, #12
 8003720:	f8ca 3000 	str.w	r3, [sl]
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800372a:	81a3      	strh	r3, [r4, #12]
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	e7e9      	b.n	8003706 <__ssputs_r+0x8a>
	...

08003734 <_svfiprintf_r>:
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	4698      	mov	r8, r3
 800373a:	898b      	ldrh	r3, [r1, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	b09d      	sub	sp, #116	@ 0x74
 8003740:	4607      	mov	r7, r0
 8003742:	460d      	mov	r5, r1
 8003744:	4614      	mov	r4, r2
 8003746:	d510      	bpl.n	800376a <_svfiprintf_r+0x36>
 8003748:	690b      	ldr	r3, [r1, #16]
 800374a:	b973      	cbnz	r3, 800376a <_svfiprintf_r+0x36>
 800374c:	2140      	movs	r1, #64	@ 0x40
 800374e:	f7ff ff09 	bl	8003564 <_malloc_r>
 8003752:	6028      	str	r0, [r5, #0]
 8003754:	6128      	str	r0, [r5, #16]
 8003756:	b930      	cbnz	r0, 8003766 <_svfiprintf_r+0x32>
 8003758:	230c      	movs	r3, #12
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	b01d      	add	sp, #116	@ 0x74
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	2340      	movs	r3, #64	@ 0x40
 8003768:	616b      	str	r3, [r5, #20]
 800376a:	2300      	movs	r3, #0
 800376c:	9309      	str	r3, [sp, #36]	@ 0x24
 800376e:	2320      	movs	r3, #32
 8003770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003774:	f8cd 800c 	str.w	r8, [sp, #12]
 8003778:	2330      	movs	r3, #48	@ 0x30
 800377a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003918 <_svfiprintf_r+0x1e4>
 800377e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003782:	f04f 0901 	mov.w	r9, #1
 8003786:	4623      	mov	r3, r4
 8003788:	469a      	mov	sl, r3
 800378a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378e:	b10a      	cbz	r2, 8003794 <_svfiprintf_r+0x60>
 8003790:	2a25      	cmp	r2, #37	@ 0x25
 8003792:	d1f9      	bne.n	8003788 <_svfiprintf_r+0x54>
 8003794:	ebba 0b04 	subs.w	fp, sl, r4
 8003798:	d00b      	beq.n	80037b2 <_svfiprintf_r+0x7e>
 800379a:	465b      	mov	r3, fp
 800379c:	4622      	mov	r2, r4
 800379e:	4629      	mov	r1, r5
 80037a0:	4638      	mov	r0, r7
 80037a2:	f7ff ff6b 	bl	800367c <__ssputs_r>
 80037a6:	3001      	adds	r0, #1
 80037a8:	f000 80a7 	beq.w	80038fa <_svfiprintf_r+0x1c6>
 80037ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037ae:	445a      	add	r2, fp
 80037b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80037b2:	f89a 3000 	ldrb.w	r3, [sl]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 809f 	beq.w	80038fa <_svfiprintf_r+0x1c6>
 80037bc:	2300      	movs	r3, #0
 80037be:	f04f 32ff 	mov.w	r2, #4294967295
 80037c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c6:	f10a 0a01 	add.w	sl, sl, #1
 80037ca:	9304      	str	r3, [sp, #16]
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80037d4:	4654      	mov	r4, sl
 80037d6:	2205      	movs	r2, #5
 80037d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037dc:	484e      	ldr	r0, [pc, #312]	@ (8003918 <_svfiprintf_r+0x1e4>)
 80037de:	f7fc fd1f 	bl	8000220 <memchr>
 80037e2:	9a04      	ldr	r2, [sp, #16]
 80037e4:	b9d8      	cbnz	r0, 800381e <_svfiprintf_r+0xea>
 80037e6:	06d0      	lsls	r0, r2, #27
 80037e8:	bf44      	itt	mi
 80037ea:	2320      	movmi	r3, #32
 80037ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037f0:	0711      	lsls	r1, r2, #28
 80037f2:	bf44      	itt	mi
 80037f4:	232b      	movmi	r3, #43	@ 0x2b
 80037f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037fa:	f89a 3000 	ldrb.w	r3, [sl]
 80037fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003800:	d015      	beq.n	800382e <_svfiprintf_r+0xfa>
 8003802:	9a07      	ldr	r2, [sp, #28]
 8003804:	4654      	mov	r4, sl
 8003806:	2000      	movs	r0, #0
 8003808:	f04f 0c0a 	mov.w	ip, #10
 800380c:	4621      	mov	r1, r4
 800380e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003812:	3b30      	subs	r3, #48	@ 0x30
 8003814:	2b09      	cmp	r3, #9
 8003816:	d94b      	bls.n	80038b0 <_svfiprintf_r+0x17c>
 8003818:	b1b0      	cbz	r0, 8003848 <_svfiprintf_r+0x114>
 800381a:	9207      	str	r2, [sp, #28]
 800381c:	e014      	b.n	8003848 <_svfiprintf_r+0x114>
 800381e:	eba0 0308 	sub.w	r3, r0, r8
 8003822:	fa09 f303 	lsl.w	r3, r9, r3
 8003826:	4313      	orrs	r3, r2
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	46a2      	mov	sl, r4
 800382c:	e7d2      	b.n	80037d4 <_svfiprintf_r+0xa0>
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	9103      	str	r1, [sp, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	bfbb      	ittet	lt
 800383a:	425b      	neglt	r3, r3
 800383c:	f042 0202 	orrlt.w	r2, r2, #2
 8003840:	9307      	strge	r3, [sp, #28]
 8003842:	9307      	strlt	r3, [sp, #28]
 8003844:	bfb8      	it	lt
 8003846:	9204      	strlt	r2, [sp, #16]
 8003848:	7823      	ldrb	r3, [r4, #0]
 800384a:	2b2e      	cmp	r3, #46	@ 0x2e
 800384c:	d10a      	bne.n	8003864 <_svfiprintf_r+0x130>
 800384e:	7863      	ldrb	r3, [r4, #1]
 8003850:	2b2a      	cmp	r3, #42	@ 0x2a
 8003852:	d132      	bne.n	80038ba <_svfiprintf_r+0x186>
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9203      	str	r2, [sp, #12]
 800385c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003860:	3402      	adds	r4, #2
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003928 <_svfiprintf_r+0x1f4>
 8003868:	7821      	ldrb	r1, [r4, #0]
 800386a:	2203      	movs	r2, #3
 800386c:	4650      	mov	r0, sl
 800386e:	f7fc fcd7 	bl	8000220 <memchr>
 8003872:	b138      	cbz	r0, 8003884 <_svfiprintf_r+0x150>
 8003874:	9b04      	ldr	r3, [sp, #16]
 8003876:	eba0 000a 	sub.w	r0, r0, sl
 800387a:	2240      	movs	r2, #64	@ 0x40
 800387c:	4082      	lsls	r2, r0
 800387e:	4313      	orrs	r3, r2
 8003880:	3401      	adds	r4, #1
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003888:	4824      	ldr	r0, [pc, #144]	@ (800391c <_svfiprintf_r+0x1e8>)
 800388a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800388e:	2206      	movs	r2, #6
 8003890:	f7fc fcc6 	bl	8000220 <memchr>
 8003894:	2800      	cmp	r0, #0
 8003896:	d036      	beq.n	8003906 <_svfiprintf_r+0x1d2>
 8003898:	4b21      	ldr	r3, [pc, #132]	@ (8003920 <_svfiprintf_r+0x1ec>)
 800389a:	bb1b      	cbnz	r3, 80038e4 <_svfiprintf_r+0x1b0>
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	3307      	adds	r3, #7
 80038a0:	f023 0307 	bic.w	r3, r3, #7
 80038a4:	3308      	adds	r3, #8
 80038a6:	9303      	str	r3, [sp, #12]
 80038a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038aa:	4433      	add	r3, r6
 80038ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80038ae:	e76a      	b.n	8003786 <_svfiprintf_r+0x52>
 80038b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038b4:	460c      	mov	r4, r1
 80038b6:	2001      	movs	r0, #1
 80038b8:	e7a8      	b.n	800380c <_svfiprintf_r+0xd8>
 80038ba:	2300      	movs	r3, #0
 80038bc:	3401      	adds	r4, #1
 80038be:	9305      	str	r3, [sp, #20]
 80038c0:	4619      	mov	r1, r3
 80038c2:	f04f 0c0a 	mov.w	ip, #10
 80038c6:	4620      	mov	r0, r4
 80038c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038cc:	3a30      	subs	r2, #48	@ 0x30
 80038ce:	2a09      	cmp	r2, #9
 80038d0:	d903      	bls.n	80038da <_svfiprintf_r+0x1a6>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0c6      	beq.n	8003864 <_svfiprintf_r+0x130>
 80038d6:	9105      	str	r1, [sp, #20]
 80038d8:	e7c4      	b.n	8003864 <_svfiprintf_r+0x130>
 80038da:	fb0c 2101 	mla	r1, ip, r1, r2
 80038de:	4604      	mov	r4, r0
 80038e0:	2301      	movs	r3, #1
 80038e2:	e7f0      	b.n	80038c6 <_svfiprintf_r+0x192>
 80038e4:	ab03      	add	r3, sp, #12
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	462a      	mov	r2, r5
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <_svfiprintf_r+0x1f0>)
 80038ec:	a904      	add	r1, sp, #16
 80038ee:	4638      	mov	r0, r7
 80038f0:	f3af 8000 	nop.w
 80038f4:	1c42      	adds	r2, r0, #1
 80038f6:	4606      	mov	r6, r0
 80038f8:	d1d6      	bne.n	80038a8 <_svfiprintf_r+0x174>
 80038fa:	89ab      	ldrh	r3, [r5, #12]
 80038fc:	065b      	lsls	r3, r3, #25
 80038fe:	f53f af2d 	bmi.w	800375c <_svfiprintf_r+0x28>
 8003902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003904:	e72c      	b.n	8003760 <_svfiprintf_r+0x2c>
 8003906:	ab03      	add	r3, sp, #12
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	462a      	mov	r2, r5
 800390c:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <_svfiprintf_r+0x1f0>)
 800390e:	a904      	add	r1, sp, #16
 8003910:	4638      	mov	r0, r7
 8003912:	f000 f879 	bl	8003a08 <_printf_i>
 8003916:	e7ed      	b.n	80038f4 <_svfiprintf_r+0x1c0>
 8003918:	08003e58 	.word	0x08003e58
 800391c:	08003e62 	.word	0x08003e62
 8003920:	00000000 	.word	0x00000000
 8003924:	0800367d 	.word	0x0800367d
 8003928:	08003e5e 	.word	0x08003e5e

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4616      	mov	r6, r2
 8003932:	4698      	mov	r8, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800393c:	4293      	cmp	r3, r2
 800393e:	bfb8      	it	lt
 8003940:	4613      	movlt	r3, r2
 8003942:	6033      	str	r3, [r6, #0]
 8003944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003948:	4607      	mov	r7, r0
 800394a:	460c      	mov	r4, r1
 800394c:	b10a      	cbz	r2, 8003952 <_printf_common+0x26>
 800394e:	3301      	adds	r3, #1
 8003950:	6033      	str	r3, [r6, #0]
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	0699      	lsls	r1, r3, #26
 8003956:	bf42      	ittt	mi
 8003958:	6833      	ldrmi	r3, [r6, #0]
 800395a:	3302      	addmi	r3, #2
 800395c:	6033      	strmi	r3, [r6, #0]
 800395e:	6825      	ldr	r5, [r4, #0]
 8003960:	f015 0506 	ands.w	r5, r5, #6
 8003964:	d106      	bne.n	8003974 <_printf_common+0x48>
 8003966:	f104 0a19 	add.w	sl, r4, #25
 800396a:	68e3      	ldr	r3, [r4, #12]
 800396c:	6832      	ldr	r2, [r6, #0]
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	42ab      	cmp	r3, r5
 8003972:	dc26      	bgt.n	80039c2 <_printf_common+0x96>
 8003974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	3b00      	subs	r3, #0
 800397c:	bf18      	it	ne
 800397e:	2301      	movne	r3, #1
 8003980:	0692      	lsls	r2, r2, #26
 8003982:	d42b      	bmi.n	80039dc <_printf_common+0xb0>
 8003984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003988:	4641      	mov	r1, r8
 800398a:	4638      	mov	r0, r7
 800398c:	47c8      	blx	r9
 800398e:	3001      	adds	r0, #1
 8003990:	d01e      	beq.n	80039d0 <_printf_common+0xa4>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	6922      	ldr	r2, [r4, #16]
 8003996:	f003 0306 	and.w	r3, r3, #6
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf02      	ittt	eq
 800399e:	68e5      	ldreq	r5, [r4, #12]
 80039a0:	6833      	ldreq	r3, [r6, #0]
 80039a2:	1aed      	subeq	r5, r5, r3
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	bf0c      	ite	eq
 80039a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039ac:	2500      	movne	r5, #0
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bfc4      	itt	gt
 80039b2:	1a9b      	subgt	r3, r3, r2
 80039b4:	18ed      	addgt	r5, r5, r3
 80039b6:	2600      	movs	r6, #0
 80039b8:	341a      	adds	r4, #26
 80039ba:	42b5      	cmp	r5, r6
 80039bc:	d11a      	bne.n	80039f4 <_printf_common+0xc8>
 80039be:	2000      	movs	r0, #0
 80039c0:	e008      	b.n	80039d4 <_printf_common+0xa8>
 80039c2:	2301      	movs	r3, #1
 80039c4:	4652      	mov	r2, sl
 80039c6:	4641      	mov	r1, r8
 80039c8:	4638      	mov	r0, r7
 80039ca:	47c8      	blx	r9
 80039cc:	3001      	adds	r0, #1
 80039ce:	d103      	bne.n	80039d8 <_printf_common+0xac>
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d8:	3501      	adds	r5, #1
 80039da:	e7c6      	b.n	800396a <_printf_common+0x3e>
 80039dc:	18e1      	adds	r1, r4, r3
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	2030      	movs	r0, #48	@ 0x30
 80039e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039e6:	4422      	add	r2, r4
 80039e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039f0:	3302      	adds	r3, #2
 80039f2:	e7c7      	b.n	8003984 <_printf_common+0x58>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4622      	mov	r2, r4
 80039f8:	4641      	mov	r1, r8
 80039fa:	4638      	mov	r0, r7
 80039fc:	47c8      	blx	r9
 80039fe:	3001      	adds	r0, #1
 8003a00:	d0e6      	beq.n	80039d0 <_printf_common+0xa4>
 8003a02:	3601      	adds	r6, #1
 8003a04:	e7d9      	b.n	80039ba <_printf_common+0x8e>
	...

08003a08 <_printf_i>:
 8003a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	7e0f      	ldrb	r7, [r1, #24]
 8003a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a10:	2f78      	cmp	r7, #120	@ 0x78
 8003a12:	4691      	mov	r9, r2
 8003a14:	4680      	mov	r8, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	469a      	mov	sl, r3
 8003a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a1e:	d807      	bhi.n	8003a30 <_printf_i+0x28>
 8003a20:	2f62      	cmp	r7, #98	@ 0x62
 8003a22:	d80a      	bhi.n	8003a3a <_printf_i+0x32>
 8003a24:	2f00      	cmp	r7, #0
 8003a26:	f000 80d2 	beq.w	8003bce <_printf_i+0x1c6>
 8003a2a:	2f58      	cmp	r7, #88	@ 0x58
 8003a2c:	f000 80b9 	beq.w	8003ba2 <_printf_i+0x19a>
 8003a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a38:	e03a      	b.n	8003ab0 <_printf_i+0xa8>
 8003a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a3e:	2b15      	cmp	r3, #21
 8003a40:	d8f6      	bhi.n	8003a30 <_printf_i+0x28>
 8003a42:	a101      	add	r1, pc, #4	@ (adr r1, 8003a48 <_printf_i+0x40>)
 8003a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a48:	08003aa1 	.word	0x08003aa1
 8003a4c:	08003ab5 	.word	0x08003ab5
 8003a50:	08003a31 	.word	0x08003a31
 8003a54:	08003a31 	.word	0x08003a31
 8003a58:	08003a31 	.word	0x08003a31
 8003a5c:	08003a31 	.word	0x08003a31
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003a31 	.word	0x08003a31
 8003a68:	08003a31 	.word	0x08003a31
 8003a6c:	08003a31 	.word	0x08003a31
 8003a70:	08003a31 	.word	0x08003a31
 8003a74:	08003bb5 	.word	0x08003bb5
 8003a78:	08003adf 	.word	0x08003adf
 8003a7c:	08003b6f 	.word	0x08003b6f
 8003a80:	08003a31 	.word	0x08003a31
 8003a84:	08003a31 	.word	0x08003a31
 8003a88:	08003bd7 	.word	0x08003bd7
 8003a8c:	08003a31 	.word	0x08003a31
 8003a90:	08003adf 	.word	0x08003adf
 8003a94:	08003a31 	.word	0x08003a31
 8003a98:	08003a31 	.word	0x08003a31
 8003a9c:	08003b77 	.word	0x08003b77
 8003aa0:	6833      	ldr	r3, [r6, #0]
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6032      	str	r2, [r6, #0]
 8003aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e09d      	b.n	8003bf0 <_printf_i+0x1e8>
 8003ab4:	6833      	ldr	r3, [r6, #0]
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	1d19      	adds	r1, r3, #4
 8003aba:	6031      	str	r1, [r6, #0]
 8003abc:	0606      	lsls	r6, r0, #24
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0xbc>
 8003ac0:	681d      	ldr	r5, [r3, #0]
 8003ac2:	e003      	b.n	8003acc <_printf_i+0xc4>
 8003ac4:	0645      	lsls	r5, r0, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0xb8>
 8003ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	da03      	bge.n	8003ad8 <_printf_i+0xd0>
 8003ad0:	232d      	movs	r3, #45	@ 0x2d
 8003ad2:	426d      	negs	r5, r5
 8003ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ad8:	4859      	ldr	r0, [pc, #356]	@ (8003c40 <_printf_i+0x238>)
 8003ada:	230a      	movs	r3, #10
 8003adc:	e011      	b.n	8003b02 <_printf_i+0xfa>
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	6833      	ldr	r3, [r6, #0]
 8003ae2:	0608      	lsls	r0, r1, #24
 8003ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ae8:	d402      	bmi.n	8003af0 <_printf_i+0xe8>
 8003aea:	0649      	lsls	r1, r1, #25
 8003aec:	bf48      	it	mi
 8003aee:	b2ad      	uxthmi	r5, r5
 8003af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003af2:	4853      	ldr	r0, [pc, #332]	@ (8003c40 <_printf_i+0x238>)
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	bf14      	ite	ne
 8003af8:	230a      	movne	r3, #10
 8003afa:	2308      	moveq	r3, #8
 8003afc:	2100      	movs	r1, #0
 8003afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b02:	6866      	ldr	r6, [r4, #4]
 8003b04:	60a6      	str	r6, [r4, #8]
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	bfa2      	ittt	ge
 8003b0a:	6821      	ldrge	r1, [r4, #0]
 8003b0c:	f021 0104 	bicge.w	r1, r1, #4
 8003b10:	6021      	strge	r1, [r4, #0]
 8003b12:	b90d      	cbnz	r5, 8003b18 <_printf_i+0x110>
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	d04b      	beq.n	8003bb0 <_printf_i+0x1a8>
 8003b18:	4616      	mov	r6, r2
 8003b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8003b22:	5dc7      	ldrb	r7, [r0, r7]
 8003b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b28:	462f      	mov	r7, r5
 8003b2a:	42bb      	cmp	r3, r7
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	d9f4      	bls.n	8003b1a <_printf_i+0x112>
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d10b      	bne.n	8003b4c <_printf_i+0x144>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	07df      	lsls	r7, r3, #31
 8003b38:	d508      	bpl.n	8003b4c <_printf_i+0x144>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	6861      	ldr	r1, [r4, #4]
 8003b3e:	4299      	cmp	r1, r3
 8003b40:	bfde      	ittt	le
 8003b42:	2330      	movle	r3, #48	@ 0x30
 8003b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b4c:	1b92      	subs	r2, r2, r6
 8003b4e:	6122      	str	r2, [r4, #16]
 8003b50:	f8cd a000 	str.w	sl, [sp]
 8003b54:	464b      	mov	r3, r9
 8003b56:	aa03      	add	r2, sp, #12
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f7ff fee6 	bl	800392c <_printf_common>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d14a      	bne.n	8003bfa <_printf_i+0x1f2>
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	b004      	add	sp, #16
 8003b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	f043 0320 	orr.w	r3, r3, #32
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	4833      	ldr	r0, [pc, #204]	@ (8003c44 <_printf_i+0x23c>)
 8003b78:	2778      	movs	r7, #120	@ 0x78
 8003b7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	6831      	ldr	r1, [r6, #0]
 8003b82:	061f      	lsls	r7, r3, #24
 8003b84:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b88:	d402      	bmi.n	8003b90 <_printf_i+0x188>
 8003b8a:	065f      	lsls	r7, r3, #25
 8003b8c:	bf48      	it	mi
 8003b8e:	b2ad      	uxthmi	r5, r5
 8003b90:	6031      	str	r1, [r6, #0]
 8003b92:	07d9      	lsls	r1, r3, #31
 8003b94:	bf44      	itt	mi
 8003b96:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9a:	6023      	strmi	r3, [r4, #0]
 8003b9c:	b11d      	cbz	r5, 8003ba6 <_printf_i+0x19e>
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	e7ac      	b.n	8003afc <_printf_i+0xf4>
 8003ba2:	4827      	ldr	r0, [pc, #156]	@ (8003c40 <_printf_i+0x238>)
 8003ba4:	e7e9      	b.n	8003b7a <_printf_i+0x172>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f023 0320 	bic.w	r3, r3, #32
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	e7f6      	b.n	8003b9e <_printf_i+0x196>
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	e7bd      	b.n	8003b30 <_printf_i+0x128>
 8003bb4:	6833      	ldr	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	6961      	ldr	r1, [r4, #20]
 8003bba:	1d18      	adds	r0, r3, #4
 8003bbc:	6030      	str	r0, [r6, #0]
 8003bbe:	062e      	lsls	r6, r5, #24
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	d501      	bpl.n	8003bc8 <_printf_i+0x1c0>
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	e002      	b.n	8003bce <_printf_i+0x1c6>
 8003bc8:	0668      	lsls	r0, r5, #25
 8003bca:	d5fb      	bpl.n	8003bc4 <_printf_i+0x1bc>
 8003bcc:	8019      	strh	r1, [r3, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	4616      	mov	r6, r2
 8003bd4:	e7bc      	b.n	8003b50 <_printf_i+0x148>
 8003bd6:	6833      	ldr	r3, [r6, #0]
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	6032      	str	r2, [r6, #0]
 8003bdc:	681e      	ldr	r6, [r3, #0]
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	2100      	movs	r1, #0
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7fc fb1c 	bl	8000220 <memchr>
 8003be8:	b108      	cbz	r0, 8003bee <_printf_i+0x1e6>
 8003bea:	1b80      	subs	r0, r0, r6
 8003bec:	6060      	str	r0, [r4, #4]
 8003bee:	6863      	ldr	r3, [r4, #4]
 8003bf0:	6123      	str	r3, [r4, #16]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bf8:	e7aa      	b.n	8003b50 <_printf_i+0x148>
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	4632      	mov	r2, r6
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4640      	mov	r0, r8
 8003c02:	47d0      	blx	sl
 8003c04:	3001      	adds	r0, #1
 8003c06:	d0ad      	beq.n	8003b64 <_printf_i+0x15c>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	079b      	lsls	r3, r3, #30
 8003c0c:	d413      	bmi.n	8003c36 <_printf_i+0x22e>
 8003c0e:	68e0      	ldr	r0, [r4, #12]
 8003c10:	9b03      	ldr	r3, [sp, #12]
 8003c12:	4298      	cmp	r0, r3
 8003c14:	bfb8      	it	lt
 8003c16:	4618      	movlt	r0, r3
 8003c18:	e7a6      	b.n	8003b68 <_printf_i+0x160>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4640      	mov	r0, r8
 8003c22:	47d0      	blx	sl
 8003c24:	3001      	adds	r0, #1
 8003c26:	d09d      	beq.n	8003b64 <_printf_i+0x15c>
 8003c28:	3501      	adds	r5, #1
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	9903      	ldr	r1, [sp, #12]
 8003c2e:	1a5b      	subs	r3, r3, r1
 8003c30:	42ab      	cmp	r3, r5
 8003c32:	dcf2      	bgt.n	8003c1a <_printf_i+0x212>
 8003c34:	e7eb      	b.n	8003c0e <_printf_i+0x206>
 8003c36:	2500      	movs	r5, #0
 8003c38:	f104 0619 	add.w	r6, r4, #25
 8003c3c:	e7f5      	b.n	8003c2a <_printf_i+0x222>
 8003c3e:	bf00      	nop
 8003c40:	08003e69 	.word	0x08003e69
 8003c44:	08003e7a 	.word	0x08003e7a

08003c48 <memmove>:
 8003c48:	4288      	cmp	r0, r1
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	eb01 0402 	add.w	r4, r1, r2
 8003c50:	d902      	bls.n	8003c58 <memmove+0x10>
 8003c52:	4284      	cmp	r4, r0
 8003c54:	4623      	mov	r3, r4
 8003c56:	d807      	bhi.n	8003c68 <memmove+0x20>
 8003c58:	1e43      	subs	r3, r0, #1
 8003c5a:	42a1      	cmp	r1, r4
 8003c5c:	d008      	beq.n	8003c70 <memmove+0x28>
 8003c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c66:	e7f8      	b.n	8003c5a <memmove+0x12>
 8003c68:	4402      	add	r2, r0
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	428a      	cmp	r2, r1
 8003c6e:	d100      	bne.n	8003c72 <memmove+0x2a>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c7a:	e7f7      	b.n	8003c6c <memmove+0x24>

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4d06      	ldr	r5, [pc, #24]	@ (8003c98 <_sbrk_r+0x1c>)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fc ffd2 	bl	8000c30 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000228 	.word	0x20000228

08003c9c <memcpy>:
 8003c9c:	440a      	add	r2, r1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ca4:	d100      	bne.n	8003ca8 <memcpy+0xc>
 8003ca6:	4770      	bx	lr
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb2:	4291      	cmp	r1, r2
 8003cb4:	d1f9      	bne.n	8003caa <memcpy+0xe>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_realloc_r>:
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	4615      	mov	r5, r2
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	b921      	cbnz	r1, 8003cce <_realloc_r+0x16>
 8003cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f7ff bc4b 	b.w	8003564 <_malloc_r>
 8003cce:	b92a      	cbnz	r2, 8003cdc <_realloc_r+0x24>
 8003cd0:	f7ff fbdc 	bl	800348c <_free_r>
 8003cd4:	2400      	movs	r4, #0
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cdc:	f000 f81a 	bl	8003d14 <_malloc_usable_size_r>
 8003ce0:	4285      	cmp	r5, r0
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	d802      	bhi.n	8003cec <_realloc_r+0x34>
 8003ce6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003cea:	d8f4      	bhi.n	8003cd6 <_realloc_r+0x1e>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f7ff fc38 	bl	8003564 <_malloc_r>
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d0ec      	beq.n	8003cd4 <_realloc_r+0x1c>
 8003cfa:	42b5      	cmp	r5, r6
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4621      	mov	r1, r4
 8003d00:	bf28      	it	cs
 8003d02:	4632      	movcs	r2, r6
 8003d04:	f7ff ffca 	bl	8003c9c <memcpy>
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f7ff fbbe 	bl	800348c <_free_r>
 8003d10:	463c      	mov	r4, r7
 8003d12:	e7e0      	b.n	8003cd6 <_realloc_r+0x1e>

08003d14 <_malloc_usable_size_r>:
 8003d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d18:	1f18      	subs	r0, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfbc      	itt	lt
 8003d1e:	580b      	ldrlt	r3, [r1, r0]
 8003d20:	18c0      	addlt	r0, r0, r3
 8003d22:	4770      	bx	lr

08003d24 <_init>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr

08003d30 <_fini>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr
