
I2C_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f9c  08004f9c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f9c  08004f9c  00005f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fa4  08004fa4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa4  08004fa4  00005fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fa8  08004fa8  00005fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004fac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08005008  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005008  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b84e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0d  00000000  00000000  000118da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000134e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ef  00000000  00000000  00013f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a8c  00000000  00000000  000146f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4ca  00000000  00000000  00036183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafd5  00000000  00000000  0004464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f34  00000000  00000000  0010f668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  0011259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004eec 	.word	0x08004eec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004eec 	.word	0x08004eec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:

#include "main_1.h"

void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fc00 	bl	8000db8 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 80005b8:	f000 fd70 	bl	800109c <HAL_SYSTICK_Callback>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <I2C1_EV_IRQHandler+0x10>)
 80005c6:	f001 f931 	bl	800182c <HAL_I2C_EV_IRQHandler>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c0 	.word	0x200000c0

080005d4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(&hi2c);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <I2C1_ER_IRQHandler+0x10>)
 80005da:	f001 fa7a 	bl	8001ad2 <HAL_I2C_ER_IRQHandler>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c0 	.word	0x200000c0

080005e8 <main>:
uint8_t i2c_buffer[1];
volatile uint8_t i2c_busy = 0; // Flag to check if I2C is busy


int main()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	HAL_Init();
 80005ec:	f000 fb92 	bl	8000d14 <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_84_MHZ);
 80005f0:	2054      	movs	r0, #84	@ 0x54
 80005f2:	f000 f891 	bl	8000718 <SystemClockConfig>

	UART_init();
 80005f6:	f000 f83b 	bl	8000670 <UART_init>

	I2C_Init();
 80005fa:	f000 f85f 	bl	80006bc <I2C_Init>
	//send_msg("I2C Initialization Successful\r\n");

    LCD_Init(); // Initialize LCD
 80005fe:	f000 f921 	bl	8000844 <LCD_Init>
	//send_msg("LCD Initialization Successful\r\n");
//    LCD_SetCursor(0, 0); // Set cursor to first row, first column
    LCD_Print("Welcome......!");
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <main+0x30>)
 8000604:	f000 f9e8 	bl	80009d8 <LCD_Print>
    LCD_Clear(LCD_CLR_SCREEN);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fa4b 	bl	8000aa4 <LCD_Clear>
    Print_num(15);
 800060e:	200f      	movs	r0, #15
 8000610:	f000 f804 	bl	800061c <Print_num>

	while(1);
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x2c>
 8000618:	08004f04 	.word	0x08004f04

0800061c <Print_num>:

	return 0;
}

void Print_num(uint8_t num) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
    char buffer[15];  // Buffer to hold the string representation of the number (enough for "255" + null terminator)
    uint8_t i;

    for (i = 0; i < num; i++) {
 8000626:	2300      	movs	r3, #0
 8000628:	75fb      	strb	r3, [r7, #23]
 800062a:	e015      	b.n	8000658 <Print_num+0x3c>
        // Convert the number to a string
        snprintf(buffer, sizeof(buffer), "%u", i);
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	f107 0008 	add.w	r0, r7, #8
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <Print_num+0x50>)
 8000634:	210f      	movs	r1, #15
 8000636:	f003 ffad 	bl	8004594 <sniprintf>

        // Print the string to the LCD
        LCD_Print(buffer);
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f9ca 	bl	80009d8 <LCD_Print>

        // Optional: Add a delay to observe the number before clearing
        HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000648:	f000 fbd6 	bl	8000df8 <HAL_Delay>

        // Clear the LCD screen
        LCD_Clear(LCD_CLR_SCREEN);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fa29 	bl	8000aa4 <LCD_Clear>
    for (i = 0; i < num; i++) {
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	3301      	adds	r3, #1
 8000656:	75fb      	strb	r3, [r7, #23]
 8000658:	7dfa      	ldrb	r2, [r7, #23]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3e5      	bcc.n	800062c <Print_num+0x10>
    }
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	08004f14 	.word	0x08004f14

08000670 <UART_init>:


void UART_init()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	huart.Instance = USART2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <UART_init+0x44>)
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <UART_init+0x48>)
 8000678:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <UART_init+0x44>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <UART_init+0x44>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <UART_init+0x44>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <UART_init+0x44>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <UART_init+0x44>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <UART_init+0x44>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]

	if((HAL_UART_Init(&huart)) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <UART_init+0x44>)
 80006a2:	f003 fb6b 	bl	8003d7c <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <UART_init+0x40>
	{
		error_handler();
 80006ac:	f000 f9f0 	bl	8000a90 <error_handler>
	}
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000078 	.word	0x20000078
 80006b8:	40004400 	.word	0x40004400

080006bc <I2C_Init>:

void I2C_Init(void)
	{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
		hi2c.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <I2C_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <I2C_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
	    hi2c.Init.ClockSpeed = 100000;              // 100 kHz standard mode
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <I2C_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <I2C_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
	    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;     // Standard duty cycle
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <I2C_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	    hi2c.Init.OwnAddress1 = 0;                 // Not used in master mode
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <I2C_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
	    hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <I2C_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006de:	611a      	str	r2, [r3, #16]
	    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <I2C_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
	    hi2c.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <I2C_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
	    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <I2C_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
	    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <I2C_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

	    if (HAL_I2C_Init(&hi2c) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <I2C_Init+0x50>)
 80006fa:	f000 fe9b 	bl	8001434 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <I2C_Init+0x4c>
	    {
	        error_handler();
 8000704:	f000 f9c4 	bl	8000a90 <error_handler>
	    }
	}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000c0 	.word	0x200000c0
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <SystemClockConfig>:



void SystemClockConfig(uint8_t clk_freq)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	@ 0x58
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 8000722:	2300      	movs	r3, #0
 8000724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_BYPASS;
 800072c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24

	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clk_freq)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b78      	cmp	r3, #120	@ 0x78
 8000740:	d03a      	beq.n	80007b8 <SystemClockConfig+0xa0>
 8000742:	2b78      	cmp	r3, #120	@ 0x78
 8000744:	dc77      	bgt.n	8000836 <SystemClockConfig+0x11e>
 8000746:	2b32      	cmp	r3, #50	@ 0x32
 8000748:	d002      	beq.n	8000750 <SystemClockConfig+0x38>
 800074a:	2b54      	cmp	r3, #84	@ 0x54
 800074c:	d01a      	beq.n	8000784 <SystemClockConfig+0x6c>

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
 800074e:	e072      	b.n	8000836 <SystemClockConfig+0x11e>
		osc_init.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 100;
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077a:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_1WS;
 800077c:	2301      	movs	r3, #1
 800077e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000782:	e033      	b.n	80007ec <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 160;
 8000788:	23a0      	movs	r3, #160	@ 0xa0
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a8:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_2WS;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 80007b6:	e019      	b.n	80007ec <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 240;
 80007bc:	23f0      	movs	r3, #240	@ 0xf0
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_3WS;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 80007ea:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 f825 	bl	8003840 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClockConfig+0xe8>
		{
			error_handler();
 80007fc:	f000 f948 	bl	8000a90 <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8000800:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fcce 	bl	80031ac <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClockConfig+0x102>
		{
			error_handler();
 8000816:	f000 f93b 	bl	8000a90 <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 800081a:	f002 fde1 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800081e:	4603      	mov	r3, r0
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <SystemClockConfig+0x128>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	099b      	lsrs	r3, r3, #6
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fc0e 	bl	800104a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800082e:	2004      	movs	r0, #4
 8000830:	f000 fc18 	bl	8001064 <HAL_SYSTICK_CLKSourceConfig>
 8000834:	e000      	b.n	8000838 <SystemClockConfig+0x120>
		return;
 8000836:	bf00      	nop
}
 8000838:	3758      	adds	r7, #88	@ 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	10624dd3 	.word	0x10624dd3

08000844 <LCD_Init>:


void LCD_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for LCD to power up
 8000848:	2032      	movs	r0, #50	@ 0x32
 800084a:	f000 fad5 	bl	8000df8 <HAL_Delay>

    // Initialization sequence
    LCD_Send(0x03, 0); // Function set (8-bit mode)
 800084e:	2100      	movs	r1, #0
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f847 	bl	80008e4 <LCD_Send>
    HAL_Delay(5);      // Wait >4.1ms
 8000856:	2005      	movs	r0, #5
 8000858:	f000 face 	bl	8000df8 <HAL_Delay>
    LCD_Send(0x03, 0); // Repeat
 800085c:	2100      	movs	r1, #0
 800085e:	2003      	movs	r0, #3
 8000860:	f000 f840 	bl	80008e4 <LCD_Send>
    HAL_Delay(1);      // Wait >100us
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fac7 	bl	8000df8 <HAL_Delay>
    LCD_Send(0x03, 0); // Repeat
 800086a:	2100      	movs	r1, #0
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f839 	bl	80008e4 <LCD_Send>
    LCD_Send(0x02, 0); // Set 4-bit mode
 8000872:	2100      	movs	r1, #0
 8000874:	2002      	movs	r0, #2
 8000876:	f000 f835 	bl	80008e4 <LCD_Send>
	send_msg("LCD Initialization\r\n");
 800087a:	480a      	ldr	r0, [pc, #40]	@ (80008a4 <LCD_Init+0x60>)
 800087c:	f000 f8f2 	bl	8000a64 <send_msg>

    // Configure LCD
    LCD_Command(LCD_FUNCTION_SET);  // 4-bit mode, 2-line display
 8000880:	2028      	movs	r0, #40	@ 0x28
 8000882:	f000 f813 	bl	80008ac <LCD_Command>
    LCD_Command(LCD_DISPLAY_ON);    // Display ON, Cursor OFF
 8000886:	200c      	movs	r0, #12
 8000888:	f000 f810 	bl	80008ac <LCD_Command>
    LCD_Command(LCD_CLEAR);         // Clear display
 800088c:	2001      	movs	r0, #1
 800088e:	f000 f80d 	bl	80008ac <LCD_Command>
    LCD_Command(LCD_ENTRY_MODE);    // Increment cursor, no shift
 8000892:	2006      	movs	r0, #6
 8000894:	f000 f80a 	bl	80008ac <LCD_Command>
    send_msg("LCD Configuration\r\n");
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <LCD_Init+0x64>)
 800089a:	f000 f8e3 	bl	8000a64 <send_msg>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08004f18 	.word	0x08004f18
 80008a8:	08004f30 	.word	0x08004f30

080008ac <LCD_Command>:

void LCD_Command(uint8_t cmd) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0); // Send as command (RS = 0)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f812 	bl	80008e4 <LCD_Send>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <LCD_Data>:

void LCD_Data(uint8_t data) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_RS); // Send as data (RS = 1)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2101      	movs	r1, #1
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f804 	bl	80008e4 <LCD_Send>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LCD_Send>:


/* Send Data/Command with Mode (RS) */
void LCD_Send(uint8_t value, uint8_t mode) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
    uint8_t upper_nibble = (value & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	f023 030f 	bic.w	r3, r3, #15
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000902:	4313      	orrs	r3, r2
 8000904:	b25b      	sxtb	r3, r3
 8000906:	f043 030c 	orr.w	r3, r3, #12
 800090a:	b25b      	sxtb	r3, r3
 800090c:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((value << 4) & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	b25a      	sxtb	r2, r3
 8000914:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000918:	4313      	orrs	r3, r2
 800091a:	b25b      	sxtb	r3, r3
 800091c:	f043 030c 	orr.w	r3, r3, #12
 8000920:	b25b      	sxtb	r3, r3
 8000922:	73bb      	strb	r3, [r7, #14]

//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }
    // Send upper nibble
    i2c_busy = 1;
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <LCD_Send+0xe8>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = upper_nibble;
 800092a:	4a29      	ldr	r2, [pc, #164]	@ (80009d0 <LCD_Send+0xec>)
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8000930:	2301      	movs	r3, #1
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <LCD_Send+0xec>)
 8000934:	214e      	movs	r1, #78	@ 0x4e
 8000936:	4827      	ldr	r0, [pc, #156]	@ (80009d4 <LCD_Send+0xf0>)
 8000938:	f000 fed6 	bl	80016e8 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 800093c:	bf00      	nop
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <LCD_Send+0xe8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1fa      	bne.n	800093e <LCD_Send+0x5a>
//    send_msg("Upper nibble 1\r\n");
//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }

    i2c_busy = 1;
 8000948:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <LCD_Send+0xe8>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = upper_nibble & ~LCD_EN;
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	f023 0304 	bic.w	r3, r3, #4
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <LCD_Send+0xec>)
 8000958:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 800095a:	2301      	movs	r3, #1
 800095c:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <LCD_Send+0xec>)
 800095e:	214e      	movs	r1, #78	@ 0x4e
 8000960:	481c      	ldr	r0, [pc, #112]	@ (80009d4 <LCD_Send+0xf0>)
 8000962:	f000 fec1 	bl	80016e8 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 8000966:	bf00      	nop
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <LCD_Send+0xe8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1fa      	bne.n	8000968 <LCD_Send+0x84>
//    send_msg("Upper nibble 2\r\n");

    // Send lower nibble
    i2c_busy = 1;
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <LCD_Send+0xe8>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = lower_nibble;
 8000978:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <LCD_Send+0xec>)
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 800097e:	2301      	movs	r3, #1
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <LCD_Send+0xec>)
 8000982:	214e      	movs	r1, #78	@ 0x4e
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <LCD_Send+0xf0>)
 8000986:	f000 feaf 	bl	80016e8 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 800098a:	bf00      	nop
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <LCD_Send+0xe8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1fa      	bne.n	800098c <LCD_Send+0xa8>

    i2c_busy = 1;
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <LCD_Send+0xe8>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = lower_nibble & ~LCD_EN;
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	f023 0304 	bic.w	r3, r3, #4
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <LCD_Send+0xec>)
 80009a6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 80009a8:	2301      	movs	r3, #1
 80009aa:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <LCD_Send+0xec>)
 80009ac:	214e      	movs	r1, #78	@ 0x4e
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <LCD_Send+0xf0>)
 80009b0:	f000 fe9a 	bl	80016e8 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 80009b4:	bf00      	nop
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <LCD_Send+0xe8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1fa      	bne.n	80009b6 <LCD_Send+0xd2>
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000115 	.word	0x20000115
 80009d0:	20000114 	.word	0x20000114
 80009d4:	200000c0 	.word	0x200000c0

080009d8 <LCD_Print>:

void LCD_Print(char *str) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    while (*str) {
 80009e0:	e006      	b.n	80009f0 <LCD_Print+0x18>
        LCD_Data((uint8_t)*str++);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff6c 	bl	80008c8 <LCD_Data>
    while (*str) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f4      	bne.n	80009e2 <LCD_Print+0xa>
    }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_I2C_MasterTxCpltCallback>:
    uint8_t addr = (row == 0) ? col : (0x40 + col);
    LCD_Command(LCD_SET_DDRAM_ADDR | addr);
}

/* I2C Transmission Complete Callback */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    if (hi2c1->Instance == hi2c.Instance) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d102      	bne.n	8000a1e <HAL_I2C_MasterTxCpltCallback+0x1a>
        i2c_busy = 0; // Clear busy flag
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
//        send_msg("i2c Callback\r\n");
    }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000c0 	.word	0x200000c0
 8000a30:	20000115 	.word	0x20000115

08000a34 <HAL_I2C_ErrorCallback>:

/* I2C Error Callback */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c1) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
//	send_msg("I2C Error Call\r\n");
    if (hi2c1->Instance == hi2c.Instance) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_I2C_ErrorCallback+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d102      	bne.n	8000a4e <HAL_I2C_ErrorCallback+0x1a>
        i2c_busy = 0; // Clear busy flag
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_I2C_ErrorCallback+0x2c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
        // Optional: Add error recovery logic here
    }
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	200000c0 	.word	0x200000c0
 8000a60:	20000115 	.word	0x20000115

08000a64 <send_msg>:

void send_msg(char msg[])
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fbcf 	bl	8000210 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <send_msg+0x28>)
 8000a7e:	f003 f9cd 	bl	8003e1c <HAL_UART_Transmit>
  //  char line[3];
   // sprintf(line,"\r\n");
   // HAL_UART_Transmit(&huart, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000078 	.word	0x20000078

08000a90 <error_handler>:

void error_handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	send_msg("Failed\r\n");
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <error_handler+0x10>)
 8000a96:	f7ff ffe5 	bl	8000a64 <send_msg>
	while(1);
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <error_handler+0xa>
 8000a9e:	bf00      	nop
 8000aa0:	08004f44 	.word	0x08004f44

08000aa4 <LCD_Clear>:
}

void LCD_Clear(uint8_t cmd) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);  // 0x01 is the clear screen command
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff16 	bl	80008e4 <LCD_Send>
    HAL_Delay(2);       // Wait for 2ms to ensure the command is processed
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 f99d 	bl	8000df8 <HAL_Delay>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_MspInit>:
#include "main_1.h"

void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 fa87 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x40>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <HAL_MspInit+0x40>)
 8000ad8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000adc:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f06f 000b 	mvn.w	r0, #11
 8000ae6:	f000 fa86 	bl	8000ff6 <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	f06f 000a 	mvn.w	r0, #10
 8000af2:	f000 fa80 	bl	8000ff6 <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	f06f 0009 	mvn.w	r0, #9
 8000afe:	f000 fa7a 	bl	8000ff6 <HAL_NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	/*Implementing Low level init's of USART2 peripheral*/
	//1. Enable the clock for the UART2 peripheral
		__HAL_RCC_USART2_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a16      	ldr	r2, [pc, #88]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
	//2. Pin muxing configurations
		gpio_uart.Pin = GPIO_PIN_2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
		gpio_uart.Alternate = GPIO_AF7_USART2;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
		gpio_uart.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b68:	f000 fad0 	bl	800110c <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b78:	f000 fac8 	bl	800110c <HAL_GPIO_Init>
	//3. Enable the IRQ and set-up the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7c:	2026      	movs	r0, #38	@ 0x26
 8000b7e:	f000 fa56 	bl	800102e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	2026      	movs	r0, #38	@ 0x26
 8000b88:	f000 fa35 	bl	8000ff6 <HAL_NVIC_SetPriority>
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_i2c;

    //if (hi2c->Instance == I2C1)
    //{
        // 1. Enable I2C clock
        __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

        // 2. Configure I2C SCL and SDA pins (e.g., PB6 for SCL, PB7 for SDA)
        gpio_i2c.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000bdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be0:	617b      	str	r3, [r7, #20]
        gpio_i2c.Mode = GPIO_MODE_AF_OD;       // Open-drain for I2C
 8000be2:	2312      	movs	r3, #18
 8000be4:	61bb      	str	r3, [r7, #24]
        gpio_i2c.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
        gpio_i2c.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
        gpio_i2c.Alternate = GPIO_AF4_I2C1;    // Alternate function for I2C1
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &gpio_i2c);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <HAL_I2C_MspInit+0x90>)
 8000bfa:	f000 fa87 	bl	800110c <HAL_GPIO_Init>

        // 3. Enable and configure NVIC for I2C interrupts (optional for interrupts)
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	201f      	movs	r0, #31
 8000c04:	f000 f9f7 	bl	8000ff6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c08:	201f      	movs	r0, #31
 8000c0a:	f000 fa10 	bl	800102e <HAL_NVIC_EnableIRQ>

        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 15, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	2020      	movs	r0, #32
 8000c14:	f000 f9ef 	bl	8000ff6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c18:	2020      	movs	r0, #32
 8000c1a:	f000 fa08 	bl	800102e <HAL_NVIC_EnableIRQ>
    //}
}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f003 fccc 	bl	80045fc <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000118 	.word	0x20000118
 8000c98:	20000268 	.word	0x20000268

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f003 fc8b 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc79 	bl	80005e8 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d04:	08004fac 	.word	0x08004fac
  ldr r2, =_sbss
 8000d08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d0c:	20000268 	.word	0x20000268

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff febe 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	2000011c 	.word	0x2000011c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000011c 	.word	0x2000011c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d106      	bne.n	8001080 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800107e:	e005      	b.n	800108c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001086:	f023 0304 	bic.w	r3, r3, #4
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d004      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2280      	movs	r2, #128	@ 0x80
 80010c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e00c      	b.n	80010e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2205      	movs	r2, #5
 80010cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e165      	b.n	80013f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8154 	bne.w	80013ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80ae 	beq.w	80013ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <HAL_GPIO_Init+0x300>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a5c      	ldr	r2, [pc, #368]	@ (800140c <HAL_GPIO_Init+0x300>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b5a      	ldr	r3, [pc, #360]	@ (800140c <HAL_GPIO_Init+0x300>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a58      	ldr	r2, [pc, #352]	@ (8001410 <HAL_GPIO_Init+0x304>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001414 <HAL_GPIO_Init+0x308>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001418 <HAL_GPIO_Init+0x30c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	@ (800141c <HAL_GPIO_Init+0x310>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001420 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001424 <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x20a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001428 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x206>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	@ (800142c <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x202>
 800130a:	2306      	movs	r3, #6
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800130e:	2307      	movs	r3, #7
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	@ (8001410 <HAL_GPIO_Init+0x304>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <HAL_GPIO_Init+0x324>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a31      	ldr	r2, [pc, #196]	@ (8001430 <HAL_GPIO_Init+0x324>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <HAL_GPIO_Init+0x324>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <HAL_GPIO_Init+0x324>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <HAL_GPIO_Init+0x324>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1c      	ldr	r2, [pc, #112]	@ (8001430 <HAL_GPIO_Init+0x324>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_GPIO_Init+0x324>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <HAL_GPIO_Init+0x324>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae96 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e12b      	b.n	800169e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fb9e 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001498:	f001 ff7a 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a81      	ldr	r2, [pc, #516]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d807      	bhi.n	80014b8 <HAL_I2C_Init+0x84>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a80      	ldr	r2, [pc, #512]	@ (80016ac <HAL_I2C_Init+0x278>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf94      	ite	ls
 80014b0:	2301      	movls	r3, #1
 80014b2:	2300      	movhi	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e006      	b.n	80014c6 <HAL_I2C_Init+0x92>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a7d      	ldr	r2, [pc, #500]	@ (80016b0 <HAL_I2C_Init+0x27c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	bf94      	ite	ls
 80014c0:	2301      	movls	r3, #1
 80014c2:	2300      	movhi	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0e7      	b.n	800169e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a78      	ldr	r2, [pc, #480]	@ (80016b4 <HAL_I2C_Init+0x280>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d802      	bhi.n	8001508 <HAL_I2C_Init+0xd4>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	e009      	b.n	800151c <HAL_I2C_Init+0xe8>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a69      	ldr	r2, [pc, #420]	@ (80016b8 <HAL_I2C_Init+0x284>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	3301      	adds	r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800152e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	495c      	ldr	r1, [pc, #368]	@ (80016a8 <HAL_I2C_Init+0x274>)
 8001538:	428b      	cmp	r3, r1
 800153a:	d819      	bhi.n	8001570 <HAL_I2C_Init+0x13c>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e59      	subs	r1, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fbb1 f3f3 	udiv	r3, r1, r3
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001550:	400b      	ands	r3, r1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00a      	beq.n	800156c <HAL_I2C_Init+0x138>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e59      	subs	r1, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fbb1 f3f3 	udiv	r3, r1, r3
 8001564:	3301      	adds	r3, #1
 8001566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156a:	e051      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 800156c:	2304      	movs	r3, #4
 800156e:	e04f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_I2C_Init+0x168>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e012      	b.n	80015c2 <HAL_I2C_Init+0x18e>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Init+0x196>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e022      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10e      	bne.n	80015f0 <HAL_I2C_Init+0x1bc>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e58      	subs	r0, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ee:	e00f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800163e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6911      	ldr	r1, [r2, #16]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	000186a0 	.word	0x000186a0
 80016ac:	001e847f 	.word	0x001e847f
 80016b0:	003d08ff 	.word	0x003d08ff
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ce:	2b80      	cmp	r3, #128	@ 0x80
 80016d0:	d103      	bne.n	80016da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	817b      	strh	r3, [r7, #10]
 80016f8:	4613      	mov	r3, r2
 80016fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b20      	cmp	r3, #32
 800170a:	f040 8081 	bne.w	8001810 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <HAL_I2C_Master_Transmit_IT+0x138>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0a1a      	lsrs	r2, r3, #8
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3b01      	subs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	e05b      	b.n	8001812 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b02      	cmp	r3, #2
 8001766:	d0df      	beq.n	8001728 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_I2C_Master_Transmit_IT+0x8e>
 8001772:	2302      	movs	r3, #2
 8001774:	e04d      	b.n	8001812 <HAL_I2C_Master_Transmit_IT+0x12a>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d007      	beq.n	800179c <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2221      	movs	r2, #33	@ 0x21
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2210      	movs	r2, #16
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	893a      	ldrh	r2, [r7, #8]
 80017cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_I2C_Master_Transmit_IT+0x140>)
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80017de:	897a      	ldrh	r2, [r7, #10]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80017fa:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800180a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000
 8001824:	14f8b589 	.word	0x14f8b589
 8001828:	ffff0000 	.word	0xffff0000

0800182c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800184c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001854:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d003      	beq.n	8001864 <HAL_I2C_EV_IRQHandler+0x38>
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b40      	cmp	r3, #64	@ 0x40
 8001860:	f040 80b1 	bne.w	80019c6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_I2C_EV_IRQHandler+0x6e>
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001884:	d003      	beq.n	800188e <HAL_I2C_EV_IRQHandler+0x62>
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800188c:	d101      	bne.n	8001892 <HAL_I2C_EV_IRQHandler+0x66>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_I2C_EV_IRQHandler+0x68>
 8001892:	2300      	movs	r3, #0
 8001894:	2b01      	cmp	r3, #1
 8001896:	f000 8114 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00b      	beq.n	80018bc <HAL_I2C_EV_IRQHandler+0x90>
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f001 fc60 	bl	8003174 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fd66 	bl	8002386 <I2C_Master_SB>
 80018ba:	e083      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0xac>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fdde 	bl	8002492 <I2C_Master_ADD10>
 80018d6:	e075      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_I2C_EV_IRQHandler+0xc8>
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fdfa 	bl	80024e6 <I2C_Master_ADDR>
 80018f2:	e067      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d036      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800190c:	f000 80db 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <HAL_I2C_EV_IRQHandler+0x10a>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_I2C_EV_IRQHandler+0x10a>
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f9c2 	bl	8001cb8 <I2C_MasterTransmit_TXE>
 8001934:	e046      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80c2 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80bc 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	2b21      	cmp	r3, #33	@ 0x21
 8001952:	d103      	bne.n	800195c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fa4b 	bl	8001df0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800195a:	e0b4      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	f040 80b1 	bne.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fab9 	bl	8001edc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800196a:	e0ac      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800197a:	f000 80a4 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x178>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x178>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fb35 	bl	800200c <I2C_MasterReceive_RXNE>
 80019a2:	e00f      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 808b 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8085 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fbed 	bl	800219c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c2:	e080      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
 80019c4:	e07f      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e007      	b.n	80019e8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d011      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0x1ea>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 ffb8 	bl	8002984 <I2C_Slave_ADDR>
 8001a14:	e05a      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0x206>
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fff2 	bl	8002a14 <I2C_Slave_STOPF>
 8001a30:	e04c      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a32:	7bbb      	ldrb	r3, [r7, #14]
 8001a34:	2b21      	cmp	r3, #33	@ 0x21
 8001a36:	d002      	beq.n	8001a3e <HAL_I2C_EV_IRQHandler+0x212>
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	2b29      	cmp	r3, #41	@ 0x29
 8001a3c:	d120      	bne.n	8001a80 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <HAL_I2C_EV_IRQHandler+0x238>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_I2C_EV_IRQHandler+0x238>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fed3 	bl	8002808 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a62:	e032      	b.n	8001aca <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02d      	beq.n	8001aca <HAL_I2C_EV_IRQHandler+0x29e>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d028      	beq.n	8001aca <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 ff02 	bl	8002882 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a7e:	e024      	b.n	8001aca <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00d      	beq.n	8001aa6 <HAL_I2C_EV_IRQHandler+0x27a>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_I2C_EV_IRQHandler+0x27a>
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 ff10 	bl	80028c4 <I2C_SlaveReceive_RXNE>
 8001aa4:	e012      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00d      	beq.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 ff40 	bl	8002940 <I2C_SlaveReceive_BTF>
 8001ac0:	e004      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001ac2:	bf00      	nop
 8001ac4:	e002      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	@ 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001af4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_I2C_ER_IRQHandler+0x4a>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b1a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <HAL_I2C_ER_IRQHandler+0x70>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001b40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03e      	beq.n	8001bca <HAL_I2C_ER_IRQHandler+0xf8>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d039      	beq.n	8001bca <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001b56:	7efb      	ldrb	r3, [r7, #27]
 8001b58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b70:	7ebb      	ldrb	r3, [r7, #26]
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d112      	bne.n	8001b9c <HAL_I2C_ER_IRQHandler+0xca>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10f      	bne.n	8001b9c <HAL_I2C_ER_IRQHandler+0xca>
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	2b21      	cmp	r3, #33	@ 0x21
 8001b80:	d008      	beq.n	8001b94 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b82:	7cfb      	ldrb	r3, [r7, #19]
 8001b84:	2b29      	cmp	r3, #41	@ 0x29
 8001b86:	d005      	beq.n	8001b94 <HAL_I2C_ER_IRQHandler+0xc2>
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	2b28      	cmp	r3, #40	@ 0x28
 8001b8c:	d106      	bne.n	8001b9c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b21      	cmp	r3, #33	@ 0x21
 8001b92:	d103      	bne.n	8001b9c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f001 f86d 	bl	8002c74 <I2C_Slave_AF>
 8001b9a:	e016      	b.n	8001bca <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ba4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bae:	7efb      	ldrb	r3, [r7, #27]
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d002      	beq.n	8001bba <HAL_I2C_ER_IRQHandler+0xe8>
 8001bb4:	7efb      	ldrb	r3, [r7, #27]
 8001bb6:	2b40      	cmp	r3, #64	@ 0x40
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_I2C_ER_IRQHandler+0x11e>
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001bee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f001 f8aa 	bl	8002d5c <I2C_ITError>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	@ 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d150      	bne.n	8001d80 <I2C_MasterTransmit_TXE+0xc8>
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b21      	cmp	r3, #33	@ 0x21
 8001ce2:	d14d      	bne.n	8001d80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d01d      	beq.n	8001d26 <I2C_MasterTransmit_TXE+0x6e>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d01a      	beq.n	8001d26 <I2C_MasterTransmit_TXE+0x6e>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cf6:	d016      	beq.n	8001d26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2211      	movs	r2, #17
 8001d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fe70 	bl	8000a04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d24:	e060      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b40      	cmp	r3, #64	@ 0x40
 8001d5e:	d107      	bne.n	8001d70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff87 	bl	8001c7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d6e:	e03b      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fe43 	bl	8000a04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d7e:	e033      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b21      	cmp	r3, #33	@ 0x21
 8001d84:	d005      	beq.n	8001d92 <I2C_MasterTransmit_TXE+0xda>
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	2b40      	cmp	r3, #64	@ 0x40
 8001d8a:	d12d      	bne.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b22      	cmp	r3, #34	@ 0x22
 8001d90:	d12a      	bne.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d108      	bne.n	8001dae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001daa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001dac:	e01c      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d103      	bne.n	8001dc2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f88e 	bl	8001edc <I2C_MemoryTransmit_TXE_BTF>
}
 8001dc0:	e012      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001de6:	e7ff      	b.n	8001de8 <I2C_MasterTransmit_TXE+0x130>
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b21      	cmp	r3, #33	@ 0x21
 8001e08:	d164      	bne.n	8001ed4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e38:	e04c      	b.n	8001ed4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d01d      	beq.n	8001e7c <I2C_MasterTransmit_BTF+0x8c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d01a      	beq.n	8001e7c <I2C_MasterTransmit_BTF+0x8c>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e4c:	d016      	beq.n	8001e7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2211      	movs	r2, #17
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fdc5 	bl	8000a04 <HAL_I2C_MasterTxCpltCallback>
}
 8001e7a:	e02b      	b.n	8001ed4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b40      	cmp	r3, #64	@ 0x40
 8001eb4:	d107      	bne.n	8001ec6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fedc 	bl	8001c7c <HAL_I2C_MemTxCpltCallback>
}
 8001ec4:	e006      	b.n	8001ed4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fd98 	bl	8000a04 <HAL_I2C_MasterTxCpltCallback>
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11d      	bne.n	8001f30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10b      	bne.n	8001f14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0c:	1c9a      	adds	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001f12:	e077      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	121b      	asrs	r3, r3, #8
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f2e:	e069      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10b      	bne.n	8001f50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f4e:	e059      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d152      	bne.n	8001ffe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b22      	cmp	r3, #34	@ 0x22
 8001f5c:	d10d      	bne.n	8001f7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f78:	e044      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b21      	cmp	r3, #33	@ 0x21
 8001f88:	d112      	bne.n	8001fb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fae:	e029      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d124      	bne.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b21      	cmp	r3, #33	@ 0x21
 8001fbe:	d121      	bne.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001fce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fe40 	bl	8001c7c <HAL_I2C_MemTxCpltCallback>
}
 8001ffc:	e002      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fb5c 	bl	80016bc <I2C_Flush_DR>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b22      	cmp	r3, #34	@ 0x22
 800201e:	f040 80b9 	bne.w	8002194 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d921      	bls.n	800207a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b03      	cmp	r3, #3
 8002064:	f040 8096 	bne.w	8002194 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002076:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002078:	e08c      	b.n	8002194 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	2b02      	cmp	r3, #2
 8002080:	d07f      	beq.n	8002182 <I2C_MasterReceive_RXNE+0x176>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d002      	beq.n	800208e <I2C_MasterReceive_RXNE+0x82>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d179      	bne.n	8002182 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 f83e 	bl	8003110 <I2C_WaitOnSTOPRequestThroughIT>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d14c      	bne.n	8002134 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b40      	cmp	r3, #64	@ 0x40
 80020f2:	d10a      	bne.n	800210a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fdc4 	bl	8001c90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002108:	e044      	b.n	8002194 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d002      	beq.n	800211e <I2C_MasterReceive_RXNE+0x112>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b20      	cmp	r3, #32
 800211c:	d103      	bne.n	8002126 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
 8002124:	e002      	b.n	800212c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2212      	movs	r2, #18
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fd6f 	bl	8001c10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002132:	e02f      	b.n	8002194 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002142:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fc5a 	bl	8000a34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002180:	e008      	b.n	8002194 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002190:	605a      	str	r2, [r3, #4]
}
 8002192:	e7ff      	b.n	8002194 <I2C_MasterReceive_RXNE+0x188>
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021ea:	e0c8      	b.n	800237e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d129      	bne.n	800224a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002204:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00a      	beq.n	8002222 <I2C_MasterReceive_BTF+0x86>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d007      	beq.n	8002222 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002220:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002248:	e099      	b.n	800237e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	f040 8081 	bne.w	8002358 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d002      	beq.n	8002262 <I2C_MasterReceive_BTF+0xc6>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d108      	bne.n	8002274 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e019      	b.n	80022a8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d002      	beq.n	8002280 <I2C_MasterReceive_BTF+0xe4>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d108      	bne.n	8002292 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e00a      	b.n	80022a8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d007      	beq.n	80022a8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002302:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b40      	cmp	r3, #64	@ 0x40
 8002316:	d10a      	bne.n	800232e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fcb2 	bl	8001c90 <HAL_I2C_MemRxCpltCallback>
}
 800232c:	e027      	b.n	800237e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d002      	beq.n	8002342 <I2C_MasterReceive_BTF+0x1a6>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b20      	cmp	r3, #32
 8002340:	d103      	bne.n	800234a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
 8002348:	e002      	b.n	8002350 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2212      	movs	r2, #18
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fc5d 	bl	8001c10 <HAL_I2C_MasterRxCpltCallback>
}
 8002356:	e012      	b.n	800237e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b40      	cmp	r3, #64	@ 0x40
 8002398:	d117      	bne.n	80023ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023b4:	e067      	b.n	8002486 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	e05d      	b.n	8002486 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023d2:	d133      	bne.n	800243c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b21      	cmp	r3, #33	@ 0x21
 80023de:	d109      	bne.n	80023f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	e008      	b.n	8002406 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <I2C_Master_SB+0x92>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241c:	2b00      	cmp	r3, #0
 800241e:	d032      	beq.n	8002486 <I2C_Master_SB+0x100>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02d      	beq.n	8002486 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002438:	605a      	str	r2, [r3, #4]
}
 800243a:	e024      	b.n	8002486 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	b29b      	uxth	r3, r3
 800244a:	11db      	asrs	r3, r3, #7
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 0306 	and.w	r3, r3, #6
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f063 030f 	orn	r3, r3, #15
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
}
 8002460:	e011      	b.n	8002486 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10d      	bne.n	8002486 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	b29b      	uxth	r3, r3
 8002470:	11db      	asrs	r3, r3, #7
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 0306 	and.w	r3, r3, #6
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f063 030e 	orn	r3, r3, #14
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	611a      	str	r2, [r3, #16]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <I2C_Master_ADD10+0x26>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <I2C_Master_ADD10+0x48>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d8:	605a      	str	r2, [r3, #4]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b091      	sub	sp, #68	@ 0x44
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b22      	cmp	r3, #34	@ 0x22
 800250e:	f040 8169 	bne.w	80027e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <I2C_Master_ADDR+0x54>
 800251a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800251e:	2b40      	cmp	r3, #64	@ 0x40
 8002520:	d10b      	bne.n	800253a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	633b      	str	r3, [r7, #48]	@ 0x30
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	e160      	b.n	80027fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11d      	bne.n	800257e <I2C_Master_ADDR+0x98>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800254a:	d118      	bne.n	800257e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002570:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
 800257c:	e13e      	b.n	80027fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d113      	bne.n	80025b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e115      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	f040 808a 	bne.w	80026d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025c2:	d137      	bne.n	8002634 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025e2:	d113      	bne.n	800260c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	e0e7      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e0d3      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	2b08      	cmp	r3, #8
 8002638:	d02e      	beq.n	8002698 <I2C_Master_ADDR+0x1b2>
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	2b20      	cmp	r3, #32
 800263e:	d02b      	beq.n	8002698 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	2b12      	cmp	r3, #18
 8002644:	d102      	bne.n	800264c <I2C_Master_ADDR+0x166>
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2b01      	cmp	r3, #1
 800264a:	d125      	bne.n	8002698 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00e      	beq.n	8002670 <I2C_Master_ADDR+0x18a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	2b02      	cmp	r3, #2
 8002656:	d00b      	beq.n	8002670 <I2C_Master_ADDR+0x18a>
 8002658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265a:	2b10      	cmp	r3, #16
 800265c:	d008      	beq.n	8002670 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e007      	b.n	8002680 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800267e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	e0a1      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a8:	2300      	movs	r3, #0
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e085      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d14d      	bne.n	8002776 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d016      	beq.n	800270e <I2C_Master_ADDR+0x228>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d013      	beq.n	800270e <I2C_Master_ADDR+0x228>
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d010      	beq.n	800270e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800271c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800272c:	d117      	bne.n	800275e <I2C_Master_ADDR+0x278>
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002734:	d00b      	beq.n	800274e <I2C_Master_ADDR+0x268>
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	2b01      	cmp	r3, #1
 800273a:	d008      	beq.n	800274e <I2C_Master_ADDR+0x268>
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b08      	cmp	r3, #8
 8002740:	d005      	beq.n	800274e <I2C_Master_ADDR+0x268>
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	2b10      	cmp	r3, #16
 8002746:	d002      	beq.n	800274e <I2C_Master_ADDR+0x268>
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	2b20      	cmp	r3, #32
 800274c:	d107      	bne.n	800275e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800275c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	e032      	b.n	80027dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002784:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002794:	d117      	bne.n	80027c6 <I2C_Master_ADDR+0x2e0>
 8002796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002798:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800279c:	d00b      	beq.n	80027b6 <I2C_Master_ADDR+0x2d0>
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d008      	beq.n	80027b6 <I2C_Master_ADDR+0x2d0>
 80027a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d005      	beq.n	80027b6 <I2C_Master_ADDR+0x2d0>
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d002      	beq.n	80027b6 <I2C_Master_ADDR+0x2d0>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d107      	bne.n	80027c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027e2:	e00b      	b.n	80027fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	e7ff      	b.n	80027fc <I2C_Master_ADDR+0x316>
 80027fc:	bf00      	nop
 80027fe:	3744      	adds	r7, #68	@ 0x44
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02b      	beq.n	800287a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d114      	bne.n	800287a <I2C_SlaveTransmit_TXE+0x72>
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b29      	cmp	r3, #41	@ 0x29
 8002854:	d111      	bne.n	800287a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002864:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2228      	movs	r2, #40	@ 0x28
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff f9d5 	bl	8001c24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d02c      	beq.n	8002938 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d114      	bne.n	8002938 <I2C_SlaveReceive_RXNE+0x74>
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b2a      	cmp	r3, #42	@ 0x2a
 8002912:	d111      	bne.n	8002938 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002922:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2222      	movs	r2, #34	@ 0x22
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2228      	movs	r2, #40	@ 0x28
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff f980 	bl	8001c38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800299e:	2b28      	cmp	r3, #40	@ 0x28
 80029a0:	d125      	bne.n	80029ee <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	81bb      	strh	r3, [r7, #12]
 80029d0:	e002      	b.n	80029d8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029e0:	89ba      	ldrh	r2, [r7, #12]
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff f930 	bl	8001c4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029ec:	e00e      	b.n	8002a0c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a70:	d172      	bne.n	8002b58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b22      	cmp	r3, #34	@ 0x22
 8002a76:	d002      	beq.n	8002a7e <I2C_Slave_STOPF+0x6a>
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a7c:	d135      	bne.n	8002aea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fb19 	bl	80010ee <HAL_DMA_GetState>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d049      	beq.n	8002b56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	4a69      	ldr	r2, [pc, #420]	@ (8002c6c <I2C_Slave_STOPF+0x258>)
 8002ac8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe faeb 	bl	80010aa <HAL_DMA_Abort_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03d      	beq.n	8002b56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ae8:	e035      	b.n	8002b56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fae3 	bl	80010ee <HAL_DMA_GetState>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d014      	beq.n	8002b58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b32:	4a4e      	ldr	r2, [pc, #312]	@ (8002c6c <I2C_Slave_STOPF+0x258>)
 8002b34:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fab5 	bl	80010aa <HAL_DMA_Abort_IT>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b50:	4610      	mov	r0, r2
 8002b52:	4798      	blx	r3
 8002b54:	e000      	b.n	8002b58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03e      	beq.n	8002be0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d112      	bne.n	8002b96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d112      	bne.n	8002bca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8b7 	bl	8002d5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bee:	e039      	b.n	8002c64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bf4:	d109      	bne.n	8002c0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2228      	movs	r2, #40	@ 0x28
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff f817 	bl	8001c38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b28      	cmp	r3, #40	@ 0x28
 8002c14:	d111      	bne.n	8002c3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <I2C_Slave_STOPF+0x25c>)
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff f818 	bl	8001c68 <HAL_I2C_ListenCpltCallback>
}
 8002c38:	e014      	b.n	8002c64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	2b22      	cmp	r3, #34	@ 0x22
 8002c40:	d002      	beq.n	8002c48 <I2C_Slave_STOPF+0x234>
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b22      	cmp	r3, #34	@ 0x22
 8002c46:	d10d      	bne.n	8002c64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe ffea 	bl	8001c38 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08002fc1 	.word	0x08002fc1
 8002c70:	ffff0000 	.word	0xffff0000

08002c74 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d002      	beq.n	8002c96 <I2C_Slave_AF+0x22>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d129      	bne.n	8002cea <I2C_Slave_AF+0x76>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b28      	cmp	r3, #40	@ 0x28
 8002c9a:	d126      	bne.n	8002cea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <I2C_Slave_AF+0xe4>)
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe ffc0 	bl	8001c68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002ce8:	e031      	b.n	8002d4e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b21      	cmp	r3, #33	@ 0x21
 8002cee:	d129      	bne.n	8002d44 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <I2C_Slave_AF+0xe4>)
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2221      	movs	r2, #33	@ 0x21
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d1a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d24:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d34:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fcc0 	bl	80016bc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe ff71 	bl	8001c24 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d42:	e004      	b.n	8002d4e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d002      	beq.n	8002d80 <I2C_ITError+0x24>
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d10a      	bne.n	8002d96 <I2C_ITError+0x3a>
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b22      	cmp	r3, #34	@ 0x22
 8002d84:	d107      	bne.n	8002d96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d9c:	2b28      	cmp	r3, #40	@ 0x28
 8002d9e:	d107      	bne.n	8002db0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2228      	movs	r2, #40	@ 0x28
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002dae:	e015      	b.n	8002ddc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dbe:	d00a      	beq.n	8002dd6 <I2C_ITError+0x7a>
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b60      	cmp	r3, #96	@ 0x60
 8002dc4:	d007      	beq.n	8002dd6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dea:	d162      	bne.n	8002eb2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dfa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d020      	beq.n	8002e4c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb8 <I2C_ITError+0x25c>)
 8002e10:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f947 	bl	80010aa <HAL_DMA_Abort_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8089 	beq.w	8002f36 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e46:	4610      	mov	r0, r2
 8002e48:	4798      	blx	r3
 8002e4a:	e074      	b.n	8002f36 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	4a59      	ldr	r2, [pc, #356]	@ (8002fb8 <I2C_ITError+0x25c>)
 8002e52:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe f926 	bl	80010aa <HAL_DMA_Abort_IT>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d068      	beq.n	8002f36 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d10b      	bne.n	8002e8a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eac:	4610      	mov	r0, r2
 8002eae:	4798      	blx	r3
 8002eb0:	e041      	b.n	8002f36 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b60      	cmp	r3, #96	@ 0x60
 8002ebc:	d125      	bne.n	8002f0a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d10b      	bne.n	8002ef2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe fece 	bl	8001ca4 <HAL_I2C_AbortCpltCallback>
 8002f08:	e015      	b.n	8002f36 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b40      	cmp	r3, #64	@ 0x40
 8002f16:	d10b      	bne.n	8002f30 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fd7f 	bl	8000a34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d113      	bne.n	8002fb0 <I2C_ITError+0x254>
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b28      	cmp	r3, #40	@ 0x28
 8002f8c:	d110      	bne.n	8002fb0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <I2C_ITError+0x260>)
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fe5c 	bl	8001c68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08002fc1 	.word	0x08002fc1
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fda:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <I2C_DMAAbort+0x148>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800310c <I2C_DMAAbort+0x14c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a1a      	lsrs	r2, r3, #8
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003006:	e00a      	b.n	800301e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800301c:	d0ea      	beq.n	8002ff4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	2200      	movs	r2, #0
 800302c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	2200      	movs	r2, #0
 800303c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003060:	2200      	movs	r2, #0
 8003062:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	2200      	movs	r2, #0
 8003072:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b60      	cmp	r3, #96	@ 0x60
 800308e:	d10e      	bne.n	80030ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7fe fdfc 	bl	8001ca4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030ac:	e027      	b.n	80030fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030b4:	2b28      	cmp	r3, #40	@ 0x28
 80030b6:	d117      	bne.n	80030e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2228      	movs	r2, #40	@ 0x28
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030e6:	e007      	b.n	80030f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7fd fc9b 	bl	8000a34 <HAL_I2C_ErrorCallback>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000
 800310c:	14f8b589 	.word	0x14f8b589

08003110 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	08db      	lsrs	r3, r3, #3
 8003122:	4a13      	ldr	r2, [pc, #76]	@ (8003170 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	0a1a      	lsrs	r2, r3, #8
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3b01      	subs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e008      	b.n	8003160 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315c:	d0e9      	beq.n	8003132 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20000000 	.word	0x20000000
 8003170:	14f8b589 	.word	0x14f8b589

08003174 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003184:	d103      	bne.n	800318e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800318c:	e007      	b.n	800319e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003196:	d102      	bne.n	800319e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2208      	movs	r2, #8
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fd fda0 	bl	8000de0 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd fd9c 	bl	8000de0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f855 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fd00 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08004f50 	.word	0x08004f50
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08004f60 	.word	0x08004f60

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffdc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0b5b      	lsrs	r3, r3, #13
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	@ (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08004f60 	.word	0x08004f60

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b0ae      	sub	sp, #184	@ 0xb8
 80033e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003406:	4bcb      	ldr	r3, [pc, #812]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b0c      	cmp	r3, #12
 8003410:	f200 8206 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x440>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003451 	.word	0x08003451
 8003420:	08003821 	.word	0x08003821
 8003424:	08003821 	.word	0x08003821
 8003428:	08003821 	.word	0x08003821
 800342c:	08003459 	.word	0x08003459
 8003430:	08003821 	.word	0x08003821
 8003434:	08003821 	.word	0x08003821
 8003438:	08003821 	.word	0x08003821
 800343c:	08003461 	.word	0x08003461
 8003440:	08003821 	.word	0x08003821
 8003444:	08003821 	.word	0x08003821
 8003448:	08003821 	.word	0x08003821
 800344c:	08003651 	.word	0x08003651
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4bb9      	ldr	r3, [pc, #740]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x358>)
 8003452:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003456:	e1e7      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003458:	4bb8      	ldr	r3, [pc, #736]	@ (800373c <HAL_RCC_GetSysClockFreq+0x35c>)
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800345e:	e1e3      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003460:	4bb4      	ldr	r3, [pc, #720]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346c:	4bb1      	ldr	r3, [pc, #708]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d071      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003478:	4bae      	ldr	r3, [pc, #696]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003484:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800349a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4621      	mov	r1, r4
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80034bc:	4629      	mov	r1, r5
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80034d0:	4649      	mov	r1, r9
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4641      	mov	r1, r8
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4641      	mov	r1, r8
 80034e0:	1a51      	subs	r1, r2, r1
 80034e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034e4:	4649      	mov	r1, r9
 80034e6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034f8:	4649      	mov	r1, r9
 80034fa:	00cb      	lsls	r3, r1, #3
 80034fc:	4641      	mov	r1, r8
 80034fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003502:	4641      	mov	r1, r8
 8003504:	00ca      	lsls	r2, r1, #3
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	4603      	mov	r3, r0
 800350c:	4622      	mov	r2, r4
 800350e:	189b      	adds	r3, r3, r2
 8003510:	633b      	str	r3, [r7, #48]	@ 0x30
 8003512:	462b      	mov	r3, r5
 8003514:	460a      	mov	r2, r1
 8003516:	eb42 0303 	adc.w	r3, r2, r3
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003528:	4629      	mov	r1, r5
 800352a:	024b      	lsls	r3, r1, #9
 800352c:	4621      	mov	r1, r4
 800352e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003532:	4621      	mov	r1, r4
 8003534:	024a      	lsls	r2, r1, #9
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003544:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003548:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800354c:	f7fc feb8 	bl	80002c0 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800355a:	e067      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b75      	ldr	r3, [pc, #468]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003568:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800356c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003576:	2300      	movs	r3, #0
 8003578:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800357a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800357e:	4622      	mov	r2, r4
 8003580:	462b      	mov	r3, r5
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	0159      	lsls	r1, r3, #5
 800358c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003590:	0150      	lsls	r0, r2, #5
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4621      	mov	r1, r4
 8003598:	1a51      	subs	r1, r2, r1
 800359a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800359c:	4629      	mov	r1, r5
 800359e:	eb63 0301 	sbc.w	r3, r3, r1
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035b0:	4649      	mov	r1, r9
 80035b2:	018b      	lsls	r3, r1, #6
 80035b4:	4641      	mov	r1, r8
 80035b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ba:	4641      	mov	r1, r8
 80035bc:	018a      	lsls	r2, r1, #6
 80035be:	4641      	mov	r1, r8
 80035c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80035c4:	4649      	mov	r1, r9
 80035c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035de:	4692      	mov	sl, r2
 80035e0:	469b      	mov	fp, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	eb1a 0303 	adds.w	r3, sl, r3
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	462b      	mov	r3, r5
 80035ec:	eb4b 0303 	adc.w	r3, fp, r3
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035fe:	4629      	mov	r1, r5
 8003600:	028b      	lsls	r3, r1, #10
 8003602:	4621      	mov	r1, r4
 8003604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003608:	4621      	mov	r1, r4
 800360a:	028a      	lsls	r2, r1, #10
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003614:	2200      	movs	r2, #0
 8003616:	673b      	str	r3, [r7, #112]	@ 0x70
 8003618:	677a      	str	r2, [r7, #116]	@ 0x74
 800361a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800361e:	f7fc fe4f 	bl	80002c0 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4613      	mov	r3, r2
 8003628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800362c:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800363e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800364e:	e0eb      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365c:	4b35      	ldr	r3, [pc, #212]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d06b      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003668:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x354>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	2200      	movs	r2, #0
 8003670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	663b      	str	r3, [r7, #96]	@ 0x60
 800367c:	2300      	movs	r3, #0
 800367e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003680:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003684:	4622      	mov	r2, r4
 8003686:	462b      	mov	r3, r5
 8003688:	f04f 0000 	mov.w	r0, #0
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	0159      	lsls	r1, r3, #5
 8003692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003696:	0150      	lsls	r0, r2, #5
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4621      	mov	r1, r4
 800369e:	1a51      	subs	r1, r2, r1
 80036a0:	61b9      	str	r1, [r7, #24]
 80036a2:	4629      	mov	r1, r5
 80036a4:	eb63 0301 	sbc.w	r3, r3, r1
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036b6:	4659      	mov	r1, fp
 80036b8:	018b      	lsls	r3, r1, #6
 80036ba:	4651      	mov	r1, sl
 80036bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c0:	4651      	mov	r1, sl
 80036c2:	018a      	lsls	r2, r1, #6
 80036c4:	4651      	mov	r1, sl
 80036c6:	ebb2 0801 	subs.w	r8, r2, r1
 80036ca:	4659      	mov	r1, fp
 80036cc:	eb63 0901 	sbc.w	r9, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e4:	4690      	mov	r8, r2
 80036e6:	4699      	mov	r9, r3
 80036e8:	4623      	mov	r3, r4
 80036ea:	eb18 0303 	adds.w	r3, r8, r3
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb49 0303 	adc.w	r3, r9, r3
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003704:	4629      	mov	r1, r5
 8003706:	024b      	lsls	r3, r1, #9
 8003708:	4621      	mov	r1, r4
 800370a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800370e:	4621      	mov	r1, r4
 8003710:	024a      	lsls	r2, r1, #9
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800371a:	2200      	movs	r2, #0
 800371c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800371e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003724:	f7fc fdcc 	bl	80002c0 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003732:	e065      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x420>
 8003734:	40023800 	.word	0x40023800
 8003738:	00f42400 	.word	0x00f42400
 800373c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003740:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x458>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	2200      	movs	r2, #0
 8003748:	4618      	mov	r0, r3
 800374a:	4611      	mov	r1, r2
 800374c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003750:	653b      	str	r3, [r7, #80]	@ 0x50
 8003752:	2300      	movs	r3, #0
 8003754:	657b      	str	r3, [r7, #84]	@ 0x54
 8003756:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800375a:	4642      	mov	r2, r8
 800375c:	464b      	mov	r3, r9
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376c:	0150      	lsls	r0, r2, #5
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4641      	mov	r1, r8
 8003774:	1a51      	subs	r1, r2, r1
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	4649      	mov	r1, r9
 800377a:	eb63 0301 	sbc.w	r3, r3, r1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800378c:	4659      	mov	r1, fp
 800378e:	018b      	lsls	r3, r1, #6
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003796:	4651      	mov	r1, sl
 8003798:	018a      	lsls	r2, r1, #6
 800379a:	4651      	mov	r1, sl
 800379c:	1a54      	subs	r4, r2, r1
 800379e:	4659      	mov	r1, fp
 80037a0:	eb63 0501 	sbc.w	r5, r3, r1
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	00eb      	lsls	r3, r5, #3
 80037ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b2:	00e2      	lsls	r2, r4, #3
 80037b4:	4614      	mov	r4, r2
 80037b6:	461d      	mov	r5, r3
 80037b8:	4643      	mov	r3, r8
 80037ba:	18e3      	adds	r3, r4, r3
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	464b      	mov	r3, r9
 80037c0:	eb45 0303 	adc.w	r3, r5, r3
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d2:	4629      	mov	r1, r5
 80037d4:	028b      	lsls	r3, r1, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037dc:	4621      	mov	r1, r4
 80037de:	028a      	lsls	r2, r1, #10
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037e8:	2200      	movs	r2, #0
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037f2:	f7fc fd65 	bl	80002c0 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4613      	mov	r3, r2
 80037fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003800:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x458>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0f1b      	lsrs	r3, r3, #28
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800380e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800381e:	e003      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003826:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800382c:	4618      	mov	r0, r3
 800382e:	37b8      	adds	r7, #184	@ 0xb8
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	00f42400 	.word	0x00f42400

08003840 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e28d      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8083 	beq.w	8003966 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003860:	4b94      	ldr	r3, [pc, #592]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d019      	beq.n	80038a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800386c:	4b91      	ldr	r3, [pc, #580]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
        || \
 8003874:	2b08      	cmp	r3, #8
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003878:	4b8e      	ldr	r3, [pc, #568]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003884:	d00c      	beq.n	80038a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003886:	4b8b      	ldr	r3, [pc, #556]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d112      	bne.n	80038b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b88      	ldr	r3, [pc, #544]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800389e:	d10b      	bne.n	80038b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	4b84      	ldr	r3, [pc, #528]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05b      	beq.n	8003964 <HAL_RCC_OscConfig+0x124>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d157      	bne.n	8003964 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e25a      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x90>
 80038c2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xcc>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xb4>
 80038da:	4b76      	ldr	r3, [pc, #472]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a75      	ldr	r2, [pc, #468]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b73      	ldr	r3, [pc, #460]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xcc>
 80038f4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fa64 	bl	8000de0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fa60 	bl	8000de0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e21f      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xdc>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fa50 	bl	8000de0 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fd fa4c 	bl	8000de0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e20b      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b57      	ldr	r3, [pc, #348]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x104>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d06f      	beq.n	8003a52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003972:	4b50      	ldr	r3, [pc, #320]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800397e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
        || \
 8003986:	2b08      	cmp	r3, #8
 8003988:	d105      	bne.n	8003996 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800398a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b44      	ldr	r3, [pc, #272]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b41      	ldr	r3, [pc, #260]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x186>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1d3      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4937      	ldr	r1, [pc, #220]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <HAL_RCC_OscConfig+0x278>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd f9f9 	bl	8000de0 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fd f9f5 	bl	8000de0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1b4      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4925      	ldr	r1, [pc, #148]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <HAL_RCC_OscConfig+0x278>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd f9d8 	bl	8000de0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fd f9d4 	bl	8000de0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e193      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d036      	beq.n	8003acc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCC_OscConfig+0x27c>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd f9b8 	bl	8000de0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fd f9b4 	bl	8000de0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e173      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x234>
 8003a92:	e01b      	b.n	8003acc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_OscConfig+0x27c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd f9a1 	bl	8000de0 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e00e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fd f99d 	bl	8000de0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d907      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e15c      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	42470000 	.word	0x42470000
 8003abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	4b8a      	ldr	r3, [pc, #552]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ea      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8097 	beq.w	8003c08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4b83      	ldr	r3, [pc, #524]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	4b7f      	ldr	r3, [pc, #508]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afa:	4b7c      	ldr	r3, [pc, #496]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b79      	ldr	r3, [pc, #484]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b16:	4b76      	ldr	r3, [pc, #472]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a75      	ldr	r2, [pc, #468]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b0>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fd f95d 	bl	8000de0 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd f959 	bl	8000de0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e118      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf0 <HAL_RCC_OscConfig+0x4b0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x31e>
 8003b50:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a65      	ldr	r2, [pc, #404]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	e01c      	b.n	8003b98 <HAL_RCC_OscConfig+0x358>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x340>
 8003b66:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a60      	ldr	r2, [pc, #384]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b72:	4b5e      	ldr	r3, [pc, #376]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a5d      	ldr	r2, [pc, #372]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x358>
 8003b80:	4b5a      	ldr	r3, [pc, #360]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a59      	ldr	r2, [pc, #356]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	4b57      	ldr	r3, [pc, #348]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	4a56      	ldr	r2, [pc, #344]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fd f91e 	bl	8000de0 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd f91a 	bl	8000de0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0d7      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ee      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x368>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd f908 	bl	8000de0 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fd f904 	bl	8000de0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0c1      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bea:	4b40      	ldr	r3, [pc, #256]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	4a3a      	ldr	r2, [pc, #232]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80ad 	beq.w	8003d6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c12:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d060      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d145      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b33      	ldr	r3, [pc, #204]	@ (8003cf4 <HAL_RCC_OscConfig+0x4b4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd f8d8 	bl	8000de0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd f8d4 	bl	8000de0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e093      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	491b      	ldr	r1, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c84:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x4b4>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd f8a9 	bl	8000de0 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fd f8a5 	bl	8000de0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e064      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x452>
 8003cb0:	e05c      	b.n	8003d6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_OscConfig+0x4b4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd f892 	bl	8000de0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd f88e 	bl	8000de0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04d      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x480>
 8003cde:	e045      	b.n	8003d6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e040      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d78 <HAL_RCC_OscConfig+0x538>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d030      	beq.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d129      	bne.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d122      	bne.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d119      	bne.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	3b01      	subs	r3, #1
 8003d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d10f      	bne.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e042      	b.n	8003e14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc feb2 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f973 	bl	80040ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d175      	bne.n	8003f28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_UART_Transmit+0x2c>
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e06e      	b.n	8003f2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	@ 0x21
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e5a:	f7fc ffc1 	bl	8000de0 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e74:	d108      	bne.n	8003e88 <HAL_UART_Transmit+0x6c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e003      	b.n	8003e90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e90:	e02e      	b.n	8003ef0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f848 	bl	8003f32 <UART_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e03a      	b.n	8003f2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e007      	b.n	8003ee2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1cb      	bne.n	8003e92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2140      	movs	r1, #64	@ 0x40
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f814 	bl	8003f32 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e006      	b.n	8003f2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	e03b      	b.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d037      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4c:	f7fc ff48 	bl	8000de0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e03a      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d023      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d020      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d01d      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d116      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f81d 	bl	8003fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2208      	movs	r2, #8
 8003fae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e00f      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d0b4      	beq.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b095      	sub	sp, #84	@ 0x54
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800400c:	643a      	str	r2, [r7, #64]	@ 0x40
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004040:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	2b01      	cmp	r3, #1
 800405a:	d119      	bne.n	8004090 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60bb      	str	r3, [r7, #8]
   return(result);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	647b      	str	r3, [r7, #68]	@ 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800407c:	61ba      	str	r2, [r7, #24]
 800407e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800409e:	bf00      	nop
 80040a0:	3754      	adds	r7, #84	@ 0x54
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b0:	b0c0      	sub	sp, #256	@ 0x100
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	68d9      	ldr	r1, [r3, #12]
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	ea40 0301 	orr.w	r3, r0, r1
 80040d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004104:	f021 010c 	bic.w	r1, r1, #12
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004112:	430b      	orrs	r3, r1
 8004114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	6999      	ldr	r1, [r3, #24]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	ea40 0301 	orr.w	r3, r0, r1
 8004132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b8f      	ldr	r3, [pc, #572]	@ (8004378 <UART_SetConfig+0x2cc>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d005      	beq.n	800414c <UART_SetConfig+0xa0>
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b8d      	ldr	r3, [pc, #564]	@ (800437c <UART_SetConfig+0x2d0>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d104      	bne.n	8004156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7ff f934 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8004150:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004154:	e003      	b.n	800415e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004156:	f7ff f91b 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800415a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004168:	f040 810c 	bne.w	8004384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800416c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004170:	2200      	movs	r2, #0
 8004172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004176:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800417a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800417e:	4622      	mov	r2, r4
 8004180:	462b      	mov	r3, r5
 8004182:	1891      	adds	r1, r2, r2
 8004184:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004186:	415b      	adcs	r3, r3
 8004188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800418a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800418e:	4621      	mov	r1, r4
 8004190:	eb12 0801 	adds.w	r8, r2, r1
 8004194:	4629      	mov	r1, r5
 8004196:	eb43 0901 	adc.w	r9, r3, r1
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ae:	4690      	mov	r8, r2
 80041b0:	4699      	mov	r9, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	eb18 0303 	adds.w	r3, r8, r3
 80041b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041bc:	462b      	mov	r3, r5
 80041be:	eb49 0303 	adc.w	r3, r9, r3
 80041c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041da:	460b      	mov	r3, r1
 80041dc:	18db      	adds	r3, r3, r3
 80041de:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e0:	4613      	mov	r3, r2
 80041e2:	eb42 0303 	adc.w	r3, r2, r3
 80041e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041f0:	f7fc f866 	bl	80002c0 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b61      	ldr	r3, [pc, #388]	@ (8004380 <UART_SetConfig+0x2d4>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011c      	lsls	r4, r3, #4
 8004202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800420c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800421c:	415b      	adcs	r3, r3
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004224:	4641      	mov	r1, r8
 8004226:	eb12 0a01 	adds.w	sl, r2, r1
 800422a:	4649      	mov	r1, r9
 800422c:	eb43 0b01 	adc.w	fp, r3, r1
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800423c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004244:	4692      	mov	sl, r2
 8004246:	469b      	mov	fp, r3
 8004248:	4643      	mov	r3, r8
 800424a:	eb1a 0303 	adds.w	r3, sl, r3
 800424e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004252:	464b      	mov	r3, r9
 8004254:	eb4b 0303 	adc.w	r3, fp, r3
 8004258:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004268:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800426c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004270:	460b      	mov	r3, r1
 8004272:	18db      	adds	r3, r3, r3
 8004274:	643b      	str	r3, [r7, #64]	@ 0x40
 8004276:	4613      	mov	r3, r2
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	647b      	str	r3, [r7, #68]	@ 0x44
 800427e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004286:	f7fc f81b 	bl	80002c0 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4611      	mov	r1, r2
 8004290:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <UART_SetConfig+0x2d4>)
 8004292:	fba3 2301 	umull	r2, r3, r3, r1
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2264      	movs	r2, #100	@ 0x64
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	1acb      	subs	r3, r1, r3
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042a6:	4b36      	ldr	r3, [pc, #216]	@ (8004380 <UART_SetConfig+0x2d4>)
 80042a8:	fba3 2302 	umull	r2, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b4:	441c      	add	r4, r3
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042d0:	415b      	adcs	r3, r3
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d8:	4641      	mov	r1, r8
 80042da:	1851      	adds	r1, r2, r1
 80042dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80042de:	4649      	mov	r1, r9
 80042e0:	414b      	adcs	r3, r1
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042f0:	4659      	mov	r1, fp
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fa:	4651      	mov	r1, sl
 80042fc:	00ca      	lsls	r2, r1, #3
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4603      	mov	r3, r0
 8004304:	4642      	mov	r2, r8
 8004306:	189b      	adds	r3, r3, r2
 8004308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800430c:	464b      	mov	r3, r9
 800430e:	460a      	mov	r2, r1
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004324:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800432c:	460b      	mov	r3, r1
 800432e:	18db      	adds	r3, r3, r3
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004332:	4613      	mov	r3, r2
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800433e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004342:	f7fb ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <UART_SetConfig+0x2d4>)
 800434c:	fba3 1302 	umull	r1, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	2164      	movs	r1, #100	@ 0x64
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	3332      	adds	r3, #50	@ 0x32
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <UART_SetConfig+0x2d4>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f003 0207 	and.w	r2, r3, #7
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4422      	add	r2, r4
 8004372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004374:	e106      	b.n	8004584 <UART_SetConfig+0x4d8>
 8004376:	bf00      	nop
 8004378:	40011000 	.word	0x40011000
 800437c:	40011400 	.word	0x40011400
 8004380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800438e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004396:	4642      	mov	r2, r8
 8004398:	464b      	mov	r3, r9
 800439a:	1891      	adds	r1, r2, r2
 800439c:	6239      	str	r1, [r7, #32]
 800439e:	415b      	adcs	r3, r3
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a6:	4641      	mov	r1, r8
 80043a8:	1854      	adds	r4, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb43 0501 	adc.w	r5, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	00eb      	lsls	r3, r5, #3
 80043ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043be:	00e2      	lsls	r2, r4, #3
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	4643      	mov	r3, r8
 80043c6:	18e3      	adds	r3, r4, r3
 80043c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043cc:	464b      	mov	r3, r9
 80043ce:	eb45 0303 	adc.w	r3, r5, r3
 80043d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043f2:	4629      	mov	r1, r5
 80043f4:	008b      	lsls	r3, r1, #2
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fc:	4621      	mov	r1, r4
 80043fe:	008a      	lsls	r2, r1, #2
 8004400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004404:	f7fb ff5c 	bl	80002c0 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b60      	ldr	r3, [pc, #384]	@ (8004590 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2302 	umull	r2, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	011c      	lsls	r4, r3, #4
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004420:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	61b9      	str	r1, [r7, #24]
 8004430:	415b      	adcs	r3, r3
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004438:	4641      	mov	r1, r8
 800443a:	1851      	adds	r1, r2, r1
 800443c:	6139      	str	r1, [r7, #16]
 800443e:	4649      	mov	r1, r9
 8004440:	414b      	adcs	r3, r1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004450:	4659      	mov	r1, fp
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445a:	4651      	mov	r1, sl
 800445c:	00ca      	lsls	r2, r1, #3
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	4603      	mov	r3, r0
 8004464:	4642      	mov	r2, r8
 8004466:	189b      	adds	r3, r3, r2
 8004468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800446c:	464b      	mov	r3, r9
 800446e:	460a      	mov	r2, r1
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004482:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004490:	4649      	mov	r1, r9
 8004492:	008b      	lsls	r3, r1, #2
 8004494:	4641      	mov	r1, r8
 8004496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449a:	4641      	mov	r1, r8
 800449c:	008a      	lsls	r2, r1, #2
 800449e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044a2:	f7fb ff0d 	bl	80002c0 <__aeabi_uldivmod>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	4b38      	ldr	r3, [pc, #224]	@ (8004590 <UART_SetConfig+0x4e4>)
 80044ae:	fba3 2301 	umull	r2, r3, r3, r1
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2264      	movs	r2, #100	@ 0x64
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	1acb      	subs	r3, r1, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	@ 0x32
 80044c0:	4a33      	ldr	r2, [pc, #204]	@ (8004590 <UART_SetConfig+0x4e4>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044cc:	441c      	add	r4, r3
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	415b      	adcs	r3, r3
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ec:	4641      	mov	r1, r8
 80044ee:	1851      	adds	r1, r2, r1
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	4649      	mov	r1, r9
 80044f4:	414b      	adcs	r3, r1
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004504:	4659      	mov	r1, fp
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4651      	mov	r1, sl
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4642      	mov	r2, r8
 800451a:	189b      	adds	r3, r3, r2
 800451c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451e:	464b      	mov	r3, r9
 8004520:	460a      	mov	r2, r1
 8004522:	eb42 0303 	adc.w	r3, r2, r3
 8004526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	663b      	str	r3, [r7, #96]	@ 0x60
 8004532:	667a      	str	r2, [r7, #100]	@ 0x64
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004540:	4649      	mov	r1, r9
 8004542:	008b      	lsls	r3, r1, #2
 8004544:	4641      	mov	r1, r8
 8004546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454a:	4641      	mov	r1, r8
 800454c:	008a      	lsls	r2, r1, #2
 800454e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004552:	f7fb feb5 	bl	80002c0 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <UART_SetConfig+0x4e4>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	@ 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	3332      	adds	r3, #50	@ 0x32
 800456e:	4a08      	ldr	r2, [pc, #32]	@ (8004590 <UART_SetConfig+0x4e4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 020f 	and.w	r2, r3, #15
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4422      	add	r2, r4
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800458a:	46bd      	mov	sp, r7
 800458c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004590:	51eb851f 	.word	0x51eb851f

08004594 <sniprintf>:
 8004594:	b40c      	push	{r2, r3}
 8004596:	b530      	push	{r4, r5, lr}
 8004598:	4b17      	ldr	r3, [pc, #92]	@ (80045f8 <sniprintf+0x64>)
 800459a:	1e0c      	subs	r4, r1, #0
 800459c:	681d      	ldr	r5, [r3, #0]
 800459e:	b09d      	sub	sp, #116	@ 0x74
 80045a0:	da08      	bge.n	80045b4 <sniprintf+0x20>
 80045a2:	238b      	movs	r3, #139	@ 0x8b
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	b01d      	add	sp, #116	@ 0x74
 80045ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045b0:	b002      	add	sp, #8
 80045b2:	4770      	bx	lr
 80045b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80045b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045bc:	bf14      	ite	ne
 80045be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045c2:	4623      	moveq	r3, r4
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	9307      	str	r3, [sp, #28]
 80045c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045cc:	9002      	str	r0, [sp, #8]
 80045ce:	9006      	str	r0, [sp, #24]
 80045d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80045d6:	ab21      	add	r3, sp, #132	@ 0x84
 80045d8:	a902      	add	r1, sp, #8
 80045da:	4628      	mov	r0, r5
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	f000 f98d 	bl	80048fc <_svfiprintf_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	bfbc      	itt	lt
 80045e6:	238b      	movlt	r3, #139	@ 0x8b
 80045e8:	602b      	strlt	r3, [r5, #0]
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d0dd      	beq.n	80045aa <sniprintf+0x16>
 80045ee:	9b02      	ldr	r3, [sp, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e7d9      	b.n	80045aa <sniprintf+0x16>
 80045f6:	bf00      	nop
 80045f8:	2000000c 	.word	0x2000000c

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	@ (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4d0d      	ldr	r5, [pc, #52]	@ (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	@ (8004644 <__libc_init_array+0x3c>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2600      	movs	r6, #0
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4d0b      	ldr	r5, [pc, #44]	@ (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	@ (800464c <__libc_init_array+0x44>)
 800461c:	f000 fc66 	bl	8004eec <_init>
 8004620:	1b64      	subs	r4, r4, r5
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2600      	movs	r6, #0
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08004fa4 	.word	0x08004fa4
 8004644:	08004fa4 	.word	0x08004fa4
 8004648:	08004fa4 	.word	0x08004fa4
 800464c:	08004fa8 	.word	0x08004fa8

08004650 <__retarget_lock_acquire_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_release_recursive>:
 8004652:	4770      	bx	lr

08004654 <_free_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	d041      	beq.n	80046e0 <_free_r+0x8c>
 800465c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004660:	1f0c      	subs	r4, r1, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfb8      	it	lt
 8004666:	18e4      	addlt	r4, r4, r3
 8004668:	f000 f8e0 	bl	800482c <__malloc_lock>
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <_free_r+0x90>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	b933      	cbnz	r3, 8004680 <_free_r+0x2c>
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	6014      	str	r4, [r2, #0]
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467c:	f000 b8dc 	b.w	8004838 <__malloc_unlock>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d908      	bls.n	8004696 <_free_r+0x42>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf01      	itttt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	1809      	addeq	r1, r1, r0
 8004692:	6021      	streq	r1, [r4, #0]
 8004694:	e7ed      	b.n	8004672 <_free_r+0x1e>
 8004696:	461a      	mov	r2, r3
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b10b      	cbz	r3, 80046a0 <_free_r+0x4c>
 800469c:	42a3      	cmp	r3, r4
 800469e:	d9fa      	bls.n	8004696 <_free_r+0x42>
 80046a0:	6811      	ldr	r1, [r2, #0]
 80046a2:	1850      	adds	r0, r2, r1
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d10b      	bne.n	80046c0 <_free_r+0x6c>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	4401      	add	r1, r0
 80046ac:	1850      	adds	r0, r2, r1
 80046ae:	4283      	cmp	r3, r0
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	d1e0      	bne.n	8004676 <_free_r+0x22>
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	6053      	str	r3, [r2, #4]
 80046ba:	4408      	add	r0, r1
 80046bc:	6010      	str	r0, [r2, #0]
 80046be:	e7da      	b.n	8004676 <_free_r+0x22>
 80046c0:	d902      	bls.n	80046c8 <_free_r+0x74>
 80046c2:	230c      	movs	r3, #12
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	e7d6      	b.n	8004676 <_free_r+0x22>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf04      	itt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	bf04      	itt	eq
 80046d8:	1809      	addeq	r1, r1, r0
 80046da:	6021      	streq	r1, [r4, #0]
 80046dc:	6054      	str	r4, [r2, #4]
 80046de:	e7ca      	b.n	8004676 <_free_r+0x22>
 80046e0:	bd38      	pop	{r3, r4, r5, pc}
 80046e2:	bf00      	nop
 80046e4:	20000264 	.word	0x20000264

080046e8 <sbrk_aligned>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004728 <sbrk_aligned+0x40>)
 80046ec:	460c      	mov	r4, r1
 80046ee:	6831      	ldr	r1, [r6, #0]
 80046f0:	4605      	mov	r5, r0
 80046f2:	b911      	cbnz	r1, 80046fa <sbrk_aligned+0x12>
 80046f4:	f000 fba6 	bl	8004e44 <_sbrk_r>
 80046f8:	6030      	str	r0, [r6, #0]
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 fba1 	bl	8004e44 <_sbrk_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d103      	bne.n	800470e <sbrk_aligned+0x26>
 8004706:	f04f 34ff 	mov.w	r4, #4294967295
 800470a:	4620      	mov	r0, r4
 800470c:	bd70      	pop	{r4, r5, r6, pc}
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d0f8      	beq.n	800470a <sbrk_aligned+0x22>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4628      	mov	r0, r5
 800471c:	f000 fb92 	bl	8004e44 <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d1f2      	bne.n	800470a <sbrk_aligned+0x22>
 8004724:	e7ef      	b.n	8004706 <sbrk_aligned+0x1e>
 8004726:	bf00      	nop
 8004728:	20000260 	.word	0x20000260

0800472c <_malloc_r>:
 800472c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004730:	1ccd      	adds	r5, r1, #3
 8004732:	f025 0503 	bic.w	r5, r5, #3
 8004736:	3508      	adds	r5, #8
 8004738:	2d0c      	cmp	r5, #12
 800473a:	bf38      	it	cc
 800473c:	250c      	movcc	r5, #12
 800473e:	2d00      	cmp	r5, #0
 8004740:	4606      	mov	r6, r0
 8004742:	db01      	blt.n	8004748 <_malloc_r+0x1c>
 8004744:	42a9      	cmp	r1, r5
 8004746:	d904      	bls.n	8004752 <_malloc_r+0x26>
 8004748:	230c      	movs	r3, #12
 800474a:	6033      	str	r3, [r6, #0]
 800474c:	2000      	movs	r0, #0
 800474e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004828 <_malloc_r+0xfc>
 8004756:	f000 f869 	bl	800482c <__malloc_lock>
 800475a:	f8d8 3000 	ldr.w	r3, [r8]
 800475e:	461c      	mov	r4, r3
 8004760:	bb44      	cbnz	r4, 80047b4 <_malloc_r+0x88>
 8004762:	4629      	mov	r1, r5
 8004764:	4630      	mov	r0, r6
 8004766:	f7ff ffbf 	bl	80046e8 <sbrk_aligned>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	4604      	mov	r4, r0
 800476e:	d158      	bne.n	8004822 <_malloc_r+0xf6>
 8004770:	f8d8 4000 	ldr.w	r4, [r8]
 8004774:	4627      	mov	r7, r4
 8004776:	2f00      	cmp	r7, #0
 8004778:	d143      	bne.n	8004802 <_malloc_r+0xd6>
 800477a:	2c00      	cmp	r4, #0
 800477c:	d04b      	beq.n	8004816 <_malloc_r+0xea>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	4639      	mov	r1, r7
 8004782:	4630      	mov	r0, r6
 8004784:	eb04 0903 	add.w	r9, r4, r3
 8004788:	f000 fb5c 	bl	8004e44 <_sbrk_r>
 800478c:	4581      	cmp	r9, r0
 800478e:	d142      	bne.n	8004816 <_malloc_r+0xea>
 8004790:	6821      	ldr	r1, [r4, #0]
 8004792:	1a6d      	subs	r5, r5, r1
 8004794:	4629      	mov	r1, r5
 8004796:	4630      	mov	r0, r6
 8004798:	f7ff ffa6 	bl	80046e8 <sbrk_aligned>
 800479c:	3001      	adds	r0, #1
 800479e:	d03a      	beq.n	8004816 <_malloc_r+0xea>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	442b      	add	r3, r5
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	f8d8 3000 	ldr.w	r3, [r8]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	bb62      	cbnz	r2, 8004808 <_malloc_r+0xdc>
 80047ae:	f8c8 7000 	str.w	r7, [r8]
 80047b2:	e00f      	b.n	80047d4 <_malloc_r+0xa8>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	1b52      	subs	r2, r2, r5
 80047b8:	d420      	bmi.n	80047fc <_malloc_r+0xd0>
 80047ba:	2a0b      	cmp	r2, #11
 80047bc:	d917      	bls.n	80047ee <_malloc_r+0xc2>
 80047be:	1961      	adds	r1, r4, r5
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	6025      	str	r5, [r4, #0]
 80047c4:	bf18      	it	ne
 80047c6:	6059      	strne	r1, [r3, #4]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	bf08      	it	eq
 80047cc:	f8c8 1000 	streq.w	r1, [r8]
 80047d0:	5162      	str	r2, [r4, r5]
 80047d2:	604b      	str	r3, [r1, #4]
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f82f 	bl	8004838 <__malloc_unlock>
 80047da:	f104 000b 	add.w	r0, r4, #11
 80047de:	1d23      	adds	r3, r4, #4
 80047e0:	f020 0007 	bic.w	r0, r0, #7
 80047e4:	1ac2      	subs	r2, r0, r3
 80047e6:	bf1c      	itt	ne
 80047e8:	1a1b      	subne	r3, r3, r0
 80047ea:	50a3      	strne	r3, [r4, r2]
 80047ec:	e7af      	b.n	800474e <_malloc_r+0x22>
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	bf0c      	ite	eq
 80047f4:	f8c8 2000 	streq.w	r2, [r8]
 80047f8:	605a      	strne	r2, [r3, #4]
 80047fa:	e7eb      	b.n	80047d4 <_malloc_r+0xa8>
 80047fc:	4623      	mov	r3, r4
 80047fe:	6864      	ldr	r4, [r4, #4]
 8004800:	e7ae      	b.n	8004760 <_malloc_r+0x34>
 8004802:	463c      	mov	r4, r7
 8004804:	687f      	ldr	r7, [r7, #4]
 8004806:	e7b6      	b.n	8004776 <_malloc_r+0x4a>
 8004808:	461a      	mov	r2, r3
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	42a3      	cmp	r3, r4
 800480e:	d1fb      	bne.n	8004808 <_malloc_r+0xdc>
 8004810:	2300      	movs	r3, #0
 8004812:	6053      	str	r3, [r2, #4]
 8004814:	e7de      	b.n	80047d4 <_malloc_r+0xa8>
 8004816:	230c      	movs	r3, #12
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	4630      	mov	r0, r6
 800481c:	f000 f80c 	bl	8004838 <__malloc_unlock>
 8004820:	e794      	b.n	800474c <_malloc_r+0x20>
 8004822:	6005      	str	r5, [r0, #0]
 8004824:	e7d6      	b.n	80047d4 <_malloc_r+0xa8>
 8004826:	bf00      	nop
 8004828:	20000264 	.word	0x20000264

0800482c <__malloc_lock>:
 800482c:	4801      	ldr	r0, [pc, #4]	@ (8004834 <__malloc_lock+0x8>)
 800482e:	f7ff bf0f 	b.w	8004650 <__retarget_lock_acquire_recursive>
 8004832:	bf00      	nop
 8004834:	2000025c 	.word	0x2000025c

08004838 <__malloc_unlock>:
 8004838:	4801      	ldr	r0, [pc, #4]	@ (8004840 <__malloc_unlock+0x8>)
 800483a:	f7ff bf0a 	b.w	8004652 <__retarget_lock_release_recursive>
 800483e:	bf00      	nop
 8004840:	2000025c 	.word	0x2000025c

08004844 <__ssputs_r>:
 8004844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	688e      	ldr	r6, [r1, #8]
 800484a:	461f      	mov	r7, r3
 800484c:	42be      	cmp	r6, r7
 800484e:	680b      	ldr	r3, [r1, #0]
 8004850:	4682      	mov	sl, r0
 8004852:	460c      	mov	r4, r1
 8004854:	4690      	mov	r8, r2
 8004856:	d82d      	bhi.n	80048b4 <__ssputs_r+0x70>
 8004858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800485c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004860:	d026      	beq.n	80048b0 <__ssputs_r+0x6c>
 8004862:	6965      	ldr	r5, [r4, #20]
 8004864:	6909      	ldr	r1, [r1, #16]
 8004866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800486a:	eba3 0901 	sub.w	r9, r3, r1
 800486e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004872:	1c7b      	adds	r3, r7, #1
 8004874:	444b      	add	r3, r9
 8004876:	106d      	asrs	r5, r5, #1
 8004878:	429d      	cmp	r5, r3
 800487a:	bf38      	it	cc
 800487c:	461d      	movcc	r5, r3
 800487e:	0553      	lsls	r3, r2, #21
 8004880:	d527      	bpl.n	80048d2 <__ssputs_r+0x8e>
 8004882:	4629      	mov	r1, r5
 8004884:	f7ff ff52 	bl	800472c <_malloc_r>
 8004888:	4606      	mov	r6, r0
 800488a:	b360      	cbz	r0, 80048e6 <__ssputs_r+0xa2>
 800488c:	6921      	ldr	r1, [r4, #16]
 800488e:	464a      	mov	r2, r9
 8004890:	f000 fae8 	bl	8004e64 <memcpy>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800489a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	6126      	str	r6, [r4, #16]
 80048a2:	6165      	str	r5, [r4, #20]
 80048a4:	444e      	add	r6, r9
 80048a6:	eba5 0509 	sub.w	r5, r5, r9
 80048aa:	6026      	str	r6, [r4, #0]
 80048ac:	60a5      	str	r5, [r4, #8]
 80048ae:	463e      	mov	r6, r7
 80048b0:	42be      	cmp	r6, r7
 80048b2:	d900      	bls.n	80048b6 <__ssputs_r+0x72>
 80048b4:	463e      	mov	r6, r7
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	4632      	mov	r2, r6
 80048ba:	4641      	mov	r1, r8
 80048bc:	f000 faa8 	bl	8004e10 <memmove>
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	1b9b      	subs	r3, r3, r6
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	4433      	add	r3, r6
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	2000      	movs	r0, #0
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	462a      	mov	r2, r5
 80048d4:	f000 fad4 	bl	8004e80 <_realloc_r>
 80048d8:	4606      	mov	r6, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	d1e0      	bne.n	80048a0 <__ssputs_r+0x5c>
 80048de:	6921      	ldr	r1, [r4, #16]
 80048e0:	4650      	mov	r0, sl
 80048e2:	f7ff feb7 	bl	8004654 <_free_r>
 80048e6:	230c      	movs	r3, #12
 80048e8:	f8ca 3000 	str.w	r3, [sl]
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e7e9      	b.n	80048ce <__ssputs_r+0x8a>
	...

080048fc <_svfiprintf_r>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	4698      	mov	r8, r3
 8004902:	898b      	ldrh	r3, [r1, #12]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	b09d      	sub	sp, #116	@ 0x74
 8004908:	4607      	mov	r7, r0
 800490a:	460d      	mov	r5, r1
 800490c:	4614      	mov	r4, r2
 800490e:	d510      	bpl.n	8004932 <_svfiprintf_r+0x36>
 8004910:	690b      	ldr	r3, [r1, #16]
 8004912:	b973      	cbnz	r3, 8004932 <_svfiprintf_r+0x36>
 8004914:	2140      	movs	r1, #64	@ 0x40
 8004916:	f7ff ff09 	bl	800472c <_malloc_r>
 800491a:	6028      	str	r0, [r5, #0]
 800491c:	6128      	str	r0, [r5, #16]
 800491e:	b930      	cbnz	r0, 800492e <_svfiprintf_r+0x32>
 8004920:	230c      	movs	r3, #12
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	b01d      	add	sp, #116	@ 0x74
 800492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492e:	2340      	movs	r3, #64	@ 0x40
 8004930:	616b      	str	r3, [r5, #20]
 8004932:	2300      	movs	r3, #0
 8004934:	9309      	str	r3, [sp, #36]	@ 0x24
 8004936:	2320      	movs	r3, #32
 8004938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800493c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004940:	2330      	movs	r3, #48	@ 0x30
 8004942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ae0 <_svfiprintf_r+0x1e4>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494a:	f04f 0901 	mov.w	r9, #1
 800494e:	4623      	mov	r3, r4
 8004950:	469a      	mov	sl, r3
 8004952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004956:	b10a      	cbz	r2, 800495c <_svfiprintf_r+0x60>
 8004958:	2a25      	cmp	r2, #37	@ 0x25
 800495a:	d1f9      	bne.n	8004950 <_svfiprintf_r+0x54>
 800495c:	ebba 0b04 	subs.w	fp, sl, r4
 8004960:	d00b      	beq.n	800497a <_svfiprintf_r+0x7e>
 8004962:	465b      	mov	r3, fp
 8004964:	4622      	mov	r2, r4
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ff6b 	bl	8004844 <__ssputs_r>
 800496e:	3001      	adds	r0, #1
 8004970:	f000 80a7 	beq.w	8004ac2 <_svfiprintf_r+0x1c6>
 8004974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004976:	445a      	add	r2, fp
 8004978:	9209      	str	r2, [sp, #36]	@ 0x24
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 809f 	beq.w	8004ac2 <_svfiprintf_r+0x1c6>
 8004984:	2300      	movs	r3, #0
 8004986:	f04f 32ff 	mov.w	r2, #4294967295
 800498a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498e:	f10a 0a01 	add.w	sl, sl, #1
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800499a:	931a      	str	r3, [sp, #104]	@ 0x68
 800499c:	4654      	mov	r4, sl
 800499e:	2205      	movs	r2, #5
 80049a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a4:	484e      	ldr	r0, [pc, #312]	@ (8004ae0 <_svfiprintf_r+0x1e4>)
 80049a6:	f7fb fc3b 	bl	8000220 <memchr>
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	b9d8      	cbnz	r0, 80049e6 <_svfiprintf_r+0xea>
 80049ae:	06d0      	lsls	r0, r2, #27
 80049b0:	bf44      	itt	mi
 80049b2:	2320      	movmi	r3, #32
 80049b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b8:	0711      	lsls	r1, r2, #28
 80049ba:	bf44      	itt	mi
 80049bc:	232b      	movmi	r3, #43	@ 0x2b
 80049be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c2:	f89a 3000 	ldrb.w	r3, [sl]
 80049c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c8:	d015      	beq.n	80049f6 <_svfiprintf_r+0xfa>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	4654      	mov	r4, sl
 80049ce:	2000      	movs	r0, #0
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4621      	mov	r1, r4
 80049d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049da:	3b30      	subs	r3, #48	@ 0x30
 80049dc:	2b09      	cmp	r3, #9
 80049de:	d94b      	bls.n	8004a78 <_svfiprintf_r+0x17c>
 80049e0:	b1b0      	cbz	r0, 8004a10 <_svfiprintf_r+0x114>
 80049e2:	9207      	str	r2, [sp, #28]
 80049e4:	e014      	b.n	8004a10 <_svfiprintf_r+0x114>
 80049e6:	eba0 0308 	sub.w	r3, r0, r8
 80049ea:	fa09 f303 	lsl.w	r3, r9, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	46a2      	mov	sl, r4
 80049f4:	e7d2      	b.n	800499c <_svfiprintf_r+0xa0>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9103      	str	r1, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfbb      	ittet	lt
 8004a02:	425b      	neglt	r3, r3
 8004a04:	f042 0202 	orrlt.w	r2, r2, #2
 8004a08:	9307      	strge	r3, [sp, #28]
 8004a0a:	9307      	strlt	r3, [sp, #28]
 8004a0c:	bfb8      	it	lt
 8004a0e:	9204      	strlt	r2, [sp, #16]
 8004a10:	7823      	ldrb	r3, [r4, #0]
 8004a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a14:	d10a      	bne.n	8004a2c <_svfiprintf_r+0x130>
 8004a16:	7863      	ldrb	r3, [r4, #1]
 8004a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a1a:	d132      	bne.n	8004a82 <_svfiprintf_r+0x186>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a28:	3402      	adds	r4, #2
 8004a2a:	9305      	str	r3, [sp, #20]
 8004a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004af0 <_svfiprintf_r+0x1f4>
 8004a30:	7821      	ldrb	r1, [r4, #0]
 8004a32:	2203      	movs	r2, #3
 8004a34:	4650      	mov	r0, sl
 8004a36:	f7fb fbf3 	bl	8000220 <memchr>
 8004a3a:	b138      	cbz	r0, 8004a4c <_svfiprintf_r+0x150>
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	eba0 000a 	sub.w	r0, r0, sl
 8004a42:	2240      	movs	r2, #64	@ 0x40
 8004a44:	4082      	lsls	r2, r0
 8004a46:	4313      	orrs	r3, r2
 8004a48:	3401      	adds	r4, #1
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a50:	4824      	ldr	r0, [pc, #144]	@ (8004ae4 <_svfiprintf_r+0x1e8>)
 8004a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a56:	2206      	movs	r2, #6
 8004a58:	f7fb fbe2 	bl	8000220 <memchr>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d036      	beq.n	8004ace <_svfiprintf_r+0x1d2>
 8004a60:	4b21      	ldr	r3, [pc, #132]	@ (8004ae8 <_svfiprintf_r+0x1ec>)
 8004a62:	bb1b      	cbnz	r3, 8004aac <_svfiprintf_r+0x1b0>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	3307      	adds	r3, #7
 8004a68:	f023 0307 	bic.w	r3, r3, #7
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a72:	4433      	add	r3, r6
 8004a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a76:	e76a      	b.n	800494e <_svfiprintf_r+0x52>
 8004a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7a8      	b.n	80049d4 <_svfiprintf_r+0xd8>
 8004a82:	2300      	movs	r3, #0
 8004a84:	3401      	adds	r4, #1
 8004a86:	9305      	str	r3, [sp, #20]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0c0a 	mov.w	ip, #10
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a94:	3a30      	subs	r2, #48	@ 0x30
 8004a96:	2a09      	cmp	r2, #9
 8004a98:	d903      	bls.n	8004aa2 <_svfiprintf_r+0x1a6>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c6      	beq.n	8004a2c <_svfiprintf_r+0x130>
 8004a9e:	9105      	str	r1, [sp, #20]
 8004aa0:	e7c4      	b.n	8004a2c <_svfiprintf_r+0x130>
 8004aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7f0      	b.n	8004a8e <_svfiprintf_r+0x192>
 8004aac:	ab03      	add	r3, sp, #12
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <_svfiprintf_r+0x1f0>)
 8004ab4:	a904      	add	r1, sp, #16
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f3af 8000 	nop.w
 8004abc:	1c42      	adds	r2, r0, #1
 8004abe:	4606      	mov	r6, r0
 8004ac0:	d1d6      	bne.n	8004a70 <_svfiprintf_r+0x174>
 8004ac2:	89ab      	ldrh	r3, [r5, #12]
 8004ac4:	065b      	lsls	r3, r3, #25
 8004ac6:	f53f af2d 	bmi.w	8004924 <_svfiprintf_r+0x28>
 8004aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004acc:	e72c      	b.n	8004928 <_svfiprintf_r+0x2c>
 8004ace:	ab03      	add	r3, sp, #12
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <_svfiprintf_r+0x1f0>)
 8004ad6:	a904      	add	r1, sp, #16
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f000 f879 	bl	8004bd0 <_printf_i>
 8004ade:	e7ed      	b.n	8004abc <_svfiprintf_r+0x1c0>
 8004ae0:	08004f68 	.word	0x08004f68
 8004ae4:	08004f72 	.word	0x08004f72
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	08004845 	.word	0x08004845
 8004af0:	08004f6e 	.word	0x08004f6e

08004af4 <_printf_common>:
 8004af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	4616      	mov	r6, r2
 8004afa:	4698      	mov	r8, r3
 8004afc:	688a      	ldr	r2, [r1, #8]
 8004afe:	690b      	ldr	r3, [r1, #16]
 8004b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfb8      	it	lt
 8004b08:	4613      	movlt	r3, r2
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b10:	4607      	mov	r7, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	b10a      	cbz	r2, 8004b1a <_printf_common+0x26>
 8004b16:	3301      	adds	r3, #1
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	0699      	lsls	r1, r3, #26
 8004b1e:	bf42      	ittt	mi
 8004b20:	6833      	ldrmi	r3, [r6, #0]
 8004b22:	3302      	addmi	r3, #2
 8004b24:	6033      	strmi	r3, [r6, #0]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d106      	bne.n	8004b3c <_printf_common+0x48>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	6832      	ldr	r2, [r6, #0]
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dc26      	bgt.n	8004b8a <_printf_common+0x96>
 8004b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	3b00      	subs	r3, #0
 8004b44:	bf18      	it	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	0692      	lsls	r2, r2, #26
 8004b4a:	d42b      	bmi.n	8004ba4 <_printf_common+0xb0>
 8004b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b50:	4641      	mov	r1, r8
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c8      	blx	r9
 8004b56:	3001      	adds	r0, #1
 8004b58:	d01e      	beq.n	8004b98 <_printf_common+0xa4>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	bf02      	ittt	eq
 8004b66:	68e5      	ldreq	r5, [r4, #12]
 8004b68:	6833      	ldreq	r3, [r6, #0]
 8004b6a:	1aed      	subeq	r5, r5, r3
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	bf0c      	ite	eq
 8004b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b74:	2500      	movne	r5, #0
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bfc4      	itt	gt
 8004b7a:	1a9b      	subgt	r3, r3, r2
 8004b7c:	18ed      	addgt	r5, r5, r3
 8004b7e:	2600      	movs	r6, #0
 8004b80:	341a      	adds	r4, #26
 8004b82:	42b5      	cmp	r5, r6
 8004b84:	d11a      	bne.n	8004bbc <_printf_common+0xc8>
 8004b86:	2000      	movs	r0, #0
 8004b88:	e008      	b.n	8004b9c <_printf_common+0xa8>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	4641      	mov	r1, r8
 8004b90:	4638      	mov	r0, r7
 8004b92:	47c8      	blx	r9
 8004b94:	3001      	adds	r0, #1
 8004b96:	d103      	bne.n	8004ba0 <_printf_common+0xac>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	e7c6      	b.n	8004b32 <_printf_common+0x3e>
 8004ba4:	18e1      	adds	r1, r4, r3
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	2030      	movs	r0, #48	@ 0x30
 8004baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bae:	4422      	add	r2, r4
 8004bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bb8:	3302      	adds	r3, #2
 8004bba:	e7c7      	b.n	8004b4c <_printf_common+0x58>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	47c8      	blx	r9
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d0e6      	beq.n	8004b98 <_printf_common+0xa4>
 8004bca:	3601      	adds	r6, #1
 8004bcc:	e7d9      	b.n	8004b82 <_printf_common+0x8e>
	...

08004bd0 <_printf_i>:
 8004bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	7e0f      	ldrb	r7, [r1, #24]
 8004bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bd8:	2f78      	cmp	r7, #120	@ 0x78
 8004bda:	4691      	mov	r9, r2
 8004bdc:	4680      	mov	r8, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	469a      	mov	sl, r3
 8004be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004be6:	d807      	bhi.n	8004bf8 <_printf_i+0x28>
 8004be8:	2f62      	cmp	r7, #98	@ 0x62
 8004bea:	d80a      	bhi.n	8004c02 <_printf_i+0x32>
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	f000 80d2 	beq.w	8004d96 <_printf_i+0x1c6>
 8004bf2:	2f58      	cmp	r7, #88	@ 0x58
 8004bf4:	f000 80b9 	beq.w	8004d6a <_printf_i+0x19a>
 8004bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c00:	e03a      	b.n	8004c78 <_printf_i+0xa8>
 8004c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c06:	2b15      	cmp	r3, #21
 8004c08:	d8f6      	bhi.n	8004bf8 <_printf_i+0x28>
 8004c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c10 <_printf_i+0x40>)
 8004c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c7d 	.word	0x08004c7d
 8004c18:	08004bf9 	.word	0x08004bf9
 8004c1c:	08004bf9 	.word	0x08004bf9
 8004c20:	08004bf9 	.word	0x08004bf9
 8004c24:	08004bf9 	.word	0x08004bf9
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004bf9 	.word	0x08004bf9
 8004c30:	08004bf9 	.word	0x08004bf9
 8004c34:	08004bf9 	.word	0x08004bf9
 8004c38:	08004bf9 	.word	0x08004bf9
 8004c3c:	08004d7d 	.word	0x08004d7d
 8004c40:	08004ca7 	.word	0x08004ca7
 8004c44:	08004d37 	.word	0x08004d37
 8004c48:	08004bf9 	.word	0x08004bf9
 8004c4c:	08004bf9 	.word	0x08004bf9
 8004c50:	08004d9f 	.word	0x08004d9f
 8004c54:	08004bf9 	.word	0x08004bf9
 8004c58:	08004ca7 	.word	0x08004ca7
 8004c5c:	08004bf9 	.word	0x08004bf9
 8004c60:	08004bf9 	.word	0x08004bf9
 8004c64:	08004d3f 	.word	0x08004d3f
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6032      	str	r2, [r6, #0]
 8004c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e09d      	b.n	8004db8 <_printf_i+0x1e8>
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	1d19      	adds	r1, r3, #4
 8004c82:	6031      	str	r1, [r6, #0]
 8004c84:	0606      	lsls	r6, r0, #24
 8004c86:	d501      	bpl.n	8004c8c <_printf_i+0xbc>
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	e003      	b.n	8004c94 <_printf_i+0xc4>
 8004c8c:	0645      	lsls	r5, r0, #25
 8004c8e:	d5fb      	bpl.n	8004c88 <_printf_i+0xb8>
 8004c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	da03      	bge.n	8004ca0 <_printf_i+0xd0>
 8004c98:	232d      	movs	r3, #45	@ 0x2d
 8004c9a:	426d      	negs	r5, r5
 8004c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca0:	4859      	ldr	r0, [pc, #356]	@ (8004e08 <_printf_i+0x238>)
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	e011      	b.n	8004cca <_printf_i+0xfa>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	6833      	ldr	r3, [r6, #0]
 8004caa:	0608      	lsls	r0, r1, #24
 8004cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb0:	d402      	bmi.n	8004cb8 <_printf_i+0xe8>
 8004cb2:	0649      	lsls	r1, r1, #25
 8004cb4:	bf48      	it	mi
 8004cb6:	b2ad      	uxthmi	r5, r5
 8004cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cba:	4853      	ldr	r0, [pc, #332]	@ (8004e08 <_printf_i+0x238>)
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	bf14      	ite	ne
 8004cc0:	230a      	movne	r3, #10
 8004cc2:	2308      	moveq	r3, #8
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cca:	6866      	ldr	r6, [r4, #4]
 8004ccc:	60a6      	str	r6, [r4, #8]
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	bfa2      	ittt	ge
 8004cd2:	6821      	ldrge	r1, [r4, #0]
 8004cd4:	f021 0104 	bicge.w	r1, r1, #4
 8004cd8:	6021      	strge	r1, [r4, #0]
 8004cda:	b90d      	cbnz	r5, 8004ce0 <_printf_i+0x110>
 8004cdc:	2e00      	cmp	r6, #0
 8004cde:	d04b      	beq.n	8004d78 <_printf_i+0x1a8>
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8004cea:	5dc7      	ldrb	r7, [r0, r7]
 8004cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf0:	462f      	mov	r7, r5
 8004cf2:	42bb      	cmp	r3, r7
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	d9f4      	bls.n	8004ce2 <_printf_i+0x112>
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d10b      	bne.n	8004d14 <_printf_i+0x144>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	07df      	lsls	r7, r3, #31
 8004d00:	d508      	bpl.n	8004d14 <_printf_i+0x144>
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	6861      	ldr	r1, [r4, #4]
 8004d06:	4299      	cmp	r1, r3
 8004d08:	bfde      	ittt	le
 8004d0a:	2330      	movle	r3, #48	@ 0x30
 8004d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d14:	1b92      	subs	r2, r2, r6
 8004d16:	6122      	str	r2, [r4, #16]
 8004d18:	f8cd a000 	str.w	sl, [sp]
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	aa03      	add	r2, sp, #12
 8004d20:	4621      	mov	r1, r4
 8004d22:	4640      	mov	r0, r8
 8004d24:	f7ff fee6 	bl	8004af4 <_printf_common>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d14a      	bne.n	8004dc2 <_printf_i+0x1f2>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	b004      	add	sp, #16
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f043 0320 	orr.w	r3, r3, #32
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	4833      	ldr	r0, [pc, #204]	@ (8004e0c <_printf_i+0x23c>)
 8004d40:	2778      	movs	r7, #120	@ 0x78
 8004d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	6831      	ldr	r1, [r6, #0]
 8004d4a:	061f      	lsls	r7, r3, #24
 8004d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d50:	d402      	bmi.n	8004d58 <_printf_i+0x188>
 8004d52:	065f      	lsls	r7, r3, #25
 8004d54:	bf48      	it	mi
 8004d56:	b2ad      	uxthmi	r5, r5
 8004d58:	6031      	str	r1, [r6, #0]
 8004d5a:	07d9      	lsls	r1, r3, #31
 8004d5c:	bf44      	itt	mi
 8004d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d62:	6023      	strmi	r3, [r4, #0]
 8004d64:	b11d      	cbz	r5, 8004d6e <_printf_i+0x19e>
 8004d66:	2310      	movs	r3, #16
 8004d68:	e7ac      	b.n	8004cc4 <_printf_i+0xf4>
 8004d6a:	4827      	ldr	r0, [pc, #156]	@ (8004e08 <_printf_i+0x238>)
 8004d6c:	e7e9      	b.n	8004d42 <_printf_i+0x172>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	e7f6      	b.n	8004d66 <_printf_i+0x196>
 8004d78:	4616      	mov	r6, r2
 8004d7a:	e7bd      	b.n	8004cf8 <_printf_i+0x128>
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	6961      	ldr	r1, [r4, #20]
 8004d82:	1d18      	adds	r0, r3, #4
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	062e      	lsls	r6, r5, #24
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0x1c0>
 8004d8c:	6019      	str	r1, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <_printf_i+0x1c6>
 8004d90:	0668      	lsls	r0, r5, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0x1bc>
 8004d94:	8019      	strh	r1, [r3, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6123      	str	r3, [r4, #16]
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	e7bc      	b.n	8004d18 <_printf_i+0x148>
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	6032      	str	r2, [r6, #0]
 8004da4:	681e      	ldr	r6, [r3, #0]
 8004da6:	6862      	ldr	r2, [r4, #4]
 8004da8:	2100      	movs	r1, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7fb fa38 	bl	8000220 <memchr>
 8004db0:	b108      	cbz	r0, 8004db6 <_printf_i+0x1e6>
 8004db2:	1b80      	subs	r0, r0, r6
 8004db4:	6060      	str	r0, [r4, #4]
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc0:	e7aa      	b.n	8004d18 <_printf_i+0x148>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4640      	mov	r0, r8
 8004dca:	47d0      	blx	sl
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d0ad      	beq.n	8004d2c <_printf_i+0x15c>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	079b      	lsls	r3, r3, #30
 8004dd4:	d413      	bmi.n	8004dfe <_printf_i+0x22e>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	4298      	cmp	r0, r3
 8004ddc:	bfb8      	it	lt
 8004dde:	4618      	movlt	r0, r3
 8004de0:	e7a6      	b.n	8004d30 <_printf_i+0x160>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4632      	mov	r2, r6
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d09d      	beq.n	8004d2c <_printf_i+0x15c>
 8004df0:	3501      	adds	r5, #1
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	9903      	ldr	r1, [sp, #12]
 8004df6:	1a5b      	subs	r3, r3, r1
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dcf2      	bgt.n	8004de2 <_printf_i+0x212>
 8004dfc:	e7eb      	b.n	8004dd6 <_printf_i+0x206>
 8004dfe:	2500      	movs	r5, #0
 8004e00:	f104 0619 	add.w	r6, r4, #25
 8004e04:	e7f5      	b.n	8004df2 <_printf_i+0x222>
 8004e06:	bf00      	nop
 8004e08:	08004f79 	.word	0x08004f79
 8004e0c:	08004f8a 	.word	0x08004f8a

08004e10 <memmove>:
 8004e10:	4288      	cmp	r0, r1
 8004e12:	b510      	push	{r4, lr}
 8004e14:	eb01 0402 	add.w	r4, r1, r2
 8004e18:	d902      	bls.n	8004e20 <memmove+0x10>
 8004e1a:	4284      	cmp	r4, r0
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	d807      	bhi.n	8004e30 <memmove+0x20>
 8004e20:	1e43      	subs	r3, r0, #1
 8004e22:	42a1      	cmp	r1, r4
 8004e24:	d008      	beq.n	8004e38 <memmove+0x28>
 8004e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2e:	e7f8      	b.n	8004e22 <memmove+0x12>
 8004e30:	4402      	add	r2, r0
 8004e32:	4601      	mov	r1, r0
 8004e34:	428a      	cmp	r2, r1
 8004e36:	d100      	bne.n	8004e3a <memmove+0x2a>
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e42:	e7f7      	b.n	8004e34 <memmove+0x24>

08004e44 <_sbrk_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d06      	ldr	r5, [pc, #24]	@ (8004e60 <_sbrk_r+0x1c>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fb feee 	bl	8000c30 <_sbrk>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_sbrk_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_sbrk_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000258 	.word	0x20000258

08004e64 <memcpy>:
 8004e64:	440a      	add	r2, r1
 8004e66:	4291      	cmp	r1, r2
 8004e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	4770      	bx	lr
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d1f9      	bne.n	8004e72 <memcpy+0xe>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <_realloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	4680      	mov	r8, r0
 8004e86:	4615      	mov	r5, r2
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b921      	cbnz	r1, 8004e96 <_realloc_r+0x16>
 8004e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	4611      	mov	r1, r2
 8004e92:	f7ff bc4b 	b.w	800472c <_malloc_r>
 8004e96:	b92a      	cbnz	r2, 8004ea4 <_realloc_r+0x24>
 8004e98:	f7ff fbdc 	bl	8004654 <_free_r>
 8004e9c:	2400      	movs	r4, #0
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	f000 f81a 	bl	8004edc <_malloc_usable_size_r>
 8004ea8:	4285      	cmp	r5, r0
 8004eaa:	4606      	mov	r6, r0
 8004eac:	d802      	bhi.n	8004eb4 <_realloc_r+0x34>
 8004eae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eb2:	d8f4      	bhi.n	8004e9e <_realloc_r+0x1e>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fc38 	bl	800472c <_malloc_r>
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d0ec      	beq.n	8004e9c <_realloc_r+0x1c>
 8004ec2:	42b5      	cmp	r5, r6
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	bf28      	it	cs
 8004eca:	4632      	movcs	r2, r6
 8004ecc:	f7ff ffca 	bl	8004e64 <memcpy>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7ff fbbe 	bl	8004654 <_free_r>
 8004ed8:	463c      	mov	r4, r7
 8004eda:	e7e0      	b.n	8004e9e <_realloc_r+0x1e>

08004edc <_malloc_usable_size_r>:
 8004edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee0:	1f18      	subs	r0, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bfbc      	itt	lt
 8004ee6:	580b      	ldrlt	r3, [r1, r0]
 8004ee8:	18c0      	addlt	r0, r0, r3
 8004eea:	4770      	bx	lr

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	bf00      	nop
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
