
Basic_Timer_100ms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001608  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080017cc  080017cc  000027cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d4  080017d4  00003068  2**0
                  CONTENTS
  4 .ARM          00000000  080017d4  080017d4  00003068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017d4  080017d4  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017d8  080017d8  000027d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080017dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08001844  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001844  00003220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d5d  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001148  00000000  00000000  00009df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  0000b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222d2  00000000  00000000  0000bd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b77  00000000  00000000  0002dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf52d  00000000  00000000  00036b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010609c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  001060e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00108760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080017b4 	.word	0x080017b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080017b4 	.word	0x080017b4

08000204 <SysTick_Handler>:

#include "main_1.h"

void SysTick_Handler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000208:	f000 f9ea 	bl	80005e0 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 800020c:	f000 fb0d 	bl	800082a <HAL_SYSTICK_Callback>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <main>:
void GPIO_init(void);

TIM_HandleTypeDef timer6;

int main()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_Init();
 8000218:	f000 f990 	bl	800053c <HAL_Init>

	SystemClockConfig();
 800021c:	f000 f81c 	bl	8000258 <SystemClockConfig>
	Timer_init();
 8000220:	f000 f822 	bl	8000268 <Timer_init>
	GPIO_init();
 8000224:	f000 f83a 	bl	800029c <GPIO_init>

	//Start the Timer
	HAL_TIM_Base_Start(&timer6);
 8000228:	4808      	ldr	r0, [pc, #32]	@ (800024c <main+0x38>)
 800022a:	f000 fd03 	bl	8000c34 <HAL_TIM_Base_Start>

	while(1)
	{
		//Loop until the timer Update flag is set
		while(!(TIM6->SR & TIM_SR_UIF));
 800022e:	bf00      	nop
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <main+0x3c>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x1c>
		/*
		 * After the required time delay has been elapsed
		 * User code can be executed
		 * Also Make the timer6 period to zero*/
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800023c:	2120      	movs	r1, #32
 800023e:	4805      	ldr	r0, [pc, #20]	@ (8000254 <main+0x40>)
 8000240:	f000 fc8e 	bl	8000b60 <HAL_GPIO_TogglePin>
		TIM6->SR = 0;
 8000244:	4b02      	ldr	r3, [pc, #8]	@ (8000250 <main+0x3c>)
 8000246:	2200      	movs	r2, #0
 8000248:	611a      	str	r2, [r3, #16]
		while(!(TIM6->SR & TIM_SR_UIF));
 800024a:	e7f0      	b.n	800022e <main+0x1a>
 800024c:	20000084 	.word	0x20000084
 8000250:	40001000 	.word	0x40001000
 8000254:	40020000 	.word	0x40020000

08000258 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <Timer_init>:

void Timer_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	timer6.Instance = TIM6;
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <Timer_init+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <Timer_init+0x30>)
 8000270:	601a      	str	r2, [r3, #0]
	timer6.Init.Prescaler = PRESCALAR;
 8000272:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <Timer_init+0x2c>)
 8000274:	2218      	movs	r2, #24
 8000276:	605a      	str	r2, [r3, #4]
	timer6.Init.Period = PERIOD;
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <Timer_init+0x2c>)
 800027a:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800027e:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&timer6) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <Timer_init+0x2c>)
 8000282:	f000 fc87 	bl	8000b94 <HAL_TIM_Base_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <Timer_init+0x28>
	{
		error_handler();
 800028c:	f000 f82a 	bl	80002e4 <error_handler>
	}
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000084 	.word	0x20000084
 8000298:	40001000 	.word	0x40001000

0800029c <GPIO_init>:

void GPIO_init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	4b0d      	ldr	r3, [pc, #52]	@ (80002dc <GPIO_init+0x40>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002aa:	4a0c      	ldr	r2, [pc, #48]	@ (80002dc <GPIO_init+0x40>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <GPIO_init+0x40>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]

	gpio.Pin = GPIO_PIN_5;
 80002be:	2320      	movs	r3, #32
 80002c0:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpio);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <GPIO_init+0x44>)
 80002d0:	f000 fab2 	bl	8000838 <HAL_GPIO_Init>
}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000

080002e4 <error_handler>:

void error_handler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	printf("Failed\n");
 80002e8:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <error_handler+0x10>)
 80002ea:	f000 fecf 	bl	800108c <puts>
	while(1);
 80002ee:	bf00      	nop
 80002f0:	e7fd      	b.n	80002ee <error_handler+0xa>
 80002f2:	bf00      	nop
 80002f4:	080017cc 	.word	0x080017cc

080002f8 <HAL_MspInit>:


#include "main_1.h"

void HAL_MspInit(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002fc:	2003      	movs	r0, #3
 80002fe:	f000 fa53 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 8000302:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <HAL_MspInit+0x40>)
 8000304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000306:	4a0c      	ldr	r2, [pc, #48]	@ (8000338 <HAL_MspInit+0x40>)
 8000308:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800030c:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 800030e:	2200      	movs	r2, #0
 8000310:	2100      	movs	r1, #0
 8000312:	f06f 000b 	mvn.w	r0, #11
 8000316:	f000 fa52 	bl	80007be <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	f06f 000a 	mvn.w	r0, #10
 8000322:	f000 fa4c 	bl	80007be <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	f06f 0009 	mvn.w	r0, #9
 800032e:	f000 fa46 	bl	80007be <HAL_NVIC_SetPriority>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	//Enable the clock for TIM6 Peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <HAL_TIM_Base_MspInit+0x3c>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034c:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <HAL_TIM_Base_MspInit+0x3c>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6413      	str	r3, [r2, #64]	@ 0x40
 8000354:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <HAL_TIM_Base_MspInit+0x3c>)
 8000356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000358:	f003 0310 	and.w	r3, r3, #16
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
	//Enable IRQ for TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000360:	2036      	movs	r0, #54	@ 0x36
 8000362:	f000 fa48 	bl	80007f6 <HAL_NVIC_EnableIRQ>
	//Setup Priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	210f      	movs	r1, #15
 800036a:	2036      	movs	r0, #54	@ 0x36
 800036c:	f000 fa27 	bl	80007be <HAL_NVIC_SetPriority>
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800

0800037c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e00a      	b.n	80003a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038e:	f3af 8000 	nop.w
 8000392:	4601      	mov	r1, r0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf0      	blt.n	800038e <_read+0x12>
  }

  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e009      	b.n	80003dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	60ba      	str	r2, [r7, #8]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf1      	blt.n	80003c8 <_write+0x12>
  }
  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_close>:

int _close(int file)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000416:	605a      	str	r2, [r3, #4]
  return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <_isatty>:

int _isatty(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000460:	4a14      	ldr	r2, [pc, #80]	@ (80004b4 <_sbrk+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <_sbrk+0x60>)
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800046c:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <_sbrk+0x64>)
 8000476:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <_sbrk+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d207      	bcs.n	8000498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000488:	f000 ff2e 	bl	80012e8 <__errno>
 800048c:	4603      	mov	r3, r0
 800048e:	220c      	movs	r2, #12
 8000490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	e009      	b.n	80004ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049e:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <_sbrk+0x64>)
 80004a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20020000 	.word	0x20020000
 80004b8:	00000400 	.word	0x00000400
 80004bc:	200000cc 	.word	0x200000cc
 80004c0:	20000220 	.word	0x20000220

080004c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 feed 	bl	80012f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051a:	f7ff fe7b 	bl	8000214 <main>
  bx  lr    
 800051e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800052c:	080017dc 	.word	0x080017dc
  ldr r2, =_sbss
 8000530:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000534:	20000220 	.word	0x20000220

08000538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <HAL_Init+0x40>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <HAL_Init+0x40>)
 8000546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <HAL_Init+0x40>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <HAL_Init+0x40>)
 8000552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <HAL_Init+0x40>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	@ (800057c <HAL_Init+0x40>)
 800055e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f91f 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f808 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000570:	f7ff fec2 	bl	80002f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40023c00 	.word	0x40023c00

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_InitTick+0x54>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <HAL_InitTick+0x58>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000596:	fbb3 f3f1 	udiv	r3, r3, r1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f937 	bl	8000812 <HAL_SYSTICK_Config>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00e      	b.n	80005cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d80a      	bhi.n	80005ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f8ff 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <HAL_InitTick+0x5c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <HAL_IncTick+0x20>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_IncTick+0x24>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <HAL_IncTick+0x24>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008
 8000604:	200000d0 	.word	0x200000d0

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	@ (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	@ (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	@ 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff29 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff3e 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff31 	bl	800066c <__NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa2 	bl	8000764 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	@ 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	e165      	b.n	8000b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000854:	2201      	movs	r2, #1
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	429a      	cmp	r2, r3
 800086e:	f040 8154 	bne.w	8000b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	2b01      	cmp	r3, #1
 800087c:	d005      	beq.n	800088a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000886:	2b02      	cmp	r3, #2
 8000888:	d130      	bne.n	80008ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d017      	beq.n	8000928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4013      	ands	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d123      	bne.n	800097c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	220f      	movs	r2, #15
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	69b9      	ldr	r1, [r7, #24]
 8000978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0203 	and.w	r2, r3, #3
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f000 80ae 	beq.w	8000b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b38 <HAL_GPIO_Init+0x300>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a5c      	ldr	r2, [pc, #368]	@ (8000b38 <HAL_GPIO_Init+0x300>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000b38 <HAL_GPIO_Init+0x300>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009da:	4a58      	ldr	r2, [pc, #352]	@ (8000b3c <HAL_GPIO_Init+0x304>)
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4f      	ldr	r2, [pc, #316]	@ (8000b40 <HAL_GPIO_Init+0x308>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d025      	beq.n	8000a52 <HAL_GPIO_Init+0x21a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4e      	ldr	r2, [pc, #312]	@ (8000b44 <HAL_GPIO_Init+0x30c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01f      	beq.n	8000a4e <HAL_GPIO_Init+0x216>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	@ (8000b48 <HAL_GPIO_Init+0x310>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x212>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4c      	ldr	r2, [pc, #304]	@ (8000b4c <HAL_GPIO_Init+0x314>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x20e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4b      	ldr	r2, [pc, #300]	@ (8000b50 <HAL_GPIO_Init+0x318>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x20a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4a      	ldr	r2, [pc, #296]	@ (8000b54 <HAL_GPIO_Init+0x31c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x206>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a49      	ldr	r2, [pc, #292]	@ (8000b58 <HAL_GPIO_Init+0x320>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x202>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x21c>
 8000a52:	2300      	movs	r3, #0
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a64:	4935      	ldr	r1, [pc, #212]	@ (8000b3c <HAL_GPIO_Init+0x304>)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a96:	4a31      	ldr	r2, [pc, #196]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac0:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b14:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <HAL_GPIO_Init+0x324>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	f67f ae96 	bls.w	8000854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40013c00 	.word	0x40013c00

08000b60 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e041      	b.n	8000c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d106      	bne.n	8000bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fbbe 	bl	800033c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f000 f896 	bl	8000d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d001      	beq.n	8000c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e046      	b.n	8000cda <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <HAL_TIM_Base_Start+0xb4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d022      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c66:	d01d      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cec <HAL_TIM_Base_Start+0xb8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d018      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <HAL_TIM_Base_Start+0xbc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <HAL_TIM_Base_Start+0xc0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d00e      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <HAL_TIM_Base_Start+0xc4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d009      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <HAL_TIM_Base_Start+0xc8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d004      	beq.n	8000ca4 <HAL_TIM_Base_Start+0x70>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_TIM_Base_Start+0xcc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d111      	bne.n	8000cc8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d010      	beq.n	8000cd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0201 	orr.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cc6:	e007      	b.n	8000cd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	40000800 	.word	0x40000800
 8000cf4:	40000c00 	.word	0x40000c00
 8000cf8:	40010400 	.word	0x40010400
 8000cfc:	40014000 	.word	0x40014000
 8000d00:	40001800 	.word	0x40001800

08000d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a46      	ldr	r2, [pc, #280]	@ (8000e30 <TIM_Base_SetConfig+0x12c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d013      	beq.n	8000d44 <TIM_Base_SetConfig+0x40>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d22:	d00f      	beq.n	8000d44 <TIM_Base_SetConfig+0x40>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a43      	ldr	r2, [pc, #268]	@ (8000e34 <TIM_Base_SetConfig+0x130>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00b      	beq.n	8000d44 <TIM_Base_SetConfig+0x40>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a42      	ldr	r2, [pc, #264]	@ (8000e38 <TIM_Base_SetConfig+0x134>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <TIM_Base_SetConfig+0x40>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a41      	ldr	r2, [pc, #260]	@ (8000e3c <TIM_Base_SetConfig+0x138>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d003      	beq.n	8000d44 <TIM_Base_SetConfig+0x40>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a40      	ldr	r2, [pc, #256]	@ (8000e40 <TIM_Base_SetConfig+0x13c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d108      	bne.n	8000d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a35      	ldr	r2, [pc, #212]	@ (8000e30 <TIM_Base_SetConfig+0x12c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d64:	d027      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a32      	ldr	r2, [pc, #200]	@ (8000e34 <TIM_Base_SetConfig+0x130>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d023      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a31      	ldr	r2, [pc, #196]	@ (8000e38 <TIM_Base_SetConfig+0x134>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01f      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a30      	ldr	r2, [pc, #192]	@ (8000e3c <TIM_Base_SetConfig+0x138>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01b      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <TIM_Base_SetConfig+0x13c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d017      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a2e      	ldr	r2, [pc, #184]	@ (8000e44 <TIM_Base_SetConfig+0x140>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a2d      	ldr	r2, [pc, #180]	@ (8000e48 <TIM_Base_SetConfig+0x144>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00f      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <TIM_Base_SetConfig+0x148>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00b      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <TIM_Base_SetConfig+0x14c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e54 <TIM_Base_SetConfig+0x150>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d003      	beq.n	8000db6 <TIM_Base_SetConfig+0xb2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <TIM_Base_SetConfig+0x154>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d108      	bne.n	8000dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <TIM_Base_SetConfig+0x12c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d003      	beq.n	8000dfc <TIM_Base_SetConfig+0xf8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <TIM_Base_SetConfig+0x13c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d103      	bne.n	8000e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d105      	bne.n	8000e22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	f023 0201 	bic.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
  }
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40000400 	.word	0x40000400
 8000e38:	40000800 	.word	0x40000800
 8000e3c:	40000c00 	.word	0x40000c00
 8000e40:	40010400 	.word	0x40010400
 8000e44:	40014000 	.word	0x40014000
 8000e48:	40014400 	.word	0x40014400
 8000e4c:	40014800 	.word	0x40014800
 8000e50:	40001800 	.word	0x40001800
 8000e54:	40001c00 	.word	0x40001c00
 8000e58:	40002000 	.word	0x40002000

08000e5c <std>:
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	b510      	push	{r4, lr}
 8000e60:	4604      	mov	r4, r0
 8000e62:	e9c0 3300 	strd	r3, r3, [r0]
 8000e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e6a:	6083      	str	r3, [r0, #8]
 8000e6c:	8181      	strh	r1, [r0, #12]
 8000e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e70:	81c2      	strh	r2, [r0, #14]
 8000e72:	6183      	str	r3, [r0, #24]
 8000e74:	4619      	mov	r1, r3
 8000e76:	2208      	movs	r2, #8
 8000e78:	305c      	adds	r0, #92	@ 0x5c
 8000e7a:	f000 f9e7 	bl	800124c <memset>
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <std+0x58>)
 8000e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <std+0x5c>)
 8000e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <std+0x60>)
 8000e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <std+0x64>)
 8000e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <std+0x68>)
 8000e90:	6224      	str	r4, [r4, #32]
 8000e92:	429c      	cmp	r4, r3
 8000e94:	d006      	beq.n	8000ea4 <std+0x48>
 8000e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e9a:	4294      	cmp	r4, r2
 8000e9c:	d002      	beq.n	8000ea4 <std+0x48>
 8000e9e:	33d0      	adds	r3, #208	@ 0xd0
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	d105      	bne.n	8000eb0 <std+0x54>
 8000ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eac:	f000 ba46 	b.w	800133c <__retarget_lock_init_recursive>
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	bf00      	nop
 8000eb4:	0800109d 	.word	0x0800109d
 8000eb8:	080010bf 	.word	0x080010bf
 8000ebc:	080010f7 	.word	0x080010f7
 8000ec0:	0800111b 	.word	0x0800111b
 8000ec4:	200000d4 	.word	0x200000d4

08000ec8 <stdio_exit_handler>:
 8000ec8:	4a02      	ldr	r2, [pc, #8]	@ (8000ed4 <stdio_exit_handler+0xc>)
 8000eca:	4903      	ldr	r1, [pc, #12]	@ (8000ed8 <stdio_exit_handler+0x10>)
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <stdio_exit_handler+0x14>)
 8000ece:	f000 b869 	b.w	8000fa4 <_fwalk_sglue>
 8000ed2:	bf00      	nop
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	0800163d 	.word	0x0800163d
 8000edc:	2000001c 	.word	0x2000001c

08000ee0 <cleanup_stdio>:
 8000ee0:	6841      	ldr	r1, [r0, #4]
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <cleanup_stdio+0x34>)
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	b510      	push	{r4, lr}
 8000ee8:	4604      	mov	r4, r0
 8000eea:	d001      	beq.n	8000ef0 <cleanup_stdio+0x10>
 8000eec:	f000 fba6 	bl	800163c <_fflush_r>
 8000ef0:	68a1      	ldr	r1, [r4, #8]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <cleanup_stdio+0x38>)
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d002      	beq.n	8000efe <cleanup_stdio+0x1e>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 fb9f 	bl	800163c <_fflush_r>
 8000efe:	68e1      	ldr	r1, [r4, #12]
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <cleanup_stdio+0x3c>)
 8000f02:	4299      	cmp	r1, r3
 8000f04:	d004      	beq.n	8000f10 <cleanup_stdio+0x30>
 8000f06:	4620      	mov	r0, r4
 8000f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f0c:	f000 bb96 	b.w	800163c <_fflush_r>
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	bf00      	nop
 8000f14:	200000d4 	.word	0x200000d4
 8000f18:	2000013c 	.word	0x2000013c
 8000f1c:	200001a4 	.word	0x200001a4

08000f20 <global_stdio_init.part.0>:
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <global_stdio_init.part.0+0x30>)
 8000f24:	4c0b      	ldr	r4, [pc, #44]	@ (8000f54 <global_stdio_init.part.0+0x34>)
 8000f26:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <global_stdio_init.part.0+0x38>)
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2104      	movs	r1, #4
 8000f30:	f7ff ff94 	bl	8000e5c <std>
 8000f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2109      	movs	r1, #9
 8000f3c:	f7ff ff8e 	bl	8000e5c <std>
 8000f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f44:	2202      	movs	r2, #2
 8000f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f4a:	2112      	movs	r1, #18
 8000f4c:	f7ff bf86 	b.w	8000e5c <std>
 8000f50:	2000020c 	.word	0x2000020c
 8000f54:	200000d4 	.word	0x200000d4
 8000f58:	08000ec9 	.word	0x08000ec9

08000f5c <__sfp_lock_acquire>:
 8000f5c:	4801      	ldr	r0, [pc, #4]	@ (8000f64 <__sfp_lock_acquire+0x8>)
 8000f5e:	f000 b9ee 	b.w	800133e <__retarget_lock_acquire_recursive>
 8000f62:	bf00      	nop
 8000f64:	20000215 	.word	0x20000215

08000f68 <__sfp_lock_release>:
 8000f68:	4801      	ldr	r0, [pc, #4]	@ (8000f70 <__sfp_lock_release+0x8>)
 8000f6a:	f000 b9e9 	b.w	8001340 <__retarget_lock_release_recursive>
 8000f6e:	bf00      	nop
 8000f70:	20000215 	.word	0x20000215

08000f74 <__sinit>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	f7ff fff0 	bl	8000f5c <__sfp_lock_acquire>
 8000f7c:	6a23      	ldr	r3, [r4, #32]
 8000f7e:	b11b      	cbz	r3, 8000f88 <__sinit+0x14>
 8000f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f84:	f7ff bff0 	b.w	8000f68 <__sfp_lock_release>
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__sinit+0x28>)
 8000f8a:	6223      	str	r3, [r4, #32]
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__sinit+0x2c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f5      	bne.n	8000f80 <__sinit+0xc>
 8000f94:	f7ff ffc4 	bl	8000f20 <global_stdio_init.part.0>
 8000f98:	e7f2      	b.n	8000f80 <__sinit+0xc>
 8000f9a:	bf00      	nop
 8000f9c:	08000ee1 	.word	0x08000ee1
 8000fa0:	2000020c 	.word	0x2000020c

08000fa4 <_fwalk_sglue>:
 8000fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa8:	4607      	mov	r7, r0
 8000faa:	4688      	mov	r8, r1
 8000fac:	4614      	mov	r4, r2
 8000fae:	2600      	movs	r6, #0
 8000fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8000fb8:	d505      	bpl.n	8000fc6 <_fwalk_sglue+0x22>
 8000fba:	6824      	ldr	r4, [r4, #0]
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d1f7      	bne.n	8000fb0 <_fwalk_sglue+0xc>
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc6:	89ab      	ldrh	r3, [r5, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d907      	bls.n	8000fdc <_fwalk_sglue+0x38>
 8000fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <_fwalk_sglue+0x38>
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	47c0      	blx	r8
 8000fda:	4306      	orrs	r6, r0
 8000fdc:	3568      	adds	r5, #104	@ 0x68
 8000fde:	e7e9      	b.n	8000fb4 <_fwalk_sglue+0x10>

08000fe0 <_puts_r>:
 8000fe0:	6a03      	ldr	r3, [r0, #32]
 8000fe2:	b570      	push	{r4, r5, r6, lr}
 8000fe4:	6884      	ldr	r4, [r0, #8]
 8000fe6:	4605      	mov	r5, r0
 8000fe8:	460e      	mov	r6, r1
 8000fea:	b90b      	cbnz	r3, 8000ff0 <_puts_r+0x10>
 8000fec:	f7ff ffc2 	bl	8000f74 <__sinit>
 8000ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ff2:	07db      	lsls	r3, r3, #31
 8000ff4:	d405      	bmi.n	8001002 <_puts_r+0x22>
 8000ff6:	89a3      	ldrh	r3, [r4, #12]
 8000ff8:	0598      	lsls	r0, r3, #22
 8000ffa:	d402      	bmi.n	8001002 <_puts_r+0x22>
 8000ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ffe:	f000 f99e 	bl	800133e <__retarget_lock_acquire_recursive>
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	0719      	lsls	r1, r3, #28
 8001006:	d502      	bpl.n	800100e <_puts_r+0x2e>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d135      	bne.n	800107a <_puts_r+0x9a>
 800100e:	4621      	mov	r1, r4
 8001010:	4628      	mov	r0, r5
 8001012:	f000 f8c5 	bl	80011a0 <__swsetup_r>
 8001016:	b380      	cbz	r0, 800107a <_puts_r+0x9a>
 8001018:	f04f 35ff 	mov.w	r5, #4294967295
 800101c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800101e:	07da      	lsls	r2, r3, #31
 8001020:	d405      	bmi.n	800102e <_puts_r+0x4e>
 8001022:	89a3      	ldrh	r3, [r4, #12]
 8001024:	059b      	lsls	r3, r3, #22
 8001026:	d402      	bmi.n	800102e <_puts_r+0x4e>
 8001028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800102a:	f000 f989 	bl	8001340 <__retarget_lock_release_recursive>
 800102e:	4628      	mov	r0, r5
 8001030:	bd70      	pop	{r4, r5, r6, pc}
 8001032:	2b00      	cmp	r3, #0
 8001034:	da04      	bge.n	8001040 <_puts_r+0x60>
 8001036:	69a2      	ldr	r2, [r4, #24]
 8001038:	429a      	cmp	r2, r3
 800103a:	dc17      	bgt.n	800106c <_puts_r+0x8c>
 800103c:	290a      	cmp	r1, #10
 800103e:	d015      	beq.n	800106c <_puts_r+0x8c>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	6022      	str	r2, [r4, #0]
 8001046:	7019      	strb	r1, [r3, #0]
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800104e:	3b01      	subs	r3, #1
 8001050:	60a3      	str	r3, [r4, #8]
 8001052:	2900      	cmp	r1, #0
 8001054:	d1ed      	bne.n	8001032 <_puts_r+0x52>
 8001056:	2b00      	cmp	r3, #0
 8001058:	da11      	bge.n	800107e <_puts_r+0x9e>
 800105a:	4622      	mov	r2, r4
 800105c:	210a      	movs	r1, #10
 800105e:	4628      	mov	r0, r5
 8001060:	f000 f85f 	bl	8001122 <__swbuf_r>
 8001064:	3001      	adds	r0, #1
 8001066:	d0d7      	beq.n	8001018 <_puts_r+0x38>
 8001068:	250a      	movs	r5, #10
 800106a:	e7d7      	b.n	800101c <_puts_r+0x3c>
 800106c:	4622      	mov	r2, r4
 800106e:	4628      	mov	r0, r5
 8001070:	f000 f857 	bl	8001122 <__swbuf_r>
 8001074:	3001      	adds	r0, #1
 8001076:	d1e7      	bne.n	8001048 <_puts_r+0x68>
 8001078:	e7ce      	b.n	8001018 <_puts_r+0x38>
 800107a:	3e01      	subs	r6, #1
 800107c:	e7e4      	b.n	8001048 <_puts_r+0x68>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	6022      	str	r2, [r4, #0]
 8001084:	220a      	movs	r2, #10
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e7ee      	b.n	8001068 <_puts_r+0x88>
	...

0800108c <puts>:
 800108c:	4b02      	ldr	r3, [pc, #8]	@ (8001098 <puts+0xc>)
 800108e:	4601      	mov	r1, r0
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f7ff bfa5 	b.w	8000fe0 <_puts_r>
 8001096:	bf00      	nop
 8001098:	20000018 	.word	0x20000018

0800109c <__sread>:
 800109c:	b510      	push	{r4, lr}
 800109e:	460c      	mov	r4, r1
 80010a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a4:	f000 f8fc 	bl	80012a0 <_read_r>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	bfab      	itete	ge
 80010ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010ae:	89a3      	ldrhlt	r3, [r4, #12]
 80010b0:	181b      	addge	r3, r3, r0
 80010b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010b6:	bfac      	ite	ge
 80010b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010ba:	81a3      	strhlt	r3, [r4, #12]
 80010bc:	bd10      	pop	{r4, pc}

080010be <__swrite>:
 80010be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c2:	461f      	mov	r7, r3
 80010c4:	898b      	ldrh	r3, [r1, #12]
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	4605      	mov	r5, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4616      	mov	r6, r2
 80010ce:	d505      	bpl.n	80010dc <__swrite+0x1e>
 80010d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d4:	2302      	movs	r3, #2
 80010d6:	2200      	movs	r2, #0
 80010d8:	f000 f8d0 	bl	800127c <_lseek_r>
 80010dc:	89a3      	ldrh	r3, [r4, #12]
 80010de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010e6:	81a3      	strh	r3, [r4, #12]
 80010e8:	4632      	mov	r2, r6
 80010ea:	463b      	mov	r3, r7
 80010ec:	4628      	mov	r0, r5
 80010ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010f2:	f000 b8e7 	b.w	80012c4 <_write_r>

080010f6 <__sseek>:
 80010f6:	b510      	push	{r4, lr}
 80010f8:	460c      	mov	r4, r1
 80010fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fe:	f000 f8bd 	bl	800127c <_lseek_r>
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	89a3      	ldrh	r3, [r4, #12]
 8001106:	bf15      	itete	ne
 8001108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800110a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800110e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001112:	81a3      	strheq	r3, [r4, #12]
 8001114:	bf18      	it	ne
 8001116:	81a3      	strhne	r3, [r4, #12]
 8001118:	bd10      	pop	{r4, pc}

0800111a <__sclose>:
 800111a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800111e:	f000 b89d 	b.w	800125c <_close_r>

08001122 <__swbuf_r>:
 8001122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001124:	460e      	mov	r6, r1
 8001126:	4614      	mov	r4, r2
 8001128:	4605      	mov	r5, r0
 800112a:	b118      	cbz	r0, 8001134 <__swbuf_r+0x12>
 800112c:	6a03      	ldr	r3, [r0, #32]
 800112e:	b90b      	cbnz	r3, 8001134 <__swbuf_r+0x12>
 8001130:	f7ff ff20 	bl	8000f74 <__sinit>
 8001134:	69a3      	ldr	r3, [r4, #24]
 8001136:	60a3      	str	r3, [r4, #8]
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	071a      	lsls	r2, r3, #28
 800113c:	d501      	bpl.n	8001142 <__swbuf_r+0x20>
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	b943      	cbnz	r3, 8001154 <__swbuf_r+0x32>
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 f82b 	bl	80011a0 <__swsetup_r>
 800114a:	b118      	cbz	r0, 8001154 <__swbuf_r+0x32>
 800114c:	f04f 37ff 	mov.w	r7, #4294967295
 8001150:	4638      	mov	r0, r7
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	6922      	ldr	r2, [r4, #16]
 8001158:	1a98      	subs	r0, r3, r2
 800115a:	6963      	ldr	r3, [r4, #20]
 800115c:	b2f6      	uxtb	r6, r6
 800115e:	4283      	cmp	r3, r0
 8001160:	4637      	mov	r7, r6
 8001162:	dc05      	bgt.n	8001170 <__swbuf_r+0x4e>
 8001164:	4621      	mov	r1, r4
 8001166:	4628      	mov	r0, r5
 8001168:	f000 fa68 	bl	800163c <_fflush_r>
 800116c:	2800      	cmp	r0, #0
 800116e:	d1ed      	bne.n	800114c <__swbuf_r+0x2a>
 8001170:	68a3      	ldr	r3, [r4, #8]
 8001172:	3b01      	subs	r3, #1
 8001174:	60a3      	str	r3, [r4, #8]
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	6022      	str	r2, [r4, #0]
 800117c:	701e      	strb	r6, [r3, #0]
 800117e:	6962      	ldr	r2, [r4, #20]
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	429a      	cmp	r2, r3
 8001184:	d004      	beq.n	8001190 <__swbuf_r+0x6e>
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	07db      	lsls	r3, r3, #31
 800118a:	d5e1      	bpl.n	8001150 <__swbuf_r+0x2e>
 800118c:	2e0a      	cmp	r6, #10
 800118e:	d1df      	bne.n	8001150 <__swbuf_r+0x2e>
 8001190:	4621      	mov	r1, r4
 8001192:	4628      	mov	r0, r5
 8001194:	f000 fa52 	bl	800163c <_fflush_r>
 8001198:	2800      	cmp	r0, #0
 800119a:	d0d9      	beq.n	8001150 <__swbuf_r+0x2e>
 800119c:	e7d6      	b.n	800114c <__swbuf_r+0x2a>
	...

080011a0 <__swsetup_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <__swsetup_r+0xa8>)
 80011a4:	4605      	mov	r5, r0
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	460c      	mov	r4, r1
 80011aa:	b118      	cbz	r0, 80011b4 <__swsetup_r+0x14>
 80011ac:	6a03      	ldr	r3, [r0, #32]
 80011ae:	b90b      	cbnz	r3, 80011b4 <__swsetup_r+0x14>
 80011b0:	f7ff fee0 	bl	8000f74 <__sinit>
 80011b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011b8:	0719      	lsls	r1, r3, #28
 80011ba:	d422      	bmi.n	8001202 <__swsetup_r+0x62>
 80011bc:	06da      	lsls	r2, r3, #27
 80011be:	d407      	bmi.n	80011d0 <__swsetup_r+0x30>
 80011c0:	2209      	movs	r2, #9
 80011c2:	602a      	str	r2, [r5, #0]
 80011c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c8:	81a3      	strh	r3, [r4, #12]
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	e033      	b.n	8001238 <__swsetup_r+0x98>
 80011d0:	0758      	lsls	r0, r3, #29
 80011d2:	d512      	bpl.n	80011fa <__swsetup_r+0x5a>
 80011d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011d6:	b141      	cbz	r1, 80011ea <__swsetup_r+0x4a>
 80011d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011dc:	4299      	cmp	r1, r3
 80011de:	d002      	beq.n	80011e6 <__swsetup_r+0x46>
 80011e0:	4628      	mov	r0, r5
 80011e2:	f000 f8af 	bl	8001344 <_free_r>
 80011e6:	2300      	movs	r3, #0
 80011e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011f0:	81a3      	strh	r3, [r4, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	6063      	str	r3, [r4, #4]
 80011f6:	6923      	ldr	r3, [r4, #16]
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	81a3      	strh	r3, [r4, #12]
 8001202:	6923      	ldr	r3, [r4, #16]
 8001204:	b94b      	cbnz	r3, 800121a <__swsetup_r+0x7a>
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800120c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001210:	d003      	beq.n	800121a <__swsetup_r+0x7a>
 8001212:	4621      	mov	r1, r4
 8001214:	4628      	mov	r0, r5
 8001216:	f000 fa5f 	bl	80016d8 <__smakebuf_r>
 800121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800121e:	f013 0201 	ands.w	r2, r3, #1
 8001222:	d00a      	beq.n	800123a <__swsetup_r+0x9a>
 8001224:	2200      	movs	r2, #0
 8001226:	60a2      	str	r2, [r4, #8]
 8001228:	6962      	ldr	r2, [r4, #20]
 800122a:	4252      	negs	r2, r2
 800122c:	61a2      	str	r2, [r4, #24]
 800122e:	6922      	ldr	r2, [r4, #16]
 8001230:	b942      	cbnz	r2, 8001244 <__swsetup_r+0xa4>
 8001232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001236:	d1c5      	bne.n	80011c4 <__swsetup_r+0x24>
 8001238:	bd38      	pop	{r3, r4, r5, pc}
 800123a:	0799      	lsls	r1, r3, #30
 800123c:	bf58      	it	pl
 800123e:	6962      	ldrpl	r2, [r4, #20]
 8001240:	60a2      	str	r2, [r4, #8]
 8001242:	e7f4      	b.n	800122e <__swsetup_r+0x8e>
 8001244:	2000      	movs	r0, #0
 8001246:	e7f7      	b.n	8001238 <__swsetup_r+0x98>
 8001248:	20000018 	.word	0x20000018

0800124c <memset>:
 800124c:	4402      	add	r2, r0
 800124e:	4603      	mov	r3, r0
 8001250:	4293      	cmp	r3, r2
 8001252:	d100      	bne.n	8001256 <memset+0xa>
 8001254:	4770      	bx	lr
 8001256:	f803 1b01 	strb.w	r1, [r3], #1
 800125a:	e7f9      	b.n	8001250 <memset+0x4>

0800125c <_close_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d06      	ldr	r5, [pc, #24]	@ (8001278 <_close_r+0x1c>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f7ff f8c1 	bl	80003ee <_close>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_close_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_close_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	20000210 	.word	0x20000210

0800127c <_lseek_r>:
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4d07      	ldr	r5, [pc, #28]	@ (800129c <_lseek_r+0x20>)
 8001280:	4604      	mov	r4, r0
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	2200      	movs	r2, #0
 8001288:	602a      	str	r2, [r5, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f7ff f8d6 	bl	800043c <_lseek>
 8001290:	1c43      	adds	r3, r0, #1
 8001292:	d102      	bne.n	800129a <_lseek_r+0x1e>
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	b103      	cbz	r3, 800129a <_lseek_r+0x1e>
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	20000210 	.word	0x20000210

080012a0 <_read_r>:
 80012a0:	b538      	push	{r3, r4, r5, lr}
 80012a2:	4d07      	ldr	r5, [pc, #28]	@ (80012c0 <_read_r+0x20>)
 80012a4:	4604      	mov	r4, r0
 80012a6:	4608      	mov	r0, r1
 80012a8:	4611      	mov	r1, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	602a      	str	r2, [r5, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	f7ff f864 	bl	800037c <_read>
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	d102      	bne.n	80012be <_read_r+0x1e>
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	b103      	cbz	r3, 80012be <_read_r+0x1e>
 80012bc:	6023      	str	r3, [r4, #0]
 80012be:	bd38      	pop	{r3, r4, r5, pc}
 80012c0:	20000210 	.word	0x20000210

080012c4 <_write_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4d07      	ldr	r5, [pc, #28]	@ (80012e4 <_write_r+0x20>)
 80012c8:	4604      	mov	r4, r0
 80012ca:	4608      	mov	r0, r1
 80012cc:	4611      	mov	r1, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	602a      	str	r2, [r5, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	f7ff f86f 	bl	80003b6 <_write>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_write_r+0x1e>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_write_r+0x1e>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	20000210 	.word	0x20000210

080012e8 <__errno>:
 80012e8:	4b01      	ldr	r3, [pc, #4]	@ (80012f0 <__errno+0x8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000018 	.word	0x20000018

080012f4 <__libc_init_array>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	4d0d      	ldr	r5, [pc, #52]	@ (800132c <__libc_init_array+0x38>)
 80012f8:	4c0d      	ldr	r4, [pc, #52]	@ (8001330 <__libc_init_array+0x3c>)
 80012fa:	1b64      	subs	r4, r4, r5
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	2600      	movs	r6, #0
 8001300:	42a6      	cmp	r6, r4
 8001302:	d109      	bne.n	8001318 <__libc_init_array+0x24>
 8001304:	4d0b      	ldr	r5, [pc, #44]	@ (8001334 <__libc_init_array+0x40>)
 8001306:	4c0c      	ldr	r4, [pc, #48]	@ (8001338 <__libc_init_array+0x44>)
 8001308:	f000 fa54 	bl	80017b4 <_init>
 800130c:	1b64      	subs	r4, r4, r5
 800130e:	10a4      	asrs	r4, r4, #2
 8001310:	2600      	movs	r6, #0
 8001312:	42a6      	cmp	r6, r4
 8001314:	d105      	bne.n	8001322 <__libc_init_array+0x2e>
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	f855 3b04 	ldr.w	r3, [r5], #4
 800131c:	4798      	blx	r3
 800131e:	3601      	adds	r6, #1
 8001320:	e7ee      	b.n	8001300 <__libc_init_array+0xc>
 8001322:	f855 3b04 	ldr.w	r3, [r5], #4
 8001326:	4798      	blx	r3
 8001328:	3601      	adds	r6, #1
 800132a:	e7f2      	b.n	8001312 <__libc_init_array+0x1e>
 800132c:	080017d4 	.word	0x080017d4
 8001330:	080017d4 	.word	0x080017d4
 8001334:	080017d4 	.word	0x080017d4
 8001338:	080017d8 	.word	0x080017d8

0800133c <__retarget_lock_init_recursive>:
 800133c:	4770      	bx	lr

0800133e <__retarget_lock_acquire_recursive>:
 800133e:	4770      	bx	lr

08001340 <__retarget_lock_release_recursive>:
 8001340:	4770      	bx	lr
	...

08001344 <_free_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4605      	mov	r5, r0
 8001348:	2900      	cmp	r1, #0
 800134a:	d041      	beq.n	80013d0 <_free_r+0x8c>
 800134c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001350:	1f0c      	subs	r4, r1, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	bfb8      	it	lt
 8001356:	18e4      	addlt	r4, r4, r3
 8001358:	f000 f8e0 	bl	800151c <__malloc_lock>
 800135c:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <_free_r+0x90>)
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	b933      	cbnz	r3, 8001370 <_free_r+0x2c>
 8001362:	6063      	str	r3, [r4, #4]
 8001364:	6014      	str	r4, [r2, #0]
 8001366:	4628      	mov	r0, r5
 8001368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800136c:	f000 b8dc 	b.w	8001528 <__malloc_unlock>
 8001370:	42a3      	cmp	r3, r4
 8001372:	d908      	bls.n	8001386 <_free_r+0x42>
 8001374:	6820      	ldr	r0, [r4, #0]
 8001376:	1821      	adds	r1, r4, r0
 8001378:	428b      	cmp	r3, r1
 800137a:	bf01      	itttt	eq
 800137c:	6819      	ldreq	r1, [r3, #0]
 800137e:	685b      	ldreq	r3, [r3, #4]
 8001380:	1809      	addeq	r1, r1, r0
 8001382:	6021      	streq	r1, [r4, #0]
 8001384:	e7ed      	b.n	8001362 <_free_r+0x1e>
 8001386:	461a      	mov	r2, r3
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	b10b      	cbz	r3, 8001390 <_free_r+0x4c>
 800138c:	42a3      	cmp	r3, r4
 800138e:	d9fa      	bls.n	8001386 <_free_r+0x42>
 8001390:	6811      	ldr	r1, [r2, #0]
 8001392:	1850      	adds	r0, r2, r1
 8001394:	42a0      	cmp	r0, r4
 8001396:	d10b      	bne.n	80013b0 <_free_r+0x6c>
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	4401      	add	r1, r0
 800139c:	1850      	adds	r0, r2, r1
 800139e:	4283      	cmp	r3, r0
 80013a0:	6011      	str	r1, [r2, #0]
 80013a2:	d1e0      	bne.n	8001366 <_free_r+0x22>
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	6053      	str	r3, [r2, #4]
 80013aa:	4408      	add	r0, r1
 80013ac:	6010      	str	r0, [r2, #0]
 80013ae:	e7da      	b.n	8001366 <_free_r+0x22>
 80013b0:	d902      	bls.n	80013b8 <_free_r+0x74>
 80013b2:	230c      	movs	r3, #12
 80013b4:	602b      	str	r3, [r5, #0]
 80013b6:	e7d6      	b.n	8001366 <_free_r+0x22>
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	1821      	adds	r1, r4, r0
 80013bc:	428b      	cmp	r3, r1
 80013be:	bf04      	itt	eq
 80013c0:	6819      	ldreq	r1, [r3, #0]
 80013c2:	685b      	ldreq	r3, [r3, #4]
 80013c4:	6063      	str	r3, [r4, #4]
 80013c6:	bf04      	itt	eq
 80013c8:	1809      	addeq	r1, r1, r0
 80013ca:	6021      	streq	r1, [r4, #0]
 80013cc:	6054      	str	r4, [r2, #4]
 80013ce:	e7ca      	b.n	8001366 <_free_r+0x22>
 80013d0:	bd38      	pop	{r3, r4, r5, pc}
 80013d2:	bf00      	nop
 80013d4:	2000021c 	.word	0x2000021c

080013d8 <sbrk_aligned>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	4e0f      	ldr	r6, [pc, #60]	@ (8001418 <sbrk_aligned+0x40>)
 80013dc:	460c      	mov	r4, r1
 80013de:	6831      	ldr	r1, [r6, #0]
 80013e0:	4605      	mov	r5, r0
 80013e2:	b911      	cbnz	r1, 80013ea <sbrk_aligned+0x12>
 80013e4:	f000 f9d6 	bl	8001794 <_sbrk_r>
 80013e8:	6030      	str	r0, [r6, #0]
 80013ea:	4621      	mov	r1, r4
 80013ec:	4628      	mov	r0, r5
 80013ee:	f000 f9d1 	bl	8001794 <_sbrk_r>
 80013f2:	1c43      	adds	r3, r0, #1
 80013f4:	d103      	bne.n	80013fe <sbrk_aligned+0x26>
 80013f6:	f04f 34ff 	mov.w	r4, #4294967295
 80013fa:	4620      	mov	r0, r4
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
 80013fe:	1cc4      	adds	r4, r0, #3
 8001400:	f024 0403 	bic.w	r4, r4, #3
 8001404:	42a0      	cmp	r0, r4
 8001406:	d0f8      	beq.n	80013fa <sbrk_aligned+0x22>
 8001408:	1a21      	subs	r1, r4, r0
 800140a:	4628      	mov	r0, r5
 800140c:	f000 f9c2 	bl	8001794 <_sbrk_r>
 8001410:	3001      	adds	r0, #1
 8001412:	d1f2      	bne.n	80013fa <sbrk_aligned+0x22>
 8001414:	e7ef      	b.n	80013f6 <sbrk_aligned+0x1e>
 8001416:	bf00      	nop
 8001418:	20000218 	.word	0x20000218

0800141c <_malloc_r>:
 800141c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001420:	1ccd      	adds	r5, r1, #3
 8001422:	f025 0503 	bic.w	r5, r5, #3
 8001426:	3508      	adds	r5, #8
 8001428:	2d0c      	cmp	r5, #12
 800142a:	bf38      	it	cc
 800142c:	250c      	movcc	r5, #12
 800142e:	2d00      	cmp	r5, #0
 8001430:	4606      	mov	r6, r0
 8001432:	db01      	blt.n	8001438 <_malloc_r+0x1c>
 8001434:	42a9      	cmp	r1, r5
 8001436:	d904      	bls.n	8001442 <_malloc_r+0x26>
 8001438:	230c      	movs	r3, #12
 800143a:	6033      	str	r3, [r6, #0]
 800143c:	2000      	movs	r0, #0
 800143e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001518 <_malloc_r+0xfc>
 8001446:	f000 f869 	bl	800151c <__malloc_lock>
 800144a:	f8d8 3000 	ldr.w	r3, [r8]
 800144e:	461c      	mov	r4, r3
 8001450:	bb44      	cbnz	r4, 80014a4 <_malloc_r+0x88>
 8001452:	4629      	mov	r1, r5
 8001454:	4630      	mov	r0, r6
 8001456:	f7ff ffbf 	bl	80013d8 <sbrk_aligned>
 800145a:	1c43      	adds	r3, r0, #1
 800145c:	4604      	mov	r4, r0
 800145e:	d158      	bne.n	8001512 <_malloc_r+0xf6>
 8001460:	f8d8 4000 	ldr.w	r4, [r8]
 8001464:	4627      	mov	r7, r4
 8001466:	2f00      	cmp	r7, #0
 8001468:	d143      	bne.n	80014f2 <_malloc_r+0xd6>
 800146a:	2c00      	cmp	r4, #0
 800146c:	d04b      	beq.n	8001506 <_malloc_r+0xea>
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	4639      	mov	r1, r7
 8001472:	4630      	mov	r0, r6
 8001474:	eb04 0903 	add.w	r9, r4, r3
 8001478:	f000 f98c 	bl	8001794 <_sbrk_r>
 800147c:	4581      	cmp	r9, r0
 800147e:	d142      	bne.n	8001506 <_malloc_r+0xea>
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	1a6d      	subs	r5, r5, r1
 8001484:	4629      	mov	r1, r5
 8001486:	4630      	mov	r0, r6
 8001488:	f7ff ffa6 	bl	80013d8 <sbrk_aligned>
 800148c:	3001      	adds	r0, #1
 800148e:	d03a      	beq.n	8001506 <_malloc_r+0xea>
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	442b      	add	r3, r5
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	f8d8 3000 	ldr.w	r3, [r8]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	bb62      	cbnz	r2, 80014f8 <_malloc_r+0xdc>
 800149e:	f8c8 7000 	str.w	r7, [r8]
 80014a2:	e00f      	b.n	80014c4 <_malloc_r+0xa8>
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	1b52      	subs	r2, r2, r5
 80014a8:	d420      	bmi.n	80014ec <_malloc_r+0xd0>
 80014aa:	2a0b      	cmp	r2, #11
 80014ac:	d917      	bls.n	80014de <_malloc_r+0xc2>
 80014ae:	1961      	adds	r1, r4, r5
 80014b0:	42a3      	cmp	r3, r4
 80014b2:	6025      	str	r5, [r4, #0]
 80014b4:	bf18      	it	ne
 80014b6:	6059      	strne	r1, [r3, #4]
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	bf08      	it	eq
 80014bc:	f8c8 1000 	streq.w	r1, [r8]
 80014c0:	5162      	str	r2, [r4, r5]
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 f82f 	bl	8001528 <__malloc_unlock>
 80014ca:	f104 000b 	add.w	r0, r4, #11
 80014ce:	1d23      	adds	r3, r4, #4
 80014d0:	f020 0007 	bic.w	r0, r0, #7
 80014d4:	1ac2      	subs	r2, r0, r3
 80014d6:	bf1c      	itt	ne
 80014d8:	1a1b      	subne	r3, r3, r0
 80014da:	50a3      	strne	r3, [r4, r2]
 80014dc:	e7af      	b.n	800143e <_malloc_r+0x22>
 80014de:	6862      	ldr	r2, [r4, #4]
 80014e0:	42a3      	cmp	r3, r4
 80014e2:	bf0c      	ite	eq
 80014e4:	f8c8 2000 	streq.w	r2, [r8]
 80014e8:	605a      	strne	r2, [r3, #4]
 80014ea:	e7eb      	b.n	80014c4 <_malloc_r+0xa8>
 80014ec:	4623      	mov	r3, r4
 80014ee:	6864      	ldr	r4, [r4, #4]
 80014f0:	e7ae      	b.n	8001450 <_malloc_r+0x34>
 80014f2:	463c      	mov	r4, r7
 80014f4:	687f      	ldr	r7, [r7, #4]
 80014f6:	e7b6      	b.n	8001466 <_malloc_r+0x4a>
 80014f8:	461a      	mov	r2, r3
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	42a3      	cmp	r3, r4
 80014fe:	d1fb      	bne.n	80014f8 <_malloc_r+0xdc>
 8001500:	2300      	movs	r3, #0
 8001502:	6053      	str	r3, [r2, #4]
 8001504:	e7de      	b.n	80014c4 <_malloc_r+0xa8>
 8001506:	230c      	movs	r3, #12
 8001508:	6033      	str	r3, [r6, #0]
 800150a:	4630      	mov	r0, r6
 800150c:	f000 f80c 	bl	8001528 <__malloc_unlock>
 8001510:	e794      	b.n	800143c <_malloc_r+0x20>
 8001512:	6005      	str	r5, [r0, #0]
 8001514:	e7d6      	b.n	80014c4 <_malloc_r+0xa8>
 8001516:	bf00      	nop
 8001518:	2000021c 	.word	0x2000021c

0800151c <__malloc_lock>:
 800151c:	4801      	ldr	r0, [pc, #4]	@ (8001524 <__malloc_lock+0x8>)
 800151e:	f7ff bf0e 	b.w	800133e <__retarget_lock_acquire_recursive>
 8001522:	bf00      	nop
 8001524:	20000214 	.word	0x20000214

08001528 <__malloc_unlock>:
 8001528:	4801      	ldr	r0, [pc, #4]	@ (8001530 <__malloc_unlock+0x8>)
 800152a:	f7ff bf09 	b.w	8001340 <__retarget_lock_release_recursive>
 800152e:	bf00      	nop
 8001530:	20000214 	.word	0x20000214

08001534 <__sflush_r>:
 8001534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	0716      	lsls	r6, r2, #28
 800153e:	4605      	mov	r5, r0
 8001540:	460c      	mov	r4, r1
 8001542:	d454      	bmi.n	80015ee <__sflush_r+0xba>
 8001544:	684b      	ldr	r3, [r1, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dc02      	bgt.n	8001550 <__sflush_r+0x1c>
 800154a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	dd48      	ble.n	80015e2 <__sflush_r+0xae>
 8001550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001552:	2e00      	cmp	r6, #0
 8001554:	d045      	beq.n	80015e2 <__sflush_r+0xae>
 8001556:	2300      	movs	r3, #0
 8001558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800155c:	682f      	ldr	r7, [r5, #0]
 800155e:	6a21      	ldr	r1, [r4, #32]
 8001560:	602b      	str	r3, [r5, #0]
 8001562:	d030      	beq.n	80015c6 <__sflush_r+0x92>
 8001564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001566:	89a3      	ldrh	r3, [r4, #12]
 8001568:	0759      	lsls	r1, r3, #29
 800156a:	d505      	bpl.n	8001578 <__sflush_r+0x44>
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	1ad2      	subs	r2, r2, r3
 8001570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001572:	b10b      	cbz	r3, 8001578 <__sflush_r+0x44>
 8001574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	2300      	movs	r3, #0
 800157a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800157c:	6a21      	ldr	r1, [r4, #32]
 800157e:	4628      	mov	r0, r5
 8001580:	47b0      	blx	r6
 8001582:	1c43      	adds	r3, r0, #1
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	d106      	bne.n	8001596 <__sflush_r+0x62>
 8001588:	6829      	ldr	r1, [r5, #0]
 800158a:	291d      	cmp	r1, #29
 800158c:	d82b      	bhi.n	80015e6 <__sflush_r+0xb2>
 800158e:	4a2a      	ldr	r2, [pc, #168]	@ (8001638 <__sflush_r+0x104>)
 8001590:	410a      	asrs	r2, r1
 8001592:	07d6      	lsls	r6, r2, #31
 8001594:	d427      	bmi.n	80015e6 <__sflush_r+0xb2>
 8001596:	2200      	movs	r2, #0
 8001598:	6062      	str	r2, [r4, #4]
 800159a:	04d9      	lsls	r1, r3, #19
 800159c:	6922      	ldr	r2, [r4, #16]
 800159e:	6022      	str	r2, [r4, #0]
 80015a0:	d504      	bpl.n	80015ac <__sflush_r+0x78>
 80015a2:	1c42      	adds	r2, r0, #1
 80015a4:	d101      	bne.n	80015aa <__sflush_r+0x76>
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	b903      	cbnz	r3, 80015ac <__sflush_r+0x78>
 80015aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80015ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015ae:	602f      	str	r7, [r5, #0]
 80015b0:	b1b9      	cbz	r1, 80015e2 <__sflush_r+0xae>
 80015b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015b6:	4299      	cmp	r1, r3
 80015b8:	d002      	beq.n	80015c0 <__sflush_r+0x8c>
 80015ba:	4628      	mov	r0, r5
 80015bc:	f7ff fec2 	bl	8001344 <_free_r>
 80015c0:	2300      	movs	r3, #0
 80015c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80015c4:	e00d      	b.n	80015e2 <__sflush_r+0xae>
 80015c6:	2301      	movs	r3, #1
 80015c8:	4628      	mov	r0, r5
 80015ca:	47b0      	blx	r6
 80015cc:	4602      	mov	r2, r0
 80015ce:	1c50      	adds	r0, r2, #1
 80015d0:	d1c9      	bne.n	8001566 <__sflush_r+0x32>
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0c6      	beq.n	8001566 <__sflush_r+0x32>
 80015d8:	2b1d      	cmp	r3, #29
 80015da:	d001      	beq.n	80015e0 <__sflush_r+0xac>
 80015dc:	2b16      	cmp	r3, #22
 80015de:	d11e      	bne.n	800161e <__sflush_r+0xea>
 80015e0:	602f      	str	r7, [r5, #0]
 80015e2:	2000      	movs	r0, #0
 80015e4:	e022      	b.n	800162c <__sflush_r+0xf8>
 80015e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	e01b      	b.n	8001626 <__sflush_r+0xf2>
 80015ee:	690f      	ldr	r7, [r1, #16]
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d0f6      	beq.n	80015e2 <__sflush_r+0xae>
 80015f4:	0793      	lsls	r3, r2, #30
 80015f6:	680e      	ldr	r6, [r1, #0]
 80015f8:	bf08      	it	eq
 80015fa:	694b      	ldreq	r3, [r1, #20]
 80015fc:	600f      	str	r7, [r1, #0]
 80015fe:	bf18      	it	ne
 8001600:	2300      	movne	r3, #0
 8001602:	eba6 0807 	sub.w	r8, r6, r7
 8001606:	608b      	str	r3, [r1, #8]
 8001608:	f1b8 0f00 	cmp.w	r8, #0
 800160c:	dde9      	ble.n	80015e2 <__sflush_r+0xae>
 800160e:	6a21      	ldr	r1, [r4, #32]
 8001610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001612:	4643      	mov	r3, r8
 8001614:	463a      	mov	r2, r7
 8001616:	4628      	mov	r0, r5
 8001618:	47b0      	blx	r6
 800161a:	2800      	cmp	r0, #0
 800161c:	dc08      	bgt.n	8001630 <__sflush_r+0xfc>
 800161e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001626:	81a3      	strh	r3, [r4, #12]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001630:	4407      	add	r7, r0
 8001632:	eba8 0800 	sub.w	r8, r8, r0
 8001636:	e7e7      	b.n	8001608 <__sflush_r+0xd4>
 8001638:	dfbffffe 	.word	0xdfbffffe

0800163c <_fflush_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	690b      	ldr	r3, [r1, #16]
 8001640:	4605      	mov	r5, r0
 8001642:	460c      	mov	r4, r1
 8001644:	b913      	cbnz	r3, 800164c <_fflush_r+0x10>
 8001646:	2500      	movs	r5, #0
 8001648:	4628      	mov	r0, r5
 800164a:	bd38      	pop	{r3, r4, r5, pc}
 800164c:	b118      	cbz	r0, 8001656 <_fflush_r+0x1a>
 800164e:	6a03      	ldr	r3, [r0, #32]
 8001650:	b90b      	cbnz	r3, 8001656 <_fflush_r+0x1a>
 8001652:	f7ff fc8f 	bl	8000f74 <__sinit>
 8001656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f3      	beq.n	8001646 <_fflush_r+0xa>
 800165e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001660:	07d0      	lsls	r0, r2, #31
 8001662:	d404      	bmi.n	800166e <_fflush_r+0x32>
 8001664:	0599      	lsls	r1, r3, #22
 8001666:	d402      	bmi.n	800166e <_fflush_r+0x32>
 8001668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800166a:	f7ff fe68 	bl	800133e <__retarget_lock_acquire_recursive>
 800166e:	4628      	mov	r0, r5
 8001670:	4621      	mov	r1, r4
 8001672:	f7ff ff5f 	bl	8001534 <__sflush_r>
 8001676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001678:	07da      	lsls	r2, r3, #31
 800167a:	4605      	mov	r5, r0
 800167c:	d4e4      	bmi.n	8001648 <_fflush_r+0xc>
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	059b      	lsls	r3, r3, #22
 8001682:	d4e1      	bmi.n	8001648 <_fflush_r+0xc>
 8001684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001686:	f7ff fe5b 	bl	8001340 <__retarget_lock_release_recursive>
 800168a:	e7dd      	b.n	8001648 <_fflush_r+0xc>

0800168c <__swhatbuf_r>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	460c      	mov	r4, r1
 8001690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001694:	2900      	cmp	r1, #0
 8001696:	b096      	sub	sp, #88	@ 0x58
 8001698:	4615      	mov	r5, r2
 800169a:	461e      	mov	r6, r3
 800169c:	da0d      	bge.n	80016ba <__swhatbuf_r+0x2e>
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2340      	movne	r3, #64	@ 0x40
 80016ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80016b0:	2000      	movs	r0, #0
 80016b2:	6031      	str	r1, [r6, #0]
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	b016      	add	sp, #88	@ 0x58
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
 80016ba:	466a      	mov	r2, sp
 80016bc:	f000 f848 	bl	8001750 <_fstat_r>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	dbec      	blt.n	800169e <__swhatbuf_r+0x12>
 80016c4:	9901      	ldr	r1, [sp, #4]
 80016c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80016ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80016ce:	4259      	negs	r1, r3
 80016d0:	4159      	adcs	r1, r3
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	e7eb      	b.n	80016b0 <__swhatbuf_r+0x24>

080016d8 <__smakebuf_r>:
 80016d8:	898b      	ldrh	r3, [r1, #12]
 80016da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016dc:	079d      	lsls	r5, r3, #30
 80016de:	4606      	mov	r6, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	d507      	bpl.n	80016f4 <__smakebuf_r+0x1c>
 80016e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	6123      	str	r3, [r4, #16]
 80016ec:	2301      	movs	r3, #1
 80016ee:	6163      	str	r3, [r4, #20]
 80016f0:	b003      	add	sp, #12
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	ab01      	add	r3, sp, #4
 80016f6:	466a      	mov	r2, sp
 80016f8:	f7ff ffc8 	bl	800168c <__swhatbuf_r>
 80016fc:	9f00      	ldr	r7, [sp, #0]
 80016fe:	4605      	mov	r5, r0
 8001700:	4639      	mov	r1, r7
 8001702:	4630      	mov	r0, r6
 8001704:	f7ff fe8a 	bl	800141c <_malloc_r>
 8001708:	b948      	cbnz	r0, 800171e <__smakebuf_r+0x46>
 800170a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800170e:	059a      	lsls	r2, r3, #22
 8001710:	d4ee      	bmi.n	80016f0 <__smakebuf_r+0x18>
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	81a3      	strh	r3, [r4, #12]
 800171c:	e7e2      	b.n	80016e4 <__smakebuf_r+0xc>
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	6020      	str	r0, [r4, #0]
 8001722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001726:	81a3      	strh	r3, [r4, #12]
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800172e:	b15b      	cbz	r3, 8001748 <__smakebuf_r+0x70>
 8001730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001734:	4630      	mov	r0, r6
 8001736:	f000 f81d 	bl	8001774 <_isatty_r>
 800173a:	b128      	cbz	r0, 8001748 <__smakebuf_r+0x70>
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	81a3      	strh	r3, [r4, #12]
 8001748:	89a3      	ldrh	r3, [r4, #12]
 800174a:	431d      	orrs	r5, r3
 800174c:	81a5      	strh	r5, [r4, #12]
 800174e:	e7cf      	b.n	80016f0 <__smakebuf_r+0x18>

08001750 <_fstat_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4d07      	ldr	r5, [pc, #28]	@ (8001770 <_fstat_r+0x20>)
 8001754:	2300      	movs	r3, #0
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	602b      	str	r3, [r5, #0]
 800175e:	f7fe fe52 	bl	8000406 <_fstat>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d102      	bne.n	800176c <_fstat_r+0x1c>
 8001766:	682b      	ldr	r3, [r5, #0]
 8001768:	b103      	cbz	r3, 800176c <_fstat_r+0x1c>
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	20000210 	.word	0x20000210

08001774 <_isatty_r>:
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	4d06      	ldr	r5, [pc, #24]	@ (8001790 <_isatty_r+0x1c>)
 8001778:	2300      	movs	r3, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	f7fe fe51 	bl	8000426 <_isatty>
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d102      	bne.n	800178e <_isatty_r+0x1a>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	b103      	cbz	r3, 800178e <_isatty_r+0x1a>
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	bd38      	pop	{r3, r4, r5, pc}
 8001790:	20000210 	.word	0x20000210

08001794 <_sbrk_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	4d06      	ldr	r5, [pc, #24]	@ (80017b0 <_sbrk_r+0x1c>)
 8001798:	2300      	movs	r3, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	602b      	str	r3, [r5, #0]
 80017a0:	f7fe fe5a 	bl	8000458 <_sbrk>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	d102      	bne.n	80017ae <_sbrk_r+0x1a>
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	b103      	cbz	r3, 80017ae <_sbrk_r+0x1a>
 80017ac:	6023      	str	r3, [r4, #0]
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
 80017b0:	20000210 	.word	0x20000210

080017b4 <_init>:
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b6:	bf00      	nop
 80017b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ba:	bc08      	pop	{r3}
 80017bc:	469e      	mov	lr, r3
 80017be:	4770      	bx	lr

080017c0 <_fini>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	bf00      	nop
 80017c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c6:	bc08      	pop	{r3}
 80017c8:	469e      	mov	lr, r3
 80017ca:	4770      	bx	lr
