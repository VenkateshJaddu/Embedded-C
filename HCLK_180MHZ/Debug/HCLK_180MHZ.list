
HCLK_180MHZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003508  08003508  00004508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800359c  0800359c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a4  080035a4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000045a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035a8  080035a8  000045a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080035ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003614  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003614  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008671  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  0000d709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000561  00000000  00000000  0000f520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d68  00000000  00000000  0000fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a94  00000000  00000000  000317e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9fff  00000000  00000000  0003b27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010527c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  001052c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  001076fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034f0 	.word	0x080034f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080034f0 	.word	0x080034f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <SysTick_Handler>:

#include "stm32f4xx_hal.h"

void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005a4:	f000 fab6 	bl	8000b14 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 80005a8:	f000 fc02 	bl	8000db0 <HAL_SYSTICK_Callback>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <main>:

UART_HandleTypeDef huart;


int main()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09a      	sub	sp, #104	@ 0x68
 80005b4:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 80005b6:	f000 fa5b 	bl	8000a70 <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_84_MHZ);
 80005ba:	2054      	movs	r0, #84	@ 0x54
 80005bc:	f000 f888 	bl	80006d0 <SystemClockConfig>

	UART_init();
 80005c0:	f000 f860 	bl	8000684 <UART_init>

	/*Lets Print all CLK frequencies*/
	memset(&msg,0,sizeof(msg));
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2264      	movs	r2, #100	@ 0x64
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f998 	bl	8002900 <memset>
	sprintf(msg, "SYSCLK : %ld\r\n", HAL_RCC_GetSysClockFreq());
 80005d0:	f000 fea4 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80005d4:	4602      	mov	r2, r0
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4925      	ldr	r1, [pc, #148]	@ (8000670 <main+0xc0>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 f898 	bl	8002710 <siprintf>
	HAL_UART_Transmit(&huart, (uint8_t *)msg,sizeof(msg), HAL_MAX_DELAY);
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2264      	movs	r2, #100	@ 0x64
 80005e8:	4822      	ldr	r0, [pc, #136]	@ (8000674 <main+0xc4>)
 80005ea:	f001 fbb5 	bl	8001d58 <HAL_UART_Transmit>

	memset(&msg,0,sizeof(msg));
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2264      	movs	r2, #100	@ 0x64
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f983 	bl	8002900 <memset>
	sprintf(msg, "HCLK : %ld\r\n", HAL_RCC_GetHCLKFreq());
 80005fa:	f000 fe5b 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80005fe:	4602      	mov	r2, r0
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	491d      	ldr	r1, [pc, #116]	@ (8000678 <main+0xc8>)
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f883 	bl	8002710 <siprintf>
	HAL_UART_Transmit(&huart, (uint8_t *)msg,sizeof(msg), HAL_MAX_DELAY);
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2264      	movs	r2, #100	@ 0x64
 8000612:	4818      	ldr	r0, [pc, #96]	@ (8000674 <main+0xc4>)
 8000614:	f001 fba0 	bl	8001d58 <HAL_UART_Transmit>

	memset(&msg,0,sizeof(msg));
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2264      	movs	r2, #100	@ 0x64
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f96e 	bl	8002900 <memset>
	sprintf(msg, "PCLK1 : %ld\r\n", HAL_RCC_GetPCLK1Freq());
 8000624:	f000 fe52 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8000628:	4602      	mov	r2, r0
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4913      	ldr	r1, [pc, #76]	@ (800067c <main+0xcc>)
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f86e 	bl	8002710 <siprintf>
	HAL_UART_Transmit(&huart, (uint8_t *)msg,sizeof(msg), HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2264      	movs	r2, #100	@ 0x64
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <main+0xc4>)
 800063e:	f001 fb8b 	bl	8001d58 <HAL_UART_Transmit>

	memset(&msg,0,sizeof(msg));
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2264      	movs	r2, #100	@ 0x64
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f959 	bl	8002900 <memset>
	sprintf(msg, "PCLK2 : %ld\r\n", HAL_RCC_GetPCLK2Freq());
 800064e:	f000 fe51 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8000652:	4602      	mov	r2, r0
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	490a      	ldr	r1, [pc, #40]	@ (8000680 <main+0xd0>)
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f859 	bl	8002710 <siprintf>
	HAL_UART_Transmit(&huart, (uint8_t *)msg,sizeof(msg), HAL_MAX_DELAY);
 800065e:	1d39      	adds	r1, r7, #4
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2264      	movs	r2, #100	@ 0x64
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <main+0xc4>)
 8000668:	f001 fb76 	bl	8001d58 <HAL_UART_Transmit>




	while(1);
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0xbc>
 8000670:	08003508 	.word	0x08003508
 8000674:	20000084 	.word	0x20000084
 8000678:	08003518 	.word	0x08003518
 800067c:	08003528 	.word	0x08003528
 8000680:	08003538 	.word	0x08003538

08000684 <UART_init>:

	return 0;
}

void UART_init()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	huart.Instance = USART2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <UART_init+0x44>)
 800068a:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <UART_init+0x48>)
 800068c:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <UART_init+0x44>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <UART_init+0x44>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <UART_init+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <UART_init+0x44>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <UART_init+0x44>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <UART_init+0x44>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]

	if((HAL_UART_Init(&huart)) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <UART_init+0x44>)
 80006b6:	f001 faff 	bl	8001cb8 <HAL_UART_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <UART_init+0x40>
	{
		error_handler();
 80006c0:	f000 f882 	bl	80007c8 <error_handler>
	}
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40004400 	.word	0x40004400

080006d0 <SystemClockConfig>:

void SystemClockConfig(uint8_t clk_freq)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b098      	sub	sp, #96	@ 0x60
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.HSEState = RCC_HSE_BYPASS;
 80006e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	osc_init.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	643b      	str	r3, [r7, #64]	@ 0x40
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44


	//To run clock at 180 MHZ we have to enable
	/*Enable Clock for the Power Controller*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <SystemClockConfig+0xe8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a2e      	ldr	r2, [pc, #184]	@ (80007b8 <SystemClockConfig+0xe8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <SystemClockConfig+0xe8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
	/*Set Regulator voltage scale as 1*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClockConfig+0xec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemClockConfig+0xec>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClockConfig+0xec>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
	/*Turn ON over drive mode of the voltage regulator*/
	__HAL_PWR_OVERDRIVE_ENABLE();
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <SystemClockConfig+0xf0>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]

		osc_init.PLL.PLLM = 8;
 8000732:	2308      	movs	r3, #8
 8000734:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLN = 360;
 8000736:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLP = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	653b      	str	r3, [r7, #80]	@ 0x50
		osc_init.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	657b      	str	r3, [r7, #84]	@ 0x54
		osc_init.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	65bb      	str	r3, [r7, #88]	@ 0x58
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000748:	230f      	movs	r3, #15
 800074a:	617b      	str	r3, [r7, #20]
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	623b      	str	r3, [r7, #32]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24

		FLatency = FLASH_ACR_LATENCY_5WS;
 8000760:	2305      	movs	r3, #5
 8000762:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f806 	bl	800177c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClockConfig+0xaa>
		{
			error_handler();
 8000776:	f000 f827 	bl	80007c8 <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 800077a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fcaf 	bl	80010e8 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClockConfig+0xc4>
		{
			error_handler();
 8000790:	f000 f81a 	bl	80007c8 <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 8000794:	f000 fdc2 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8000798:	4603      	mov	r3, r0
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <SystemClockConfig+0xf4>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	099b      	lsrs	r3, r3, #6
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fadb 	bl	8000d5e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007a8:	2004      	movs	r0, #4
 80007aa:	f000 fae5 	bl	8000d78 <HAL_SYSTICK_CLKSourceConfig>
}
 80007ae:	bf00      	nop
 80007b0:	3760      	adds	r7, #96	@ 0x60
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000
 80007c0:	420e0040 	.word	0x420e0040
 80007c4:	10624dd3 	.word	0x10624dd3

080007c8 <error_handler>:

void error_handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	printf("Failed\n");
 80007cc:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <error_handler+0x10>)
 80007ce:	f001 ff97 	bl	8002700 <puts>
	while(1);
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <error_handler+0xa>
 80007d6:	bf00      	nop
 80007d8:	08003548 	.word	0x08003548

080007dc <HAL_MspInit>:


#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 fa87 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x40>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ea:	4a0c      	ldr	r2, [pc, #48]	@ (800081c <HAL_MspInit+0x40>)
 80007ec:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80007f0:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	f06f 000b 	mvn.w	r0, #11
 80007fa:	f000 fa86 	bl	8000d0a <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	f06f 000a 	mvn.w	r0, #10
 8000806:	f000 fa80 	bl	8000d0a <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	f06f 0009 	mvn.w	r0, #9
 8000812:	f000 fa7a 	bl	8000d0a <HAL_NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	/*Implementing Low level init's of USART2 peripheral*/
	//1. Enable the clock for the UART2 peripheral
		__HAL_RCC_USART2_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	4a1d      	ldr	r2, [pc, #116]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000836:	6413      	str	r3, [r2, #64]	@ 0x40
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6313      	str	r3, [r2, #48]	@ 0x30
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
	//2. Pin muxing configurations
		gpio_uart.Pin = GPIO_PIN_2;
 8000860:	2304      	movs	r3, #4
 8000862:	617b      	str	r3, [r7, #20]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
		gpio_uart.Alternate = GPIO_AF7_USART2;
 800086c:	2307      	movs	r3, #7
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
		gpio_uart.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 800087c:	f000 faa0 	bl	8000dc0 <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8000880:	2308      	movs	r3, #8
 8000882:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4808      	ldr	r0, [pc, #32]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 800088c:	f000 fa98 	bl	8000dc0 <HAL_GPIO_Init>
	//3. Enable the IRQ and set-up the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000890:	2026      	movs	r0, #38	@ 0x26
 8000892:	f000 fa56 	bl	8000d42 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	2026      	movs	r0, #38	@ 0x26
 800089c:	f000 fa35 	bl	8000d0a <HAL_NVIC_SetPriority>
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e00a      	b.n	80008d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c2:	f3af 8000 	nop.w
 80008c6:	4601      	mov	r1, r0
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	b2ca      	uxtb	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbf0      	blt.n	80008c2 <_read+0x12>
  }

  return len;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e009      	b.n	8000910 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf1      	blt.n	80008fc <_write+0x12>
  }
  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_close>:

int _close(int file)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800094a:	605a      	str	r2, [r3, #4]
  return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_isatty>:

int _isatty(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f001 ffee 	bl	800299c <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20020000 	.word	0x20020000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200000cc 	.word	0x200000cc
 80009f4:	20000220 	.word	0x20000220

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f001 ffad 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fdaf 	bl	80005b0 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a60:	080035ac 	.word	0x080035ac
  ldr r2, =_sbss
 8000a64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a68:	20000220 	.word	0x20000220

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f92b 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe9a 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f943 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f90b 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	@ (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200000d0 	.word	0x200000d0

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff3e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff31 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d106      	bne.n	8000d94 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d92:	e005      	b.n	8000da0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d9a:	f023 0304 	bic.w	r3, r3, #4
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e165      	b.n	80010a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8154 	bne.w	80010a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80ae 	beq.w	80010a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <HAL_GPIO_Init+0x300>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80010c0 <HAL_GPIO_Init+0x300>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b5a      	ldr	r3, [pc, #360]	@ (80010c0 <HAL_GPIO_Init+0x300>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a58      	ldr	r2, [pc, #352]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	@ (80010c8 <HAL_GPIO_Init+0x308>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	@ (80010cc <HAL_GPIO_Init+0x30c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4d      	ldr	r2, [pc, #308]	@ (80010d0 <HAL_GPIO_Init+0x310>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80010d4 <HAL_GPIO_Init+0x314>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80010d8 <HAL_GPIO_Init+0x318>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x20a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80010dc <HAL_GPIO_Init+0x31c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x206>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a49      	ldr	r2, [pc, #292]	@ (80010e0 <HAL_GPIO_Init+0x320>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x202>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00c      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00a      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x21c>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101e:	4a31      	ldr	r2, [pc, #196]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001048:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001072:	4a1c      	ldr	r2, [pc, #112]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109c:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <HAL_GPIO_Init+0x324>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	f67f ae96 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40021800 	.word	0x40021800
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b68      	ldr	r3, [pc, #416]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d90c      	bls.n	8001124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b65      	ldr	r3, [pc, #404]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800115e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d044      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b3f      	ldr	r3, [pc, #252]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e067      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4934      	ldr	r1, [pc, #208]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fcb0 	bl	8000b3c <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fcac 	bl	8000b3c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d20c      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f855 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fc10 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08003550 	.word	0x08003550
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4903      	ldr	r1, [pc, #12]	@ (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08003560 	.word	0x08003560

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012f8:	f7ff ffdc 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	@ (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08003560 	.word	0x08003560

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001320:	b0ae      	sub	sp, #184	@ 0xb8
 8001322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001342:	4bcb      	ldr	r3, [pc, #812]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b0c      	cmp	r3, #12
 800134c:	f200 8206 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x440>
 8001350:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	0800138d 	.word	0x0800138d
 800135c:	0800175d 	.word	0x0800175d
 8001360:	0800175d 	.word	0x0800175d
 8001364:	0800175d 	.word	0x0800175d
 8001368:	08001395 	.word	0x08001395
 800136c:	0800175d 	.word	0x0800175d
 8001370:	0800175d 	.word	0x0800175d
 8001374:	0800175d 	.word	0x0800175d
 8001378:	0800139d 	.word	0x0800139d
 800137c:	0800175d 	.word	0x0800175d
 8001380:	0800175d 	.word	0x0800175d
 8001384:	0800175d 	.word	0x0800175d
 8001388:	0800158d 	.word	0x0800158d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4bb9      	ldr	r3, [pc, #740]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x358>)
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001392:	e1e7      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001394:	4bb8      	ldr	r3, [pc, #736]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800139a:	e1e3      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139c:	4bb4      	ldr	r3, [pc, #720]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d071      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b4:	4bae      	ldr	r3, [pc, #696]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013da:	4622      	mov	r2, r4
 80013dc:	462b      	mov	r3, r5
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	0159      	lsls	r1, r3, #5
 80013e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ec:	0150      	lsls	r0, r2, #5
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4621      	mov	r1, r4
 80013f4:	1a51      	subs	r1, r2, r1
 80013f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80013f8:	4629      	mov	r1, r5
 80013fa:	eb63 0301 	sbc.w	r3, r3, r1
 80013fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800140c:	4649      	mov	r1, r9
 800140e:	018b      	lsls	r3, r1, #6
 8001410:	4641      	mov	r1, r8
 8001412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001416:	4641      	mov	r1, r8
 8001418:	018a      	lsls	r2, r1, #6
 800141a:	4641      	mov	r1, r8
 800141c:	1a51      	subs	r1, r2, r1
 800141e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001420:	4649      	mov	r1, r9
 8001422:	eb63 0301 	sbc.w	r3, r3, r1
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001434:	4649      	mov	r1, r9
 8001436:	00cb      	lsls	r3, r1, #3
 8001438:	4641      	mov	r1, r8
 800143a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800143e:	4641      	mov	r1, r8
 8001440:	00ca      	lsls	r2, r1, #3
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	4603      	mov	r3, r0
 8001448:	4622      	mov	r2, r4
 800144a:	189b      	adds	r3, r3, r2
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
 800144e:	462b      	mov	r3, r5
 8001450:	460a      	mov	r2, r1
 8001452:	eb42 0303 	adc.w	r3, r2, r3
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001464:	4629      	mov	r1, r5
 8001466:	024b      	lsls	r3, r1, #9
 8001468:	4621      	mov	r1, r4
 800146a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800146e:	4621      	mov	r1, r4
 8001470:	024a      	lsls	r2, r1, #9
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800147a:	2200      	movs	r2, #0
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001488:	f7fe ff12 	bl	80002b0 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001496:	e067      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014b2:	2300      	movs	r3, #0
 80014b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ba:	4622      	mov	r2, r4
 80014bc:	462b      	mov	r3, r5
 80014be:	f04f 0000 	mov.w	r0, #0
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	0159      	lsls	r1, r3, #5
 80014c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014cc:	0150      	lsls	r0, r2, #5
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4621      	mov	r1, r4
 80014d4:	1a51      	subs	r1, r2, r1
 80014d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014d8:	4629      	mov	r1, r5
 80014da:	eb63 0301 	sbc.w	r3, r3, r1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014ec:	4649      	mov	r1, r9
 80014ee:	018b      	lsls	r3, r1, #6
 80014f0:	4641      	mov	r1, r8
 80014f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f6:	4641      	mov	r1, r8
 80014f8:	018a      	lsls	r2, r1, #6
 80014fa:	4641      	mov	r1, r8
 80014fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001500:	4649      	mov	r1, r9
 8001502:	eb63 0b01 	sbc.w	fp, r3, r1
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800151a:	4692      	mov	sl, r2
 800151c:	469b      	mov	fp, r3
 800151e:	4623      	mov	r3, r4
 8001520:	eb1a 0303 	adds.w	r3, sl, r3
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	462b      	mov	r3, r5
 8001528:	eb4b 0303 	adc.w	r3, fp, r3
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800153a:	4629      	mov	r1, r5
 800153c:	028b      	lsls	r3, r1, #10
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001544:	4621      	mov	r1, r4
 8001546:	028a      	lsls	r2, r1, #10
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001550:	2200      	movs	r2, #0
 8001552:	673b      	str	r3, [r7, #112]	@ 0x70
 8001554:	677a      	str	r2, [r7, #116]	@ 0x74
 8001556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800155a:	f7fe fea9 	bl	80002b0 <__aeabi_uldivmod>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4613      	mov	r3, r2
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001568:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	3301      	adds	r3, #1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800157a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800157e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e0eb      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d06b      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b8:	2300      	movs	r3, #0
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80015bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015c0:	4622      	mov	r2, r4
 80015c2:	462b      	mov	r3, r5
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0159      	lsls	r1, r3, #5
 80015ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d2:	0150      	lsls	r0, r2, #5
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4621      	mov	r1, r4
 80015da:	1a51      	subs	r1, r2, r1
 80015dc:	61b9      	str	r1, [r7, #24]
 80015de:	4629      	mov	r1, r5
 80015e0:	eb63 0301 	sbc.w	r3, r3, r1
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015f2:	4659      	mov	r1, fp
 80015f4:	018b      	lsls	r3, r1, #6
 80015f6:	4651      	mov	r1, sl
 80015f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fc:	4651      	mov	r1, sl
 80015fe:	018a      	lsls	r2, r1, #6
 8001600:	4651      	mov	r1, sl
 8001602:	ebb2 0801 	subs.w	r8, r2, r1
 8001606:	4659      	mov	r1, fp
 8001608:	eb63 0901 	sbc.w	r9, r3, r1
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800161c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001620:	4690      	mov	r8, r2
 8001622:	4699      	mov	r9, r3
 8001624:	4623      	mov	r3, r4
 8001626:	eb18 0303 	adds.w	r3, r8, r3
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	462b      	mov	r3, r5
 800162e:	eb49 0303 	adc.w	r3, r9, r3
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001640:	4629      	mov	r1, r5
 8001642:	024b      	lsls	r3, r1, #9
 8001644:	4621      	mov	r1, r4
 8001646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164a:	4621      	mov	r1, r4
 800164c:	024a      	lsls	r2, r1, #9
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001656:	2200      	movs	r2, #0
 8001658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800165a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800165c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001660:	f7fe fe26 	bl	80002b0 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	e065      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x420>
 8001670:	40023800 	.word	0x40023800
 8001674:	00f42400 	.word	0x00f42400
 8001678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	4618      	mov	r0, r3
 8001686:	4611      	mov	r1, r2
 8001688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800168c:	653b      	str	r3, [r7, #80]	@ 0x50
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	@ 0x54
 8001692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001696:	4642      	mov	r2, r8
 8001698:	464b      	mov	r3, r9
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	0159      	lsls	r1, r3, #5
 80016a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a8:	0150      	lsls	r0, r2, #5
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4641      	mov	r1, r8
 80016b0:	1a51      	subs	r1, r2, r1
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016c8:	4659      	mov	r1, fp
 80016ca:	018b      	lsls	r3, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d2:	4651      	mov	r1, sl
 80016d4:	018a      	lsls	r2, r1, #6
 80016d6:	4651      	mov	r1, sl
 80016d8:	1a54      	subs	r4, r2, r1
 80016da:	4659      	mov	r1, fp
 80016dc:	eb63 0501 	sbc.w	r5, r3, r1
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	00eb      	lsls	r3, r5, #3
 80016ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ee:	00e2      	lsls	r2, r4, #3
 80016f0:	4614      	mov	r4, r2
 80016f2:	461d      	mov	r5, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	18e3      	adds	r3, r4, r3
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	464b      	mov	r3, r9
 80016fc:	eb45 0303 	adc.w	r3, r5, r3
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800170e:	4629      	mov	r1, r5
 8001710:	028b      	lsls	r3, r1, #10
 8001712:	4621      	mov	r1, r4
 8001714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001718:	4621      	mov	r1, r4
 800171a:	028a      	lsls	r2, r1, #10
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001724:	2200      	movs	r2, #0
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001728:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800172a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800172e:	f7fe fdbf 	bl	80002b0 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0f1b      	lsrs	r3, r3, #28
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800174a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800174e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800175a:	e003      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001768:	4618      	mov	r0, r3
 800176a:	37b8      	adds	r7, #184	@ 0xb8
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400

0800177c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e28d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8083 	beq.w	80018a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800179c:	4b94      	ldr	r3, [pc, #592]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017a8:	4b91      	ldr	r3, [pc, #580]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017b4:	4b8e      	ldr	r3, [pc, #568]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b88      	ldr	r3, [pc, #544]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b84      	ldr	r3, [pc, #528]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x124>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d157      	bne.n	80018a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e25a      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x90>
 80017fe:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7b      	ldr	r2, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xb4>
 8001816:	4b76      	ldr	r3, [pc, #472]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a75      	ldr	r2, [pc, #468]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b73      	ldr	r3, [pc, #460]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a72      	ldr	r2, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 8001830:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b6c      	ldr	r3, [pc, #432]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f974 	bl	8000b3c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f970 	bl	8000b3c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e21f      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b61      	ldr	r3, [pc, #388]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xdc>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f960 	bl	8000b3c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f95c 	bl	8000b3c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e20b      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x104>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06f      	beq.n	800198e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018ae:	4b50      	ldr	r3, [pc, #320]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d017      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ba:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
        || \
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018de:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1d3      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4937      	ldr	r1, [pc, #220]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f909 	bl	8000b3c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff f905 	bl	8000b3c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1b4      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4925      	ldr	r1, [pc, #148]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f8e8 	bl	8000b3c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff f8e4 	bl	8000b3c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e193      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d036      	beq.n	8001a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d016      	beq.n	80019d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f8c8 	bl	8000b3c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff f8c4 	bl	8000b3c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e173      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x234>
 80019ce:	e01b      	b.n	8001a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f8b1 	bl	8000b3c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	e00e      	b.n	80019fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f8ad 	bl	8000b3c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d907      	bls.n	80019fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e15c      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470000 	.word	0x42470000
 80019f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ea      	bne.n	80019de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8097 	beq.w	8001b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b79      	ldr	r3, [pc, #484]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b76      	ldr	r3, [pc, #472]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f86d 	bl	8000b3c <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7ff f869 	bl	8000b3c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e118      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b6c      	ldr	r3, [pc, #432]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x31e>
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x340>
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001abc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac8:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001acc:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f023 0304 	bic.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f82e 	bl	8000b3c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f82a 	bl	8000b3c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0d7      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ee      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x368>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f818 	bl	8000b3c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f814 	bl	8000b3c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0c1      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ad 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d060      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d145      	bne.n	8001bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7fe ffe8 	bl	8000b3c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe ffe4 	bl	8000b3c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e093      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffb9 	bl	8000b3c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ffb5 	bl	8000b3c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e064      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x452>
 8001bec:	e05c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ffa2 	bl	8000b3c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ff9e 	bl	8000b3c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x480>
 8001c1a:	e045      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e040      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_RCC_OscConfig+0x538>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d129      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d122      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d119      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10f      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e042      	b.n	8001d50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fd9e 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f973 	bl	8001fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	@ 0x28
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d175      	bne.n	8001e64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_UART_Transmit+0x2c>
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e06e      	b.n	8001e66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2221      	movs	r2, #33	@ 0x21
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d96:	f7fe fed1 	bl	8000b3c <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001db0:	d108      	bne.n	8001dc4 <HAL_UART_Transmit+0x6c>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	e003      	b.n	8001dcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dcc:	e02e      	b.n	8001e2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f848 	bl	8001e6e <UART_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e03a      	b.n	8001e66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3302      	adds	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e007      	b.n	8001e1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1cb      	bne.n	8001dce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2140      	movs	r1, #64	@ 0x40
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f814 	bl	8001e6e <UART_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e006      	b.n	8001e66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e7e:	e03b      	b.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d037      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7fe fe58 	bl	8000b3c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	6a3a      	ldr	r2, [r7, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e03a      	b.n	8001f18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b80      	cmp	r3, #128	@ 0x80
 8001eb4:	d020      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b40      	cmp	r3, #64	@ 0x40
 8001eba:	d01d      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d116      	bne.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f81d 	bl	8001f20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e00f      	b.n	8001f18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d0b4      	beq.n	8001e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b095      	sub	sp, #84	@ 0x54
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f32:	e853 3f00 	ldrex	r3, [r3]
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f48:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f50:	e841 2300 	strex	r3, r2, [r1]
 8001f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e5      	bne.n	8001f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3314      	adds	r3, #20
 8001f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	e853 3f00 	ldrex	r3, [r3]
 8001f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f84:	e841 2300 	strex	r3, r2, [r1]
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e5      	bne.n	8001f5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d119      	bne.n	8001fcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	e853 3f00 	ldrex	r3, [r3]
 8001fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f023 0310 	bic.w	r3, r3, #16
 8001fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fb8:	61ba      	str	r2, [r7, #24]
 8001fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbc:	6979      	ldr	r1, [r7, #20]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	e841 2300 	strex	r3, r2, [r1]
 8001fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e5      	bne.n	8001f98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fda:	bf00      	nop
 8001fdc:	3754      	adds	r7, #84	@ 0x54
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fec:	b0c0      	sub	sp, #256	@ 0x100
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	ea40 0301 	orr.w	r3, r0, r1
 8002010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	431a      	orrs	r2, r3
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	431a      	orrs	r2, r3
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002040:	f021 010c 	bic.w	r1, r1, #12
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800204e:	430b      	orrs	r3, r1
 8002050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002062:	6999      	ldr	r1, [r3, #24]
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	ea40 0301 	orr.w	r3, r0, r1
 800206e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b8f      	ldr	r3, [pc, #572]	@ (80022b4 <UART_SetConfig+0x2cc>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d005      	beq.n	8002088 <UART_SetConfig+0xa0>
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b8d      	ldr	r3, [pc, #564]	@ (80022b8 <UART_SetConfig+0x2d0>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d104      	bne.n	8002092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002088:	f7ff f934 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 800208c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002090:	e003      	b.n	800209a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002092:	f7ff f91b 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002096:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a4:	f040 810c 	bne.w	80022c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020ba:	4622      	mov	r2, r4
 80020bc:	462b      	mov	r3, r5
 80020be:	1891      	adds	r1, r2, r2
 80020c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020c2:	415b      	adcs	r3, r3
 80020c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020ca:	4621      	mov	r1, r4
 80020cc:	eb12 0801 	adds.w	r8, r2, r1
 80020d0:	4629      	mov	r1, r5
 80020d2:	eb43 0901 	adc.w	r9, r3, r1
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ea:	4690      	mov	r8, r2
 80020ec:	4699      	mov	r9, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	eb18 0303 	adds.w	r3, r8, r3
 80020f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020f8:	462b      	mov	r3, r5
 80020fa:	eb49 0303 	adc.w	r3, r9, r3
 80020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800210e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002116:	460b      	mov	r3, r1
 8002118:	18db      	adds	r3, r3, r3
 800211a:	653b      	str	r3, [r7, #80]	@ 0x50
 800211c:	4613      	mov	r3, r2
 800211e:	eb42 0303 	adc.w	r3, r2, r3
 8002122:	657b      	str	r3, [r7, #84]	@ 0x54
 8002124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800212c:	f7fe f8c0 	bl	80002b0 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4b61      	ldr	r3, [pc, #388]	@ (80022bc <UART_SetConfig+0x2d4>)
 8002136:	fba3 2302 	umull	r2, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	011c      	lsls	r4, r3, #4
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002148:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800214c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	1891      	adds	r1, r2, r2
 8002156:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002158:	415b      	adcs	r3, r3
 800215a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800215c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002160:	4641      	mov	r1, r8
 8002162:	eb12 0a01 	adds.w	sl, r2, r1
 8002166:	4649      	mov	r1, r9
 8002168:	eb43 0b01 	adc.w	fp, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800217c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002180:	4692      	mov	sl, r2
 8002182:	469b      	mov	fp, r3
 8002184:	4643      	mov	r3, r8
 8002186:	eb1a 0303 	adds.w	r3, sl, r3
 800218a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800218e:	464b      	mov	r3, r9
 8002190:	eb4b 0303 	adc.w	r3, fp, r3
 8002194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80021a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80021ac:	460b      	mov	r3, r1
 80021ae:	18db      	adds	r3, r3, r3
 80021b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80021b2:	4613      	mov	r3, r2
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021c2:	f7fe f875 	bl	80002b0 <__aeabi_uldivmod>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <UART_SetConfig+0x2d4>)
 80021ce:	fba3 2301 	umull	r2, r3, r3, r1
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2264      	movs	r2, #100	@ 0x64
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021e2:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <UART_SetConfig+0x2d4>)
 80021e4:	fba3 2302 	umull	r2, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021f0:	441c      	add	r4, r3
 80021f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002204:	4642      	mov	r2, r8
 8002206:	464b      	mov	r3, r9
 8002208:	1891      	adds	r1, r2, r2
 800220a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800220c:	415b      	adcs	r3, r3
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002214:	4641      	mov	r1, r8
 8002216:	1851      	adds	r1, r2, r1
 8002218:	6339      	str	r1, [r7, #48]	@ 0x30
 800221a:	4649      	mov	r1, r9
 800221c:	414b      	adcs	r3, r1
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800222c:	4659      	mov	r1, fp
 800222e:	00cb      	lsls	r3, r1, #3
 8002230:	4651      	mov	r1, sl
 8002232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002236:	4651      	mov	r1, sl
 8002238:	00ca      	lsls	r2, r1, #3
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	4603      	mov	r3, r0
 8002240:	4642      	mov	r2, r8
 8002242:	189b      	adds	r3, r3, r2
 8002244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002248:	464b      	mov	r3, r9
 800224a:	460a      	mov	r2, r1
 800224c:	eb42 0303 	adc.w	r3, r2, r3
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002260:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002268:	460b      	mov	r3, r1
 800226a:	18db      	adds	r3, r3, r3
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226e:	4613      	mov	r3, r2
 8002270:	eb42 0303 	adc.w	r3, r2, r3
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800227a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800227e:	f7fe f817 	bl	80002b0 <__aeabi_uldivmod>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <UART_SetConfig+0x2d4>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	@ 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3332      	adds	r3, #50	@ 0x32
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <UART_SetConfig+0x2d4>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4422      	add	r2, r4
 80022ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022b0:	e106      	b.n	80024c0 <UART_SetConfig+0x4d8>
 80022b2:	bf00      	nop
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40011400 	.word	0x40011400
 80022bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022c4:	2200      	movs	r2, #0
 80022c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022d2:	4642      	mov	r2, r8
 80022d4:	464b      	mov	r3, r9
 80022d6:	1891      	adds	r1, r2, r2
 80022d8:	6239      	str	r1, [r7, #32]
 80022da:	415b      	adcs	r3, r3
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022e2:	4641      	mov	r1, r8
 80022e4:	1854      	adds	r4, r2, r1
 80022e6:	4649      	mov	r1, r9
 80022e8:	eb43 0501 	adc.w	r5, r3, r1
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	00eb      	lsls	r3, r5, #3
 80022f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	4643      	mov	r3, r8
 8002302:	18e3      	adds	r3, r4, r3
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002308:	464b      	mov	r3, r9
 800230a:	eb45 0303 	adc.w	r3, r5, r3
 800230e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800231e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800232e:	4629      	mov	r1, r5
 8002330:	008b      	lsls	r3, r1, #2
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002338:	4621      	mov	r1, r4
 800233a:	008a      	lsls	r2, r1, #2
 800233c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002340:	f7fd ffb6 	bl	80002b0 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b60      	ldr	r3, [pc, #384]	@ (80024cc <UART_SetConfig+0x4e4>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011c      	lsls	r4, r3, #4
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800235c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	61b9      	str	r1, [r7, #24]
 800236c:	415b      	adcs	r3, r3
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002374:	4641      	mov	r1, r8
 8002376:	1851      	adds	r1, r2, r1
 8002378:	6139      	str	r1, [r7, #16]
 800237a:	4649      	mov	r1, r9
 800237c:	414b      	adcs	r3, r1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800238c:	4659      	mov	r1, fp
 800238e:	00cb      	lsls	r3, r1, #3
 8002390:	4651      	mov	r1, sl
 8002392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002396:	4651      	mov	r1, sl
 8002398:	00ca      	lsls	r2, r1, #3
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	4642      	mov	r2, r8
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023a8:	464b      	mov	r3, r9
 80023aa:	460a      	mov	r2, r1
 80023ac:	eb42 0303 	adc.w	r3, r2, r3
 80023b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023cc:	4649      	mov	r1, r9
 80023ce:	008b      	lsls	r3, r1, #2
 80023d0:	4641      	mov	r1, r8
 80023d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d6:	4641      	mov	r1, r8
 80023d8:	008a      	lsls	r2, r1, #2
 80023da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023de:	f7fd ff67 	bl	80002b0 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <UART_SetConfig+0x4e4>)
 80023ea:	fba3 2301 	umull	r2, r3, r3, r1
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2264      	movs	r2, #100	@ 0x64
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	1acb      	subs	r3, r1, r3
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	3332      	adds	r3, #50	@ 0x32
 80023fc:	4a33      	ldr	r2, [pc, #204]	@ (80024cc <UART_SetConfig+0x4e4>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002408:	441c      	add	r4, r3
 800240a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800240e:	2200      	movs	r2, #0
 8002410:	673b      	str	r3, [r7, #112]	@ 0x70
 8002412:	677a      	str	r2, [r7, #116]	@ 0x74
 8002414:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	415b      	adcs	r3, r3
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002428:	4641      	mov	r1, r8
 800242a:	1851      	adds	r1, r2, r1
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	4649      	mov	r1, r9
 8002430:	414b      	adcs	r3, r1
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002440:	4659      	mov	r1, fp
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4651      	mov	r1, sl
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4651      	mov	r1, sl
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4642      	mov	r2, r8
 8002456:	189b      	adds	r3, r3, r2
 8002458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800245a:	464b      	mov	r3, r9
 800245c:	460a      	mov	r2, r1
 800245e:	eb42 0303 	adc.w	r3, r2, r3
 8002462:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	663b      	str	r3, [r7, #96]	@ 0x60
 800246e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800247c:	4649      	mov	r1, r9
 800247e:	008b      	lsls	r3, r1, #2
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002486:	4641      	mov	r1, r8
 8002488:	008a      	lsls	r2, r1, #2
 800248a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800248e:	f7fd ff0f 	bl	80002b0 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <UART_SetConfig+0x4e4>)
 8002498:	fba3 1302 	umull	r1, r3, r3, r2
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	2164      	movs	r1, #100	@ 0x64
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	3332      	adds	r3, #50	@ 0x32
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <UART_SetConfig+0x4e4>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4422      	add	r2, r4
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024cc:	51eb851f 	.word	0x51eb851f

080024d0 <std>:
 80024d0:	2300      	movs	r3, #0
 80024d2:	b510      	push	{r4, lr}
 80024d4:	4604      	mov	r4, r0
 80024d6:	e9c0 3300 	strd	r3, r3, [r0]
 80024da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024de:	6083      	str	r3, [r0, #8]
 80024e0:	8181      	strh	r1, [r0, #12]
 80024e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80024e4:	81c2      	strh	r2, [r0, #14]
 80024e6:	6183      	str	r3, [r0, #24]
 80024e8:	4619      	mov	r1, r3
 80024ea:	2208      	movs	r2, #8
 80024ec:	305c      	adds	r0, #92	@ 0x5c
 80024ee:	f000 fa07 	bl	8002900 <memset>
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <std+0x58>)
 80024f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <std+0x5c>)
 80024f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <std+0x60>)
 80024fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <std+0x64>)
 8002500:	6323      	str	r3, [r4, #48]	@ 0x30
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <std+0x68>)
 8002504:	6224      	str	r4, [r4, #32]
 8002506:	429c      	cmp	r4, r3
 8002508:	d006      	beq.n	8002518 <std+0x48>
 800250a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800250e:	4294      	cmp	r4, r2
 8002510:	d002      	beq.n	8002518 <std+0x48>
 8002512:	33d0      	adds	r3, #208	@ 0xd0
 8002514:	429c      	cmp	r4, r3
 8002516:	d105      	bne.n	8002524 <std+0x54>
 8002518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800251c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002520:	f000 ba66 	b.w	80029f0 <__retarget_lock_init_recursive>
 8002524:	bd10      	pop	{r4, pc}
 8002526:	bf00      	nop
 8002528:	08002751 	.word	0x08002751
 800252c:	08002773 	.word	0x08002773
 8002530:	080027ab 	.word	0x080027ab
 8002534:	080027cf 	.word	0x080027cf
 8002538:	200000d4 	.word	0x200000d4

0800253c <stdio_exit_handler>:
 800253c:	4a02      	ldr	r2, [pc, #8]	@ (8002548 <stdio_exit_handler+0xc>)
 800253e:	4903      	ldr	r1, [pc, #12]	@ (800254c <stdio_exit_handler+0x10>)
 8002540:	4803      	ldr	r0, [pc, #12]	@ (8002550 <stdio_exit_handler+0x14>)
 8002542:	f000 b869 	b.w	8002618 <_fwalk_sglue>
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c
 800254c:	080032bd 	.word	0x080032bd
 8002550:	2000001c 	.word	0x2000001c

08002554 <cleanup_stdio>:
 8002554:	6841      	ldr	r1, [r0, #4]
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <cleanup_stdio+0x34>)
 8002558:	4299      	cmp	r1, r3
 800255a:	b510      	push	{r4, lr}
 800255c:	4604      	mov	r4, r0
 800255e:	d001      	beq.n	8002564 <cleanup_stdio+0x10>
 8002560:	f000 feac 	bl	80032bc <_fflush_r>
 8002564:	68a1      	ldr	r1, [r4, #8]
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <cleanup_stdio+0x38>)
 8002568:	4299      	cmp	r1, r3
 800256a:	d002      	beq.n	8002572 <cleanup_stdio+0x1e>
 800256c:	4620      	mov	r0, r4
 800256e:	f000 fea5 	bl	80032bc <_fflush_r>
 8002572:	68e1      	ldr	r1, [r4, #12]
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <cleanup_stdio+0x3c>)
 8002576:	4299      	cmp	r1, r3
 8002578:	d004      	beq.n	8002584 <cleanup_stdio+0x30>
 800257a:	4620      	mov	r0, r4
 800257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002580:	f000 be9c 	b.w	80032bc <_fflush_r>
 8002584:	bd10      	pop	{r4, pc}
 8002586:	bf00      	nop
 8002588:	200000d4 	.word	0x200000d4
 800258c:	2000013c 	.word	0x2000013c
 8002590:	200001a4 	.word	0x200001a4

08002594 <global_stdio_init.part.0>:
 8002594:	b510      	push	{r4, lr}
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <global_stdio_init.part.0+0x30>)
 8002598:	4c0b      	ldr	r4, [pc, #44]	@ (80025c8 <global_stdio_init.part.0+0x34>)
 800259a:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <global_stdio_init.part.0+0x38>)
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	4620      	mov	r0, r4
 80025a0:	2200      	movs	r2, #0
 80025a2:	2104      	movs	r1, #4
 80025a4:	f7ff ff94 	bl	80024d0 <std>
 80025a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80025ac:	2201      	movs	r2, #1
 80025ae:	2109      	movs	r1, #9
 80025b0:	f7ff ff8e 	bl	80024d0 <std>
 80025b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025b8:	2202      	movs	r2, #2
 80025ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025be:	2112      	movs	r1, #18
 80025c0:	f7ff bf86 	b.w	80024d0 <std>
 80025c4:	2000020c 	.word	0x2000020c
 80025c8:	200000d4 	.word	0x200000d4
 80025cc:	0800253d 	.word	0x0800253d

080025d0 <__sfp_lock_acquire>:
 80025d0:	4801      	ldr	r0, [pc, #4]	@ (80025d8 <__sfp_lock_acquire+0x8>)
 80025d2:	f000 ba0e 	b.w	80029f2 <__retarget_lock_acquire_recursive>
 80025d6:	bf00      	nop
 80025d8:	20000215 	.word	0x20000215

080025dc <__sfp_lock_release>:
 80025dc:	4801      	ldr	r0, [pc, #4]	@ (80025e4 <__sfp_lock_release+0x8>)
 80025de:	f000 ba09 	b.w	80029f4 <__retarget_lock_release_recursive>
 80025e2:	bf00      	nop
 80025e4:	20000215 	.word	0x20000215

080025e8 <__sinit>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	4604      	mov	r4, r0
 80025ec:	f7ff fff0 	bl	80025d0 <__sfp_lock_acquire>
 80025f0:	6a23      	ldr	r3, [r4, #32]
 80025f2:	b11b      	cbz	r3, 80025fc <__sinit+0x14>
 80025f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f8:	f7ff bff0 	b.w	80025dc <__sfp_lock_release>
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <__sinit+0x28>)
 80025fe:	6223      	str	r3, [r4, #32]
 8002600:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <__sinit+0x2c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f5      	bne.n	80025f4 <__sinit+0xc>
 8002608:	f7ff ffc4 	bl	8002594 <global_stdio_init.part.0>
 800260c:	e7f2      	b.n	80025f4 <__sinit+0xc>
 800260e:	bf00      	nop
 8002610:	08002555 	.word	0x08002555
 8002614:	2000020c 	.word	0x2000020c

08002618 <_fwalk_sglue>:
 8002618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800261c:	4607      	mov	r7, r0
 800261e:	4688      	mov	r8, r1
 8002620:	4614      	mov	r4, r2
 8002622:	2600      	movs	r6, #0
 8002624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002628:	f1b9 0901 	subs.w	r9, r9, #1
 800262c:	d505      	bpl.n	800263a <_fwalk_sglue+0x22>
 800262e:	6824      	ldr	r4, [r4, #0]
 8002630:	2c00      	cmp	r4, #0
 8002632:	d1f7      	bne.n	8002624 <_fwalk_sglue+0xc>
 8002634:	4630      	mov	r0, r6
 8002636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800263a:	89ab      	ldrh	r3, [r5, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d907      	bls.n	8002650 <_fwalk_sglue+0x38>
 8002640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002644:	3301      	adds	r3, #1
 8002646:	d003      	beq.n	8002650 <_fwalk_sglue+0x38>
 8002648:	4629      	mov	r1, r5
 800264a:	4638      	mov	r0, r7
 800264c:	47c0      	blx	r8
 800264e:	4306      	orrs	r6, r0
 8002650:	3568      	adds	r5, #104	@ 0x68
 8002652:	e7e9      	b.n	8002628 <_fwalk_sglue+0x10>

08002654 <_puts_r>:
 8002654:	6a03      	ldr	r3, [r0, #32]
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	6884      	ldr	r4, [r0, #8]
 800265a:	4605      	mov	r5, r0
 800265c:	460e      	mov	r6, r1
 800265e:	b90b      	cbnz	r3, 8002664 <_puts_r+0x10>
 8002660:	f7ff ffc2 	bl	80025e8 <__sinit>
 8002664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002666:	07db      	lsls	r3, r3, #31
 8002668:	d405      	bmi.n	8002676 <_puts_r+0x22>
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	0598      	lsls	r0, r3, #22
 800266e:	d402      	bmi.n	8002676 <_puts_r+0x22>
 8002670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002672:	f000 f9be 	bl	80029f2 <__retarget_lock_acquire_recursive>
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	0719      	lsls	r1, r3, #28
 800267a:	d502      	bpl.n	8002682 <_puts_r+0x2e>
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d135      	bne.n	80026ee <_puts_r+0x9a>
 8002682:	4621      	mov	r1, r4
 8002684:	4628      	mov	r0, r5
 8002686:	f000 f8e5 	bl	8002854 <__swsetup_r>
 800268a:	b380      	cbz	r0, 80026ee <_puts_r+0x9a>
 800268c:	f04f 35ff 	mov.w	r5, #4294967295
 8002690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002692:	07da      	lsls	r2, r3, #31
 8002694:	d405      	bmi.n	80026a2 <_puts_r+0x4e>
 8002696:	89a3      	ldrh	r3, [r4, #12]
 8002698:	059b      	lsls	r3, r3, #22
 800269a:	d402      	bmi.n	80026a2 <_puts_r+0x4e>
 800269c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800269e:	f000 f9a9 	bl	80029f4 <__retarget_lock_release_recursive>
 80026a2:	4628      	mov	r0, r5
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da04      	bge.n	80026b4 <_puts_r+0x60>
 80026aa:	69a2      	ldr	r2, [r4, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dc17      	bgt.n	80026e0 <_puts_r+0x8c>
 80026b0:	290a      	cmp	r1, #10
 80026b2:	d015      	beq.n	80026e0 <_puts_r+0x8c>
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	6022      	str	r2, [r4, #0]
 80026ba:	7019      	strb	r1, [r3, #0]
 80026bc:	68a3      	ldr	r3, [r4, #8]
 80026be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60a3      	str	r3, [r4, #8]
 80026c6:	2900      	cmp	r1, #0
 80026c8:	d1ed      	bne.n	80026a6 <_puts_r+0x52>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da11      	bge.n	80026f2 <_puts_r+0x9e>
 80026ce:	4622      	mov	r2, r4
 80026d0:	210a      	movs	r1, #10
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f87f 	bl	80027d6 <__swbuf_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d0d7      	beq.n	800268c <_puts_r+0x38>
 80026dc:	250a      	movs	r5, #10
 80026de:	e7d7      	b.n	8002690 <_puts_r+0x3c>
 80026e0:	4622      	mov	r2, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f877 	bl	80027d6 <__swbuf_r>
 80026e8:	3001      	adds	r0, #1
 80026ea:	d1e7      	bne.n	80026bc <_puts_r+0x68>
 80026ec:	e7ce      	b.n	800268c <_puts_r+0x38>
 80026ee:	3e01      	subs	r6, #1
 80026f0:	e7e4      	b.n	80026bc <_puts_r+0x68>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	6022      	str	r2, [r4, #0]
 80026f8:	220a      	movs	r2, #10
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e7ee      	b.n	80026dc <_puts_r+0x88>
	...

08002700 <puts>:
 8002700:	4b02      	ldr	r3, [pc, #8]	@ (800270c <puts+0xc>)
 8002702:	4601      	mov	r1, r0
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f7ff bfa5 	b.w	8002654 <_puts_r>
 800270a:	bf00      	nop
 800270c:	20000018 	.word	0x20000018

08002710 <siprintf>:
 8002710:	b40e      	push	{r1, r2, r3}
 8002712:	b500      	push	{lr}
 8002714:	b09c      	sub	sp, #112	@ 0x70
 8002716:	ab1d      	add	r3, sp, #116	@ 0x74
 8002718:	9002      	str	r0, [sp, #8]
 800271a:	9006      	str	r0, [sp, #24]
 800271c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002720:	4809      	ldr	r0, [pc, #36]	@ (8002748 <siprintf+0x38>)
 8002722:	9107      	str	r1, [sp, #28]
 8002724:	9104      	str	r1, [sp, #16]
 8002726:	4909      	ldr	r1, [pc, #36]	@ (800274c <siprintf+0x3c>)
 8002728:	f853 2b04 	ldr.w	r2, [r3], #4
 800272c:	9105      	str	r1, [sp, #20]
 800272e:	6800      	ldr	r0, [r0, #0]
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	a902      	add	r1, sp, #8
 8002734:	f000 fab4 	bl	8002ca0 <_svfiprintf_r>
 8002738:	9b02      	ldr	r3, [sp, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	b01c      	add	sp, #112	@ 0x70
 8002740:	f85d eb04 	ldr.w	lr, [sp], #4
 8002744:	b003      	add	sp, #12
 8002746:	4770      	bx	lr
 8002748:	20000018 	.word	0x20000018
 800274c:	ffff0208 	.word	0xffff0208

08002750 <__sread>:
 8002750:	b510      	push	{r4, lr}
 8002752:	460c      	mov	r4, r1
 8002754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002758:	f000 f8fc 	bl	8002954 <_read_r>
 800275c:	2800      	cmp	r0, #0
 800275e:	bfab      	itete	ge
 8002760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002762:	89a3      	ldrhlt	r3, [r4, #12]
 8002764:	181b      	addge	r3, r3, r0
 8002766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800276a:	bfac      	ite	ge
 800276c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800276e:	81a3      	strhlt	r3, [r4, #12]
 8002770:	bd10      	pop	{r4, pc}

08002772 <__swrite>:
 8002772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002776:	461f      	mov	r7, r3
 8002778:	898b      	ldrh	r3, [r1, #12]
 800277a:	05db      	lsls	r3, r3, #23
 800277c:	4605      	mov	r5, r0
 800277e:	460c      	mov	r4, r1
 8002780:	4616      	mov	r6, r2
 8002782:	d505      	bpl.n	8002790 <__swrite+0x1e>
 8002784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002788:	2302      	movs	r3, #2
 800278a:	2200      	movs	r2, #0
 800278c:	f000 f8d0 	bl	8002930 <_lseek_r>
 8002790:	89a3      	ldrh	r3, [r4, #12]
 8002792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800279a:	81a3      	strh	r3, [r4, #12]
 800279c:	4632      	mov	r2, r6
 800279e:	463b      	mov	r3, r7
 80027a0:	4628      	mov	r0, r5
 80027a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027a6:	f000 b8e7 	b.w	8002978 <_write_r>

080027aa <__sseek>:
 80027aa:	b510      	push	{r4, lr}
 80027ac:	460c      	mov	r4, r1
 80027ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027b2:	f000 f8bd 	bl	8002930 <_lseek_r>
 80027b6:	1c43      	adds	r3, r0, #1
 80027b8:	89a3      	ldrh	r3, [r4, #12]
 80027ba:	bf15      	itete	ne
 80027bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80027c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027c6:	81a3      	strheq	r3, [r4, #12]
 80027c8:	bf18      	it	ne
 80027ca:	81a3      	strhne	r3, [r4, #12]
 80027cc:	bd10      	pop	{r4, pc}

080027ce <__sclose>:
 80027ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d2:	f000 b89d 	b.w	8002910 <_close_r>

080027d6 <__swbuf_r>:
 80027d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d8:	460e      	mov	r6, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	4605      	mov	r5, r0
 80027de:	b118      	cbz	r0, 80027e8 <__swbuf_r+0x12>
 80027e0:	6a03      	ldr	r3, [r0, #32]
 80027e2:	b90b      	cbnz	r3, 80027e8 <__swbuf_r+0x12>
 80027e4:	f7ff ff00 	bl	80025e8 <__sinit>
 80027e8:	69a3      	ldr	r3, [r4, #24]
 80027ea:	60a3      	str	r3, [r4, #8]
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	071a      	lsls	r2, r3, #28
 80027f0:	d501      	bpl.n	80027f6 <__swbuf_r+0x20>
 80027f2:	6923      	ldr	r3, [r4, #16]
 80027f4:	b943      	cbnz	r3, 8002808 <__swbuf_r+0x32>
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f82b 	bl	8002854 <__swsetup_r>
 80027fe:	b118      	cbz	r0, 8002808 <__swbuf_r+0x32>
 8002800:	f04f 37ff 	mov.w	r7, #4294967295
 8002804:	4638      	mov	r0, r7
 8002806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	6922      	ldr	r2, [r4, #16]
 800280c:	1a98      	subs	r0, r3, r2
 800280e:	6963      	ldr	r3, [r4, #20]
 8002810:	b2f6      	uxtb	r6, r6
 8002812:	4283      	cmp	r3, r0
 8002814:	4637      	mov	r7, r6
 8002816:	dc05      	bgt.n	8002824 <__swbuf_r+0x4e>
 8002818:	4621      	mov	r1, r4
 800281a:	4628      	mov	r0, r5
 800281c:	f000 fd4e 	bl	80032bc <_fflush_r>
 8002820:	2800      	cmp	r0, #0
 8002822:	d1ed      	bne.n	8002800 <__swbuf_r+0x2a>
 8002824:	68a3      	ldr	r3, [r4, #8]
 8002826:	3b01      	subs	r3, #1
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	6022      	str	r2, [r4, #0]
 8002830:	701e      	strb	r6, [r3, #0]
 8002832:	6962      	ldr	r2, [r4, #20]
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	429a      	cmp	r2, r3
 8002838:	d004      	beq.n	8002844 <__swbuf_r+0x6e>
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	07db      	lsls	r3, r3, #31
 800283e:	d5e1      	bpl.n	8002804 <__swbuf_r+0x2e>
 8002840:	2e0a      	cmp	r6, #10
 8002842:	d1df      	bne.n	8002804 <__swbuf_r+0x2e>
 8002844:	4621      	mov	r1, r4
 8002846:	4628      	mov	r0, r5
 8002848:	f000 fd38 	bl	80032bc <_fflush_r>
 800284c:	2800      	cmp	r0, #0
 800284e:	d0d9      	beq.n	8002804 <__swbuf_r+0x2e>
 8002850:	e7d6      	b.n	8002800 <__swbuf_r+0x2a>
	...

08002854 <__swsetup_r>:
 8002854:	b538      	push	{r3, r4, r5, lr}
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <__swsetup_r+0xa8>)
 8002858:	4605      	mov	r5, r0
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	460c      	mov	r4, r1
 800285e:	b118      	cbz	r0, 8002868 <__swsetup_r+0x14>
 8002860:	6a03      	ldr	r3, [r0, #32]
 8002862:	b90b      	cbnz	r3, 8002868 <__swsetup_r+0x14>
 8002864:	f7ff fec0 	bl	80025e8 <__sinit>
 8002868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800286c:	0719      	lsls	r1, r3, #28
 800286e:	d422      	bmi.n	80028b6 <__swsetup_r+0x62>
 8002870:	06da      	lsls	r2, r3, #27
 8002872:	d407      	bmi.n	8002884 <__swsetup_r+0x30>
 8002874:	2209      	movs	r2, #9
 8002876:	602a      	str	r2, [r5, #0]
 8002878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800287c:	81a3      	strh	r3, [r4, #12]
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	e033      	b.n	80028ec <__swsetup_r+0x98>
 8002884:	0758      	lsls	r0, r3, #29
 8002886:	d512      	bpl.n	80028ae <__swsetup_r+0x5a>
 8002888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800288a:	b141      	cbz	r1, 800289e <__swsetup_r+0x4a>
 800288c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002890:	4299      	cmp	r1, r3
 8002892:	d002      	beq.n	800289a <__swsetup_r+0x46>
 8002894:	4628      	mov	r0, r5
 8002896:	f000 f8af 	bl	80029f8 <_free_r>
 800289a:	2300      	movs	r3, #0
 800289c:	6363      	str	r3, [r4, #52]	@ 0x34
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80028a4:	81a3      	strh	r3, [r4, #12]
 80028a6:	2300      	movs	r3, #0
 80028a8:	6063      	str	r3, [r4, #4]
 80028aa:	6923      	ldr	r3, [r4, #16]
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	81a3      	strh	r3, [r4, #12]
 80028b6:	6923      	ldr	r3, [r4, #16]
 80028b8:	b94b      	cbnz	r3, 80028ce <__swsetup_r+0x7a>
 80028ba:	89a3      	ldrh	r3, [r4, #12]
 80028bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c4:	d003      	beq.n	80028ce <__swsetup_r+0x7a>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4628      	mov	r0, r5
 80028ca:	f000 fd45 	bl	8003358 <__smakebuf_r>
 80028ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d2:	f013 0201 	ands.w	r2, r3, #1
 80028d6:	d00a      	beq.n	80028ee <__swsetup_r+0x9a>
 80028d8:	2200      	movs	r2, #0
 80028da:	60a2      	str	r2, [r4, #8]
 80028dc:	6962      	ldr	r2, [r4, #20]
 80028de:	4252      	negs	r2, r2
 80028e0:	61a2      	str	r2, [r4, #24]
 80028e2:	6922      	ldr	r2, [r4, #16]
 80028e4:	b942      	cbnz	r2, 80028f8 <__swsetup_r+0xa4>
 80028e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028ea:	d1c5      	bne.n	8002878 <__swsetup_r+0x24>
 80028ec:	bd38      	pop	{r3, r4, r5, pc}
 80028ee:	0799      	lsls	r1, r3, #30
 80028f0:	bf58      	it	pl
 80028f2:	6962      	ldrpl	r2, [r4, #20]
 80028f4:	60a2      	str	r2, [r4, #8]
 80028f6:	e7f4      	b.n	80028e2 <__swsetup_r+0x8e>
 80028f8:	2000      	movs	r0, #0
 80028fa:	e7f7      	b.n	80028ec <__swsetup_r+0x98>
 80028fc:	20000018 	.word	0x20000018

08002900 <memset>:
 8002900:	4402      	add	r2, r0
 8002902:	4603      	mov	r3, r0
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <memset+0xa>
 8002908:	4770      	bx	lr
 800290a:	f803 1b01 	strb.w	r1, [r3], #1
 800290e:	e7f9      	b.n	8002904 <memset+0x4>

08002910 <_close_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d06      	ldr	r5, [pc, #24]	@ (800292c <_close_r+0x1c>)
 8002914:	2300      	movs	r3, #0
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	f7fe f801 	bl	8000922 <_close>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_close_r+0x1a>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_close_r+0x1a>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	20000210 	.word	0x20000210

08002930 <_lseek_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4d07      	ldr	r5, [pc, #28]	@ (8002950 <_lseek_r+0x20>)
 8002934:	4604      	mov	r4, r0
 8002936:	4608      	mov	r0, r1
 8002938:	4611      	mov	r1, r2
 800293a:	2200      	movs	r2, #0
 800293c:	602a      	str	r2, [r5, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	f7fe f816 	bl	8000970 <_lseek>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_lseek_r+0x1e>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	b103      	cbz	r3, 800294e <_lseek_r+0x1e>
 800294c:	6023      	str	r3, [r4, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	20000210 	.word	0x20000210

08002954 <_read_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4d07      	ldr	r5, [pc, #28]	@ (8002974 <_read_r+0x20>)
 8002958:	4604      	mov	r4, r0
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	2200      	movs	r2, #0
 8002960:	602a      	str	r2, [r5, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f7fd ffa4 	bl	80008b0 <_read>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_read_r+0x1e>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_read_r+0x1e>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	20000210 	.word	0x20000210

08002978 <_write_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4d07      	ldr	r5, [pc, #28]	@ (8002998 <_write_r+0x20>)
 800297c:	4604      	mov	r4, r0
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	2200      	movs	r2, #0
 8002984:	602a      	str	r2, [r5, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	f7fd ffaf 	bl	80008ea <_write>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d102      	bne.n	8002996 <_write_r+0x1e>
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	b103      	cbz	r3, 8002996 <_write_r+0x1e>
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	20000210 	.word	0x20000210

0800299c <__errno>:
 800299c:	4b01      	ldr	r3, [pc, #4]	@ (80029a4 <__errno+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000018 	.word	0x20000018

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	@ (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	@ (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	@ (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	@ (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 fd98 	bl	80034f0 <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	080035a4 	.word	0x080035a4
 80029e4:	080035a4 	.word	0x080035a4
 80029e8:	080035a4 	.word	0x080035a4
 80029ec:	080035a8 	.word	0x080035a8

080029f0 <__retarget_lock_init_recursive>:
 80029f0:	4770      	bx	lr

080029f2 <__retarget_lock_acquire_recursive>:
 80029f2:	4770      	bx	lr

080029f4 <__retarget_lock_release_recursive>:
 80029f4:	4770      	bx	lr
	...

080029f8 <_free_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4605      	mov	r5, r0
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d041      	beq.n	8002a84 <_free_r+0x8c>
 8002a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a04:	1f0c      	subs	r4, r1, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bfb8      	it	lt
 8002a0a:	18e4      	addlt	r4, r4, r3
 8002a0c:	f000 f8e0 	bl	8002bd0 <__malloc_lock>
 8002a10:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <_free_r+0x90>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	b933      	cbnz	r3, 8002a24 <_free_r+0x2c>
 8002a16:	6063      	str	r3, [r4, #4]
 8002a18:	6014      	str	r4, [r2, #0]
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a20:	f000 b8dc 	b.w	8002bdc <__malloc_unlock>
 8002a24:	42a3      	cmp	r3, r4
 8002a26:	d908      	bls.n	8002a3a <_free_r+0x42>
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	1821      	adds	r1, r4, r0
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	bf01      	itttt	eq
 8002a30:	6819      	ldreq	r1, [r3, #0]
 8002a32:	685b      	ldreq	r3, [r3, #4]
 8002a34:	1809      	addeq	r1, r1, r0
 8002a36:	6021      	streq	r1, [r4, #0]
 8002a38:	e7ed      	b.n	8002a16 <_free_r+0x1e>
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	b10b      	cbz	r3, 8002a44 <_free_r+0x4c>
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	d9fa      	bls.n	8002a3a <_free_r+0x42>
 8002a44:	6811      	ldr	r1, [r2, #0]
 8002a46:	1850      	adds	r0, r2, r1
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	d10b      	bne.n	8002a64 <_free_r+0x6c>
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	4401      	add	r1, r0
 8002a50:	1850      	adds	r0, r2, r1
 8002a52:	4283      	cmp	r3, r0
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	d1e0      	bne.n	8002a1a <_free_r+0x22>
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	6053      	str	r3, [r2, #4]
 8002a5e:	4408      	add	r0, r1
 8002a60:	6010      	str	r0, [r2, #0]
 8002a62:	e7da      	b.n	8002a1a <_free_r+0x22>
 8002a64:	d902      	bls.n	8002a6c <_free_r+0x74>
 8002a66:	230c      	movs	r3, #12
 8002a68:	602b      	str	r3, [r5, #0]
 8002a6a:	e7d6      	b.n	8002a1a <_free_r+0x22>
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	1821      	adds	r1, r4, r0
 8002a70:	428b      	cmp	r3, r1
 8002a72:	bf04      	itt	eq
 8002a74:	6819      	ldreq	r1, [r3, #0]
 8002a76:	685b      	ldreq	r3, [r3, #4]
 8002a78:	6063      	str	r3, [r4, #4]
 8002a7a:	bf04      	itt	eq
 8002a7c:	1809      	addeq	r1, r1, r0
 8002a7e:	6021      	streq	r1, [r4, #0]
 8002a80:	6054      	str	r4, [r2, #4]
 8002a82:	e7ca      	b.n	8002a1a <_free_r+0x22>
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
 8002a86:	bf00      	nop
 8002a88:	2000021c 	.word	0x2000021c

08002a8c <sbrk_aligned>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8002acc <sbrk_aligned+0x40>)
 8002a90:	460c      	mov	r4, r1
 8002a92:	6831      	ldr	r1, [r6, #0]
 8002a94:	4605      	mov	r5, r0
 8002a96:	b911      	cbnz	r1, 8002a9e <sbrk_aligned+0x12>
 8002a98:	f000 fcd6 	bl	8003448 <_sbrk_r>
 8002a9c:	6030      	str	r0, [r6, #0]
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f000 fcd1 	bl	8003448 <_sbrk_r>
 8002aa6:	1c43      	adds	r3, r0, #1
 8002aa8:	d103      	bne.n	8002ab2 <sbrk_aligned+0x26>
 8002aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8002aae:	4620      	mov	r0, r4
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	1cc4      	adds	r4, r0, #3
 8002ab4:	f024 0403 	bic.w	r4, r4, #3
 8002ab8:	42a0      	cmp	r0, r4
 8002aba:	d0f8      	beq.n	8002aae <sbrk_aligned+0x22>
 8002abc:	1a21      	subs	r1, r4, r0
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f000 fcc2 	bl	8003448 <_sbrk_r>
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	d1f2      	bne.n	8002aae <sbrk_aligned+0x22>
 8002ac8:	e7ef      	b.n	8002aaa <sbrk_aligned+0x1e>
 8002aca:	bf00      	nop
 8002acc:	20000218 	.word	0x20000218

08002ad0 <_malloc_r>:
 8002ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ad4:	1ccd      	adds	r5, r1, #3
 8002ad6:	f025 0503 	bic.w	r5, r5, #3
 8002ada:	3508      	adds	r5, #8
 8002adc:	2d0c      	cmp	r5, #12
 8002ade:	bf38      	it	cc
 8002ae0:	250c      	movcc	r5, #12
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	4606      	mov	r6, r0
 8002ae6:	db01      	blt.n	8002aec <_malloc_r+0x1c>
 8002ae8:	42a9      	cmp	r1, r5
 8002aea:	d904      	bls.n	8002af6 <_malloc_r+0x26>
 8002aec:	230c      	movs	r3, #12
 8002aee:	6033      	str	r3, [r6, #0]
 8002af0:	2000      	movs	r0, #0
 8002af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bcc <_malloc_r+0xfc>
 8002afa:	f000 f869 	bl	8002bd0 <__malloc_lock>
 8002afe:	f8d8 3000 	ldr.w	r3, [r8]
 8002b02:	461c      	mov	r4, r3
 8002b04:	bb44      	cbnz	r4, 8002b58 <_malloc_r+0x88>
 8002b06:	4629      	mov	r1, r5
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f7ff ffbf 	bl	8002a8c <sbrk_aligned>
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	4604      	mov	r4, r0
 8002b12:	d158      	bne.n	8002bc6 <_malloc_r+0xf6>
 8002b14:	f8d8 4000 	ldr.w	r4, [r8]
 8002b18:	4627      	mov	r7, r4
 8002b1a:	2f00      	cmp	r7, #0
 8002b1c:	d143      	bne.n	8002ba6 <_malloc_r+0xd6>
 8002b1e:	2c00      	cmp	r4, #0
 8002b20:	d04b      	beq.n	8002bba <_malloc_r+0xea>
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	4639      	mov	r1, r7
 8002b26:	4630      	mov	r0, r6
 8002b28:	eb04 0903 	add.w	r9, r4, r3
 8002b2c:	f000 fc8c 	bl	8003448 <_sbrk_r>
 8002b30:	4581      	cmp	r9, r0
 8002b32:	d142      	bne.n	8002bba <_malloc_r+0xea>
 8002b34:	6821      	ldr	r1, [r4, #0]
 8002b36:	1a6d      	subs	r5, r5, r1
 8002b38:	4629      	mov	r1, r5
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f7ff ffa6 	bl	8002a8c <sbrk_aligned>
 8002b40:	3001      	adds	r0, #1
 8002b42:	d03a      	beq.n	8002bba <_malloc_r+0xea>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	442b      	add	r3, r5
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	bb62      	cbnz	r2, 8002bac <_malloc_r+0xdc>
 8002b52:	f8c8 7000 	str.w	r7, [r8]
 8002b56:	e00f      	b.n	8002b78 <_malloc_r+0xa8>
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	1b52      	subs	r2, r2, r5
 8002b5c:	d420      	bmi.n	8002ba0 <_malloc_r+0xd0>
 8002b5e:	2a0b      	cmp	r2, #11
 8002b60:	d917      	bls.n	8002b92 <_malloc_r+0xc2>
 8002b62:	1961      	adds	r1, r4, r5
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	6025      	str	r5, [r4, #0]
 8002b68:	bf18      	it	ne
 8002b6a:	6059      	strne	r1, [r3, #4]
 8002b6c:	6863      	ldr	r3, [r4, #4]
 8002b6e:	bf08      	it	eq
 8002b70:	f8c8 1000 	streq.w	r1, [r8]
 8002b74:	5162      	str	r2, [r4, r5]
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f000 f82f 	bl	8002bdc <__malloc_unlock>
 8002b7e:	f104 000b 	add.w	r0, r4, #11
 8002b82:	1d23      	adds	r3, r4, #4
 8002b84:	f020 0007 	bic.w	r0, r0, #7
 8002b88:	1ac2      	subs	r2, r0, r3
 8002b8a:	bf1c      	itt	ne
 8002b8c:	1a1b      	subne	r3, r3, r0
 8002b8e:	50a3      	strne	r3, [r4, r2]
 8002b90:	e7af      	b.n	8002af2 <_malloc_r+0x22>
 8002b92:	6862      	ldr	r2, [r4, #4]
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	bf0c      	ite	eq
 8002b98:	f8c8 2000 	streq.w	r2, [r8]
 8002b9c:	605a      	strne	r2, [r3, #4]
 8002b9e:	e7eb      	b.n	8002b78 <_malloc_r+0xa8>
 8002ba0:	4623      	mov	r3, r4
 8002ba2:	6864      	ldr	r4, [r4, #4]
 8002ba4:	e7ae      	b.n	8002b04 <_malloc_r+0x34>
 8002ba6:	463c      	mov	r4, r7
 8002ba8:	687f      	ldr	r7, [r7, #4]
 8002baa:	e7b6      	b.n	8002b1a <_malloc_r+0x4a>
 8002bac:	461a      	mov	r2, r3
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	42a3      	cmp	r3, r4
 8002bb2:	d1fb      	bne.n	8002bac <_malloc_r+0xdc>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	6053      	str	r3, [r2, #4]
 8002bb8:	e7de      	b.n	8002b78 <_malloc_r+0xa8>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	6033      	str	r3, [r6, #0]
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 f80c 	bl	8002bdc <__malloc_unlock>
 8002bc4:	e794      	b.n	8002af0 <_malloc_r+0x20>
 8002bc6:	6005      	str	r5, [r0, #0]
 8002bc8:	e7d6      	b.n	8002b78 <_malloc_r+0xa8>
 8002bca:	bf00      	nop
 8002bcc:	2000021c 	.word	0x2000021c

08002bd0 <__malloc_lock>:
 8002bd0:	4801      	ldr	r0, [pc, #4]	@ (8002bd8 <__malloc_lock+0x8>)
 8002bd2:	f7ff bf0e 	b.w	80029f2 <__retarget_lock_acquire_recursive>
 8002bd6:	bf00      	nop
 8002bd8:	20000214 	.word	0x20000214

08002bdc <__malloc_unlock>:
 8002bdc:	4801      	ldr	r0, [pc, #4]	@ (8002be4 <__malloc_unlock+0x8>)
 8002bde:	f7ff bf09 	b.w	80029f4 <__retarget_lock_release_recursive>
 8002be2:	bf00      	nop
 8002be4:	20000214 	.word	0x20000214

08002be8 <__ssputs_r>:
 8002be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bec:	688e      	ldr	r6, [r1, #8]
 8002bee:	461f      	mov	r7, r3
 8002bf0:	42be      	cmp	r6, r7
 8002bf2:	680b      	ldr	r3, [r1, #0]
 8002bf4:	4682      	mov	sl, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4690      	mov	r8, r2
 8002bfa:	d82d      	bhi.n	8002c58 <__ssputs_r+0x70>
 8002bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c04:	d026      	beq.n	8002c54 <__ssputs_r+0x6c>
 8002c06:	6965      	ldr	r5, [r4, #20]
 8002c08:	6909      	ldr	r1, [r1, #16]
 8002c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c0e:	eba3 0901 	sub.w	r9, r3, r1
 8002c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c16:	1c7b      	adds	r3, r7, #1
 8002c18:	444b      	add	r3, r9
 8002c1a:	106d      	asrs	r5, r5, #1
 8002c1c:	429d      	cmp	r5, r3
 8002c1e:	bf38      	it	cc
 8002c20:	461d      	movcc	r5, r3
 8002c22:	0553      	lsls	r3, r2, #21
 8002c24:	d527      	bpl.n	8002c76 <__ssputs_r+0x8e>
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7ff ff52 	bl	8002ad0 <_malloc_r>
 8002c2c:	4606      	mov	r6, r0
 8002c2e:	b360      	cbz	r0, 8002c8a <__ssputs_r+0xa2>
 8002c30:	6921      	ldr	r1, [r4, #16]
 8002c32:	464a      	mov	r2, r9
 8002c34:	f000 fc18 	bl	8003468 <memcpy>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	6126      	str	r6, [r4, #16]
 8002c46:	6165      	str	r5, [r4, #20]
 8002c48:	444e      	add	r6, r9
 8002c4a:	eba5 0509 	sub.w	r5, r5, r9
 8002c4e:	6026      	str	r6, [r4, #0]
 8002c50:	60a5      	str	r5, [r4, #8]
 8002c52:	463e      	mov	r6, r7
 8002c54:	42be      	cmp	r6, r7
 8002c56:	d900      	bls.n	8002c5a <__ssputs_r+0x72>
 8002c58:	463e      	mov	r6, r7
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	f000 fbb6 	bl	80033d0 <memmove>
 8002c64:	68a3      	ldr	r3, [r4, #8]
 8002c66:	1b9b      	subs	r3, r3, r6
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	4433      	add	r3, r6
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	2000      	movs	r0, #0
 8002c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c76:	462a      	mov	r2, r5
 8002c78:	f000 fc04 	bl	8003484 <_realloc_r>
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d1e0      	bne.n	8002c44 <__ssputs_r+0x5c>
 8002c82:	6921      	ldr	r1, [r4, #16]
 8002c84:	4650      	mov	r0, sl
 8002c86:	f7ff feb7 	bl	80029f8 <_free_r>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	f8ca 3000 	str.w	r3, [sl]
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	e7e9      	b.n	8002c72 <__ssputs_r+0x8a>
	...

08002ca0 <_svfiprintf_r>:
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	4698      	mov	r8, r3
 8002ca6:	898b      	ldrh	r3, [r1, #12]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	b09d      	sub	sp, #116	@ 0x74
 8002cac:	4607      	mov	r7, r0
 8002cae:	460d      	mov	r5, r1
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	d510      	bpl.n	8002cd6 <_svfiprintf_r+0x36>
 8002cb4:	690b      	ldr	r3, [r1, #16]
 8002cb6:	b973      	cbnz	r3, 8002cd6 <_svfiprintf_r+0x36>
 8002cb8:	2140      	movs	r1, #64	@ 0x40
 8002cba:	f7ff ff09 	bl	8002ad0 <_malloc_r>
 8002cbe:	6028      	str	r0, [r5, #0]
 8002cc0:	6128      	str	r0, [r5, #16]
 8002cc2:	b930      	cbnz	r0, 8002cd2 <_svfiprintf_r+0x32>
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	b01d      	add	sp, #116	@ 0x74
 8002cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd2:	2340      	movs	r3, #64	@ 0x40
 8002cd4:	616b      	str	r3, [r5, #20]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cda:	2320      	movs	r3, #32
 8002cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ce4:	2330      	movs	r3, #48	@ 0x30
 8002ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002e84 <_svfiprintf_r+0x1e4>
 8002cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cee:	f04f 0901 	mov.w	r9, #1
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	469a      	mov	sl, r3
 8002cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cfa:	b10a      	cbz	r2, 8002d00 <_svfiprintf_r+0x60>
 8002cfc:	2a25      	cmp	r2, #37	@ 0x25
 8002cfe:	d1f9      	bne.n	8002cf4 <_svfiprintf_r+0x54>
 8002d00:	ebba 0b04 	subs.w	fp, sl, r4
 8002d04:	d00b      	beq.n	8002d1e <_svfiprintf_r+0x7e>
 8002d06:	465b      	mov	r3, fp
 8002d08:	4622      	mov	r2, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	f7ff ff6b 	bl	8002be8 <__ssputs_r>
 8002d12:	3001      	adds	r0, #1
 8002d14:	f000 80a7 	beq.w	8002e66 <_svfiprintf_r+0x1c6>
 8002d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d1a:	445a      	add	r2, fp
 8002d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 809f 	beq.w	8002e66 <_svfiprintf_r+0x1c6>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d32:	f10a 0a01 	add.w	sl, sl, #1
 8002d36:	9304      	str	r3, [sp, #16]
 8002d38:	9307      	str	r3, [sp, #28]
 8002d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d40:	4654      	mov	r4, sl
 8002d42:	2205      	movs	r2, #5
 8002d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d48:	484e      	ldr	r0, [pc, #312]	@ (8002e84 <_svfiprintf_r+0x1e4>)
 8002d4a:	f7fd fa61 	bl	8000210 <memchr>
 8002d4e:	9a04      	ldr	r2, [sp, #16]
 8002d50:	b9d8      	cbnz	r0, 8002d8a <_svfiprintf_r+0xea>
 8002d52:	06d0      	lsls	r0, r2, #27
 8002d54:	bf44      	itt	mi
 8002d56:	2320      	movmi	r3, #32
 8002d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d5c:	0711      	lsls	r1, r2, #28
 8002d5e:	bf44      	itt	mi
 8002d60:	232b      	movmi	r3, #43	@ 0x2b
 8002d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d66:	f89a 3000 	ldrb.w	r3, [sl]
 8002d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d6c:	d015      	beq.n	8002d9a <_svfiprintf_r+0xfa>
 8002d6e:	9a07      	ldr	r2, [sp, #28]
 8002d70:	4654      	mov	r4, sl
 8002d72:	2000      	movs	r0, #0
 8002d74:	f04f 0c0a 	mov.w	ip, #10
 8002d78:	4621      	mov	r1, r4
 8002d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d7e:	3b30      	subs	r3, #48	@ 0x30
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d94b      	bls.n	8002e1c <_svfiprintf_r+0x17c>
 8002d84:	b1b0      	cbz	r0, 8002db4 <_svfiprintf_r+0x114>
 8002d86:	9207      	str	r2, [sp, #28]
 8002d88:	e014      	b.n	8002db4 <_svfiprintf_r+0x114>
 8002d8a:	eba0 0308 	sub.w	r3, r0, r8
 8002d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	9304      	str	r3, [sp, #16]
 8002d96:	46a2      	mov	sl, r4
 8002d98:	e7d2      	b.n	8002d40 <_svfiprintf_r+0xa0>
 8002d9a:	9b03      	ldr	r3, [sp, #12]
 8002d9c:	1d19      	adds	r1, r3, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	9103      	str	r1, [sp, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bfbb      	ittet	lt
 8002da6:	425b      	neglt	r3, r3
 8002da8:	f042 0202 	orrlt.w	r2, r2, #2
 8002dac:	9307      	strge	r3, [sp, #28]
 8002dae:	9307      	strlt	r3, [sp, #28]
 8002db0:	bfb8      	it	lt
 8002db2:	9204      	strlt	r2, [sp, #16]
 8002db4:	7823      	ldrb	r3, [r4, #0]
 8002db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002db8:	d10a      	bne.n	8002dd0 <_svfiprintf_r+0x130>
 8002dba:	7863      	ldrb	r3, [r4, #1]
 8002dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dbe:	d132      	bne.n	8002e26 <_svfiprintf_r+0x186>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9203      	str	r2, [sp, #12]
 8002dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dcc:	3402      	adds	r4, #2
 8002dce:	9305      	str	r3, [sp, #20]
 8002dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002e94 <_svfiprintf_r+0x1f4>
 8002dd4:	7821      	ldrb	r1, [r4, #0]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4650      	mov	r0, sl
 8002dda:	f7fd fa19 	bl	8000210 <memchr>
 8002dde:	b138      	cbz	r0, 8002df0 <_svfiprintf_r+0x150>
 8002de0:	9b04      	ldr	r3, [sp, #16]
 8002de2:	eba0 000a 	sub.w	r0, r0, sl
 8002de6:	2240      	movs	r2, #64	@ 0x40
 8002de8:	4082      	lsls	r2, r0
 8002dea:	4313      	orrs	r3, r2
 8002dec:	3401      	adds	r4, #1
 8002dee:	9304      	str	r3, [sp, #16]
 8002df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df4:	4824      	ldr	r0, [pc, #144]	@ (8002e88 <_svfiprintf_r+0x1e8>)
 8002df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dfa:	2206      	movs	r2, #6
 8002dfc:	f7fd fa08 	bl	8000210 <memchr>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d036      	beq.n	8002e72 <_svfiprintf_r+0x1d2>
 8002e04:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <_svfiprintf_r+0x1ec>)
 8002e06:	bb1b      	cbnz	r3, 8002e50 <_svfiprintf_r+0x1b0>
 8002e08:	9b03      	ldr	r3, [sp, #12]
 8002e0a:	3307      	adds	r3, #7
 8002e0c:	f023 0307 	bic.w	r3, r3, #7
 8002e10:	3308      	adds	r3, #8
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e16:	4433      	add	r3, r6
 8002e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e1a:	e76a      	b.n	8002cf2 <_svfiprintf_r+0x52>
 8002e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e20:	460c      	mov	r4, r1
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7a8      	b.n	8002d78 <_svfiprintf_r+0xd8>
 8002e26:	2300      	movs	r3, #0
 8002e28:	3401      	adds	r4, #1
 8002e2a:	9305      	str	r3, [sp, #20]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f04f 0c0a 	mov.w	ip, #10
 8002e32:	4620      	mov	r0, r4
 8002e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e38:	3a30      	subs	r2, #48	@ 0x30
 8002e3a:	2a09      	cmp	r2, #9
 8002e3c:	d903      	bls.n	8002e46 <_svfiprintf_r+0x1a6>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0c6      	beq.n	8002dd0 <_svfiprintf_r+0x130>
 8002e42:	9105      	str	r1, [sp, #20]
 8002e44:	e7c4      	b.n	8002dd0 <_svfiprintf_r+0x130>
 8002e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e7f0      	b.n	8002e32 <_svfiprintf_r+0x192>
 8002e50:	ab03      	add	r3, sp, #12
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	462a      	mov	r2, r5
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <_svfiprintf_r+0x1f0>)
 8002e58:	a904      	add	r1, sp, #16
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f3af 8000 	nop.w
 8002e60:	1c42      	adds	r2, r0, #1
 8002e62:	4606      	mov	r6, r0
 8002e64:	d1d6      	bne.n	8002e14 <_svfiprintf_r+0x174>
 8002e66:	89ab      	ldrh	r3, [r5, #12]
 8002e68:	065b      	lsls	r3, r3, #25
 8002e6a:	f53f af2d 	bmi.w	8002cc8 <_svfiprintf_r+0x28>
 8002e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e70:	e72c      	b.n	8002ccc <_svfiprintf_r+0x2c>
 8002e72:	ab03      	add	r3, sp, #12
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	462a      	mov	r2, r5
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <_svfiprintf_r+0x1f0>)
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	f000 f879 	bl	8002f74 <_printf_i>
 8002e82:	e7ed      	b.n	8002e60 <_svfiprintf_r+0x1c0>
 8002e84:	08003568 	.word	0x08003568
 8002e88:	08003572 	.word	0x08003572
 8002e8c:	00000000 	.word	0x00000000
 8002e90:	08002be9 	.word	0x08002be9
 8002e94:	0800356e 	.word	0x0800356e

08002e98 <_printf_common>:
 8002e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	4698      	mov	r8, r3
 8002ea0:	688a      	ldr	r2, [r1, #8]
 8002ea2:	690b      	ldr	r3, [r1, #16]
 8002ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bfb8      	it	lt
 8002eac:	4613      	movlt	r3, r2
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	b10a      	cbz	r2, 8002ebe <_printf_common+0x26>
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	0699      	lsls	r1, r3, #26
 8002ec2:	bf42      	ittt	mi
 8002ec4:	6833      	ldrmi	r3, [r6, #0]
 8002ec6:	3302      	addmi	r3, #2
 8002ec8:	6033      	strmi	r3, [r6, #0]
 8002eca:	6825      	ldr	r5, [r4, #0]
 8002ecc:	f015 0506 	ands.w	r5, r5, #6
 8002ed0:	d106      	bne.n	8002ee0 <_printf_common+0x48>
 8002ed2:	f104 0a19 	add.w	sl, r4, #25
 8002ed6:	68e3      	ldr	r3, [r4, #12]
 8002ed8:	6832      	ldr	r2, [r6, #0]
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	42ab      	cmp	r3, r5
 8002ede:	dc26      	bgt.n	8002f2e <_printf_common+0x96>
 8002ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	3b00      	subs	r3, #0
 8002ee8:	bf18      	it	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	0692      	lsls	r2, r2, #26
 8002eee:	d42b      	bmi.n	8002f48 <_printf_common+0xb0>
 8002ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c8      	blx	r9
 8002efa:	3001      	adds	r0, #1
 8002efc:	d01e      	beq.n	8002f3c <_printf_common+0xa4>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	6922      	ldr	r2, [r4, #16]
 8002f02:	f003 0306 	and.w	r3, r3, #6
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	bf02      	ittt	eq
 8002f0a:	68e5      	ldreq	r5, [r4, #12]
 8002f0c:	6833      	ldreq	r3, [r6, #0]
 8002f0e:	1aed      	subeq	r5, r5, r3
 8002f10:	68a3      	ldr	r3, [r4, #8]
 8002f12:	bf0c      	ite	eq
 8002f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f18:	2500      	movne	r5, #0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfc4      	itt	gt
 8002f1e:	1a9b      	subgt	r3, r3, r2
 8002f20:	18ed      	addgt	r5, r5, r3
 8002f22:	2600      	movs	r6, #0
 8002f24:	341a      	adds	r4, #26
 8002f26:	42b5      	cmp	r5, r6
 8002f28:	d11a      	bne.n	8002f60 <_printf_common+0xc8>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e008      	b.n	8002f40 <_printf_common+0xa8>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4652      	mov	r2, sl
 8002f32:	4641      	mov	r1, r8
 8002f34:	4638      	mov	r0, r7
 8002f36:	47c8      	blx	r9
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d103      	bne.n	8002f44 <_printf_common+0xac>
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f44:	3501      	adds	r5, #1
 8002f46:	e7c6      	b.n	8002ed6 <_printf_common+0x3e>
 8002f48:	18e1      	adds	r1, r4, r3
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	2030      	movs	r0, #48	@ 0x30
 8002f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f52:	4422      	add	r2, r4
 8002f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	e7c7      	b.n	8002ef0 <_printf_common+0x58>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4622      	mov	r2, r4
 8002f64:	4641      	mov	r1, r8
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c8      	blx	r9
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0e6      	beq.n	8002f3c <_printf_common+0xa4>
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7d9      	b.n	8002f26 <_printf_common+0x8e>
	...

08002f74 <_printf_i>:
 8002f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	7e0f      	ldrb	r7, [r1, #24]
 8002f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f7c:	2f78      	cmp	r7, #120	@ 0x78
 8002f7e:	4691      	mov	r9, r2
 8002f80:	4680      	mov	r8, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	469a      	mov	sl, r3
 8002f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f8a:	d807      	bhi.n	8002f9c <_printf_i+0x28>
 8002f8c:	2f62      	cmp	r7, #98	@ 0x62
 8002f8e:	d80a      	bhi.n	8002fa6 <_printf_i+0x32>
 8002f90:	2f00      	cmp	r7, #0
 8002f92:	f000 80d2 	beq.w	800313a <_printf_i+0x1c6>
 8002f96:	2f58      	cmp	r7, #88	@ 0x58
 8002f98:	f000 80b9 	beq.w	800310e <_printf_i+0x19a>
 8002f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fa4:	e03a      	b.n	800301c <_printf_i+0xa8>
 8002fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002faa:	2b15      	cmp	r3, #21
 8002fac:	d8f6      	bhi.n	8002f9c <_printf_i+0x28>
 8002fae:	a101      	add	r1, pc, #4	@ (adr r1, 8002fb4 <_printf_i+0x40>)
 8002fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	08003021 	.word	0x08003021
 8002fbc:	08002f9d 	.word	0x08002f9d
 8002fc0:	08002f9d 	.word	0x08002f9d
 8002fc4:	08002f9d 	.word	0x08002f9d
 8002fc8:	08002f9d 	.word	0x08002f9d
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08002f9d 	.word	0x08002f9d
 8002fd4:	08002f9d 	.word	0x08002f9d
 8002fd8:	08002f9d 	.word	0x08002f9d
 8002fdc:	08002f9d 	.word	0x08002f9d
 8002fe0:	08003121 	.word	0x08003121
 8002fe4:	0800304b 	.word	0x0800304b
 8002fe8:	080030db 	.word	0x080030db
 8002fec:	08002f9d 	.word	0x08002f9d
 8002ff0:	08002f9d 	.word	0x08002f9d
 8002ff4:	08003143 	.word	0x08003143
 8002ff8:	08002f9d 	.word	0x08002f9d
 8002ffc:	0800304b 	.word	0x0800304b
 8003000:	08002f9d 	.word	0x08002f9d
 8003004:	08002f9d 	.word	0x08002f9d
 8003008:	080030e3 	.word	0x080030e3
 800300c:	6833      	ldr	r3, [r6, #0]
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6032      	str	r2, [r6, #0]
 8003014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800301c:	2301      	movs	r3, #1
 800301e:	e09d      	b.n	800315c <_printf_i+0x1e8>
 8003020:	6833      	ldr	r3, [r6, #0]
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	6031      	str	r1, [r6, #0]
 8003028:	0606      	lsls	r6, r0, #24
 800302a:	d501      	bpl.n	8003030 <_printf_i+0xbc>
 800302c:	681d      	ldr	r5, [r3, #0]
 800302e:	e003      	b.n	8003038 <_printf_i+0xc4>
 8003030:	0645      	lsls	r5, r0, #25
 8003032:	d5fb      	bpl.n	800302c <_printf_i+0xb8>
 8003034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003038:	2d00      	cmp	r5, #0
 800303a:	da03      	bge.n	8003044 <_printf_i+0xd0>
 800303c:	232d      	movs	r3, #45	@ 0x2d
 800303e:	426d      	negs	r5, r5
 8003040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003044:	4859      	ldr	r0, [pc, #356]	@ (80031ac <_printf_i+0x238>)
 8003046:	230a      	movs	r3, #10
 8003048:	e011      	b.n	800306e <_printf_i+0xfa>
 800304a:	6821      	ldr	r1, [r4, #0]
 800304c:	6833      	ldr	r3, [r6, #0]
 800304e:	0608      	lsls	r0, r1, #24
 8003050:	f853 5b04 	ldr.w	r5, [r3], #4
 8003054:	d402      	bmi.n	800305c <_printf_i+0xe8>
 8003056:	0649      	lsls	r1, r1, #25
 8003058:	bf48      	it	mi
 800305a:	b2ad      	uxthmi	r5, r5
 800305c:	2f6f      	cmp	r7, #111	@ 0x6f
 800305e:	4853      	ldr	r0, [pc, #332]	@ (80031ac <_printf_i+0x238>)
 8003060:	6033      	str	r3, [r6, #0]
 8003062:	bf14      	ite	ne
 8003064:	230a      	movne	r3, #10
 8003066:	2308      	moveq	r3, #8
 8003068:	2100      	movs	r1, #0
 800306a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800306e:	6866      	ldr	r6, [r4, #4]
 8003070:	60a6      	str	r6, [r4, #8]
 8003072:	2e00      	cmp	r6, #0
 8003074:	bfa2      	ittt	ge
 8003076:	6821      	ldrge	r1, [r4, #0]
 8003078:	f021 0104 	bicge.w	r1, r1, #4
 800307c:	6021      	strge	r1, [r4, #0]
 800307e:	b90d      	cbnz	r5, 8003084 <_printf_i+0x110>
 8003080:	2e00      	cmp	r6, #0
 8003082:	d04b      	beq.n	800311c <_printf_i+0x1a8>
 8003084:	4616      	mov	r6, r2
 8003086:	fbb5 f1f3 	udiv	r1, r5, r3
 800308a:	fb03 5711 	mls	r7, r3, r1, r5
 800308e:	5dc7      	ldrb	r7, [r0, r7]
 8003090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003094:	462f      	mov	r7, r5
 8003096:	42bb      	cmp	r3, r7
 8003098:	460d      	mov	r5, r1
 800309a:	d9f4      	bls.n	8003086 <_printf_i+0x112>
 800309c:	2b08      	cmp	r3, #8
 800309e:	d10b      	bne.n	80030b8 <_printf_i+0x144>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	07df      	lsls	r7, r3, #31
 80030a4:	d508      	bpl.n	80030b8 <_printf_i+0x144>
 80030a6:	6923      	ldr	r3, [r4, #16]
 80030a8:	6861      	ldr	r1, [r4, #4]
 80030aa:	4299      	cmp	r1, r3
 80030ac:	bfde      	ittt	le
 80030ae:	2330      	movle	r3, #48	@ 0x30
 80030b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030b8:	1b92      	subs	r2, r2, r6
 80030ba:	6122      	str	r2, [r4, #16]
 80030bc:	f8cd a000 	str.w	sl, [sp]
 80030c0:	464b      	mov	r3, r9
 80030c2:	aa03      	add	r2, sp, #12
 80030c4:	4621      	mov	r1, r4
 80030c6:	4640      	mov	r0, r8
 80030c8:	f7ff fee6 	bl	8002e98 <_printf_common>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d14a      	bne.n	8003166 <_printf_i+0x1f2>
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	b004      	add	sp, #16
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	f043 0320 	orr.w	r3, r3, #32
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	4833      	ldr	r0, [pc, #204]	@ (80031b0 <_printf_i+0x23c>)
 80030e4:	2778      	movs	r7, #120	@ 0x78
 80030e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	6831      	ldr	r1, [r6, #0]
 80030ee:	061f      	lsls	r7, r3, #24
 80030f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80030f4:	d402      	bmi.n	80030fc <_printf_i+0x188>
 80030f6:	065f      	lsls	r7, r3, #25
 80030f8:	bf48      	it	mi
 80030fa:	b2ad      	uxthmi	r5, r5
 80030fc:	6031      	str	r1, [r6, #0]
 80030fe:	07d9      	lsls	r1, r3, #31
 8003100:	bf44      	itt	mi
 8003102:	f043 0320 	orrmi.w	r3, r3, #32
 8003106:	6023      	strmi	r3, [r4, #0]
 8003108:	b11d      	cbz	r5, 8003112 <_printf_i+0x19e>
 800310a:	2310      	movs	r3, #16
 800310c:	e7ac      	b.n	8003068 <_printf_i+0xf4>
 800310e:	4827      	ldr	r0, [pc, #156]	@ (80031ac <_printf_i+0x238>)
 8003110:	e7e9      	b.n	80030e6 <_printf_i+0x172>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f023 0320 	bic.w	r3, r3, #32
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	e7f6      	b.n	800310a <_printf_i+0x196>
 800311c:	4616      	mov	r6, r2
 800311e:	e7bd      	b.n	800309c <_printf_i+0x128>
 8003120:	6833      	ldr	r3, [r6, #0]
 8003122:	6825      	ldr	r5, [r4, #0]
 8003124:	6961      	ldr	r1, [r4, #20]
 8003126:	1d18      	adds	r0, r3, #4
 8003128:	6030      	str	r0, [r6, #0]
 800312a:	062e      	lsls	r6, r5, #24
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	d501      	bpl.n	8003134 <_printf_i+0x1c0>
 8003130:	6019      	str	r1, [r3, #0]
 8003132:	e002      	b.n	800313a <_printf_i+0x1c6>
 8003134:	0668      	lsls	r0, r5, #25
 8003136:	d5fb      	bpl.n	8003130 <_printf_i+0x1bc>
 8003138:	8019      	strh	r1, [r3, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	4616      	mov	r6, r2
 8003140:	e7bc      	b.n	80030bc <_printf_i+0x148>
 8003142:	6833      	ldr	r3, [r6, #0]
 8003144:	1d1a      	adds	r2, r3, #4
 8003146:	6032      	str	r2, [r6, #0]
 8003148:	681e      	ldr	r6, [r3, #0]
 800314a:	6862      	ldr	r2, [r4, #4]
 800314c:	2100      	movs	r1, #0
 800314e:	4630      	mov	r0, r6
 8003150:	f7fd f85e 	bl	8000210 <memchr>
 8003154:	b108      	cbz	r0, 800315a <_printf_i+0x1e6>
 8003156:	1b80      	subs	r0, r0, r6
 8003158:	6060      	str	r0, [r4, #4]
 800315a:	6863      	ldr	r3, [r4, #4]
 800315c:	6123      	str	r3, [r4, #16]
 800315e:	2300      	movs	r3, #0
 8003160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003164:	e7aa      	b.n	80030bc <_printf_i+0x148>
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	4632      	mov	r2, r6
 800316a:	4649      	mov	r1, r9
 800316c:	4640      	mov	r0, r8
 800316e:	47d0      	blx	sl
 8003170:	3001      	adds	r0, #1
 8003172:	d0ad      	beq.n	80030d0 <_printf_i+0x15c>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	079b      	lsls	r3, r3, #30
 8003178:	d413      	bmi.n	80031a2 <_printf_i+0x22e>
 800317a:	68e0      	ldr	r0, [r4, #12]
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	4298      	cmp	r0, r3
 8003180:	bfb8      	it	lt
 8003182:	4618      	movlt	r0, r3
 8003184:	e7a6      	b.n	80030d4 <_printf_i+0x160>
 8003186:	2301      	movs	r3, #1
 8003188:	4632      	mov	r2, r6
 800318a:	4649      	mov	r1, r9
 800318c:	4640      	mov	r0, r8
 800318e:	47d0      	blx	sl
 8003190:	3001      	adds	r0, #1
 8003192:	d09d      	beq.n	80030d0 <_printf_i+0x15c>
 8003194:	3501      	adds	r5, #1
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	9903      	ldr	r1, [sp, #12]
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	42ab      	cmp	r3, r5
 800319e:	dcf2      	bgt.n	8003186 <_printf_i+0x212>
 80031a0:	e7eb      	b.n	800317a <_printf_i+0x206>
 80031a2:	2500      	movs	r5, #0
 80031a4:	f104 0619 	add.w	r6, r4, #25
 80031a8:	e7f5      	b.n	8003196 <_printf_i+0x222>
 80031aa:	bf00      	nop
 80031ac:	08003579 	.word	0x08003579
 80031b0:	0800358a 	.word	0x0800358a

080031b4 <__sflush_r>:
 80031b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031bc:	0716      	lsls	r6, r2, #28
 80031be:	4605      	mov	r5, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	d454      	bmi.n	800326e <__sflush_r+0xba>
 80031c4:	684b      	ldr	r3, [r1, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dc02      	bgt.n	80031d0 <__sflush_r+0x1c>
 80031ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	dd48      	ble.n	8003262 <__sflush_r+0xae>
 80031d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031d2:	2e00      	cmp	r6, #0
 80031d4:	d045      	beq.n	8003262 <__sflush_r+0xae>
 80031d6:	2300      	movs	r3, #0
 80031d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031dc:	682f      	ldr	r7, [r5, #0]
 80031de:	6a21      	ldr	r1, [r4, #32]
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	d030      	beq.n	8003246 <__sflush_r+0x92>
 80031e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	0759      	lsls	r1, r3, #29
 80031ea:	d505      	bpl.n	80031f8 <__sflush_r+0x44>
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031f2:	b10b      	cbz	r3, 80031f8 <__sflush_r+0x44>
 80031f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	2300      	movs	r3, #0
 80031fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031fc:	6a21      	ldr	r1, [r4, #32]
 80031fe:	4628      	mov	r0, r5
 8003200:	47b0      	blx	r6
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	d106      	bne.n	8003216 <__sflush_r+0x62>
 8003208:	6829      	ldr	r1, [r5, #0]
 800320a:	291d      	cmp	r1, #29
 800320c:	d82b      	bhi.n	8003266 <__sflush_r+0xb2>
 800320e:	4a2a      	ldr	r2, [pc, #168]	@ (80032b8 <__sflush_r+0x104>)
 8003210:	410a      	asrs	r2, r1
 8003212:	07d6      	lsls	r6, r2, #31
 8003214:	d427      	bmi.n	8003266 <__sflush_r+0xb2>
 8003216:	2200      	movs	r2, #0
 8003218:	6062      	str	r2, [r4, #4]
 800321a:	04d9      	lsls	r1, r3, #19
 800321c:	6922      	ldr	r2, [r4, #16]
 800321e:	6022      	str	r2, [r4, #0]
 8003220:	d504      	bpl.n	800322c <__sflush_r+0x78>
 8003222:	1c42      	adds	r2, r0, #1
 8003224:	d101      	bne.n	800322a <__sflush_r+0x76>
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	b903      	cbnz	r3, 800322c <__sflush_r+0x78>
 800322a:	6560      	str	r0, [r4, #84]	@ 0x54
 800322c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800322e:	602f      	str	r7, [r5, #0]
 8003230:	b1b9      	cbz	r1, 8003262 <__sflush_r+0xae>
 8003232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003236:	4299      	cmp	r1, r3
 8003238:	d002      	beq.n	8003240 <__sflush_r+0x8c>
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff fbdc 	bl	80029f8 <_free_r>
 8003240:	2300      	movs	r3, #0
 8003242:	6363      	str	r3, [r4, #52]	@ 0x34
 8003244:	e00d      	b.n	8003262 <__sflush_r+0xae>
 8003246:	2301      	movs	r3, #1
 8003248:	4628      	mov	r0, r5
 800324a:	47b0      	blx	r6
 800324c:	4602      	mov	r2, r0
 800324e:	1c50      	adds	r0, r2, #1
 8003250:	d1c9      	bne.n	80031e6 <__sflush_r+0x32>
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0c6      	beq.n	80031e6 <__sflush_r+0x32>
 8003258:	2b1d      	cmp	r3, #29
 800325a:	d001      	beq.n	8003260 <__sflush_r+0xac>
 800325c:	2b16      	cmp	r3, #22
 800325e:	d11e      	bne.n	800329e <__sflush_r+0xea>
 8003260:	602f      	str	r7, [r5, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	e022      	b.n	80032ac <__sflush_r+0xf8>
 8003266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326a:	b21b      	sxth	r3, r3
 800326c:	e01b      	b.n	80032a6 <__sflush_r+0xf2>
 800326e:	690f      	ldr	r7, [r1, #16]
 8003270:	2f00      	cmp	r7, #0
 8003272:	d0f6      	beq.n	8003262 <__sflush_r+0xae>
 8003274:	0793      	lsls	r3, r2, #30
 8003276:	680e      	ldr	r6, [r1, #0]
 8003278:	bf08      	it	eq
 800327a:	694b      	ldreq	r3, [r1, #20]
 800327c:	600f      	str	r7, [r1, #0]
 800327e:	bf18      	it	ne
 8003280:	2300      	movne	r3, #0
 8003282:	eba6 0807 	sub.w	r8, r6, r7
 8003286:	608b      	str	r3, [r1, #8]
 8003288:	f1b8 0f00 	cmp.w	r8, #0
 800328c:	dde9      	ble.n	8003262 <__sflush_r+0xae>
 800328e:	6a21      	ldr	r1, [r4, #32]
 8003290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003292:	4643      	mov	r3, r8
 8003294:	463a      	mov	r2, r7
 8003296:	4628      	mov	r0, r5
 8003298:	47b0      	blx	r6
 800329a:	2800      	cmp	r0, #0
 800329c:	dc08      	bgt.n	80032b0 <__sflush_r+0xfc>
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b0:	4407      	add	r7, r0
 80032b2:	eba8 0800 	sub.w	r8, r8, r0
 80032b6:	e7e7      	b.n	8003288 <__sflush_r+0xd4>
 80032b8:	dfbffffe 	.word	0xdfbffffe

080032bc <_fflush_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	690b      	ldr	r3, [r1, #16]
 80032c0:	4605      	mov	r5, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b913      	cbnz	r3, 80032cc <_fflush_r+0x10>
 80032c6:	2500      	movs	r5, #0
 80032c8:	4628      	mov	r0, r5
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	b118      	cbz	r0, 80032d6 <_fflush_r+0x1a>
 80032ce:	6a03      	ldr	r3, [r0, #32]
 80032d0:	b90b      	cbnz	r3, 80032d6 <_fflush_r+0x1a>
 80032d2:	f7ff f989 	bl	80025e8 <__sinit>
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f3      	beq.n	80032c6 <_fflush_r+0xa>
 80032de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032e0:	07d0      	lsls	r0, r2, #31
 80032e2:	d404      	bmi.n	80032ee <_fflush_r+0x32>
 80032e4:	0599      	lsls	r1, r3, #22
 80032e6:	d402      	bmi.n	80032ee <_fflush_r+0x32>
 80032e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ea:	f7ff fb82 	bl	80029f2 <__retarget_lock_acquire_recursive>
 80032ee:	4628      	mov	r0, r5
 80032f0:	4621      	mov	r1, r4
 80032f2:	f7ff ff5f 	bl	80031b4 <__sflush_r>
 80032f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032f8:	07da      	lsls	r2, r3, #31
 80032fa:	4605      	mov	r5, r0
 80032fc:	d4e4      	bmi.n	80032c8 <_fflush_r+0xc>
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	059b      	lsls	r3, r3, #22
 8003302:	d4e1      	bmi.n	80032c8 <_fflush_r+0xc>
 8003304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003306:	f7ff fb75 	bl	80029f4 <__retarget_lock_release_recursive>
 800330a:	e7dd      	b.n	80032c8 <_fflush_r+0xc>

0800330c <__swhatbuf_r>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	460c      	mov	r4, r1
 8003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003314:	2900      	cmp	r1, #0
 8003316:	b096      	sub	sp, #88	@ 0x58
 8003318:	4615      	mov	r5, r2
 800331a:	461e      	mov	r6, r3
 800331c:	da0d      	bge.n	800333a <__swhatbuf_r+0x2e>
 800331e:	89a3      	ldrh	r3, [r4, #12]
 8003320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	bf14      	ite	ne
 800332a:	2340      	movne	r3, #64	@ 0x40
 800332c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003330:	2000      	movs	r0, #0
 8003332:	6031      	str	r1, [r6, #0]
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	b016      	add	sp, #88	@ 0x58
 8003338:	bd70      	pop	{r4, r5, r6, pc}
 800333a:	466a      	mov	r2, sp
 800333c:	f000 f862 	bl	8003404 <_fstat_r>
 8003340:	2800      	cmp	r0, #0
 8003342:	dbec      	blt.n	800331e <__swhatbuf_r+0x12>
 8003344:	9901      	ldr	r1, [sp, #4]
 8003346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800334a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800334e:	4259      	negs	r1, r3
 8003350:	4159      	adcs	r1, r3
 8003352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003356:	e7eb      	b.n	8003330 <__swhatbuf_r+0x24>

08003358 <__smakebuf_r>:
 8003358:	898b      	ldrh	r3, [r1, #12]
 800335a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800335c:	079d      	lsls	r5, r3, #30
 800335e:	4606      	mov	r6, r0
 8003360:	460c      	mov	r4, r1
 8003362:	d507      	bpl.n	8003374 <__smakebuf_r+0x1c>
 8003364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	2301      	movs	r3, #1
 800336e:	6163      	str	r3, [r4, #20]
 8003370:	b003      	add	sp, #12
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	ab01      	add	r3, sp, #4
 8003376:	466a      	mov	r2, sp
 8003378:	f7ff ffc8 	bl	800330c <__swhatbuf_r>
 800337c:	9f00      	ldr	r7, [sp, #0]
 800337e:	4605      	mov	r5, r0
 8003380:	4639      	mov	r1, r7
 8003382:	4630      	mov	r0, r6
 8003384:	f7ff fba4 	bl	8002ad0 <_malloc_r>
 8003388:	b948      	cbnz	r0, 800339e <__smakebuf_r+0x46>
 800338a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800338e:	059a      	lsls	r2, r3, #22
 8003390:	d4ee      	bmi.n	8003370 <__smakebuf_r+0x18>
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	81a3      	strh	r3, [r4, #12]
 800339c:	e7e2      	b.n	8003364 <__smakebuf_r+0xc>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	6020      	str	r0, [r4, #0]
 80033a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	9b01      	ldr	r3, [sp, #4]
 80033aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033ae:	b15b      	cbz	r3, 80033c8 <__smakebuf_r+0x70>
 80033b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 f837 	bl	8003428 <_isatty_r>
 80033ba:	b128      	cbz	r0, 80033c8 <__smakebuf_r+0x70>
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	431d      	orrs	r5, r3
 80033cc:	81a5      	strh	r5, [r4, #12]
 80033ce:	e7cf      	b.n	8003370 <__smakebuf_r+0x18>

080033d0 <memmove>:
 80033d0:	4288      	cmp	r0, r1
 80033d2:	b510      	push	{r4, lr}
 80033d4:	eb01 0402 	add.w	r4, r1, r2
 80033d8:	d902      	bls.n	80033e0 <memmove+0x10>
 80033da:	4284      	cmp	r4, r0
 80033dc:	4623      	mov	r3, r4
 80033de:	d807      	bhi.n	80033f0 <memmove+0x20>
 80033e0:	1e43      	subs	r3, r0, #1
 80033e2:	42a1      	cmp	r1, r4
 80033e4:	d008      	beq.n	80033f8 <memmove+0x28>
 80033e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ee:	e7f8      	b.n	80033e2 <memmove+0x12>
 80033f0:	4402      	add	r2, r0
 80033f2:	4601      	mov	r1, r0
 80033f4:	428a      	cmp	r2, r1
 80033f6:	d100      	bne.n	80033fa <memmove+0x2a>
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003402:	e7f7      	b.n	80033f4 <memmove+0x24>

08003404 <_fstat_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d07      	ldr	r5, [pc, #28]	@ (8003424 <_fstat_r+0x20>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	f7fd fa92 	bl	800093a <_fstat>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d102      	bne.n	8003420 <_fstat_r+0x1c>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	b103      	cbz	r3, 8003420 <_fstat_r+0x1c>
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	20000210 	.word	0x20000210

08003428 <_isatty_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4d06      	ldr	r5, [pc, #24]	@ (8003444 <_isatty_r+0x1c>)
 800342c:	2300      	movs	r3, #0
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	f7fd fa91 	bl	800095a <_isatty>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_isatty_r+0x1a>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	b103      	cbz	r3, 8003442 <_isatty_r+0x1a>
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	20000210 	.word	0x20000210

08003448 <_sbrk_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4d06      	ldr	r5, [pc, #24]	@ (8003464 <_sbrk_r+0x1c>)
 800344c:	2300      	movs	r3, #0
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	602b      	str	r3, [r5, #0]
 8003454:	f7fd fa9a 	bl	800098c <_sbrk>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d102      	bne.n	8003462 <_sbrk_r+0x1a>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	b103      	cbz	r3, 8003462 <_sbrk_r+0x1a>
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	20000210 	.word	0x20000210

08003468 <memcpy>:
 8003468:	440a      	add	r2, r1
 800346a:	4291      	cmp	r1, r2
 800346c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003470:	d100      	bne.n	8003474 <memcpy+0xc>
 8003472:	4770      	bx	lr
 8003474:	b510      	push	{r4, lr}
 8003476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800347a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800347e:	4291      	cmp	r1, r2
 8003480:	d1f9      	bne.n	8003476 <memcpy+0xe>
 8003482:	bd10      	pop	{r4, pc}

08003484 <_realloc_r>:
 8003484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003488:	4680      	mov	r8, r0
 800348a:	4615      	mov	r5, r2
 800348c:	460c      	mov	r4, r1
 800348e:	b921      	cbnz	r1, 800349a <_realloc_r+0x16>
 8003490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	4611      	mov	r1, r2
 8003496:	f7ff bb1b 	b.w	8002ad0 <_malloc_r>
 800349a:	b92a      	cbnz	r2, 80034a8 <_realloc_r+0x24>
 800349c:	f7ff faac 	bl	80029f8 <_free_r>
 80034a0:	2400      	movs	r4, #0
 80034a2:	4620      	mov	r0, r4
 80034a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a8:	f000 f81a 	bl	80034e0 <_malloc_usable_size_r>
 80034ac:	4285      	cmp	r5, r0
 80034ae:	4606      	mov	r6, r0
 80034b0:	d802      	bhi.n	80034b8 <_realloc_r+0x34>
 80034b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80034b6:	d8f4      	bhi.n	80034a2 <_realloc_r+0x1e>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4640      	mov	r0, r8
 80034bc:	f7ff fb08 	bl	8002ad0 <_malloc_r>
 80034c0:	4607      	mov	r7, r0
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d0ec      	beq.n	80034a0 <_realloc_r+0x1c>
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	462a      	mov	r2, r5
 80034ca:	4621      	mov	r1, r4
 80034cc:	bf28      	it	cs
 80034ce:	4632      	movcs	r2, r6
 80034d0:	f7ff ffca 	bl	8003468 <memcpy>
 80034d4:	4621      	mov	r1, r4
 80034d6:	4640      	mov	r0, r8
 80034d8:	f7ff fa8e 	bl	80029f8 <_free_r>
 80034dc:	463c      	mov	r4, r7
 80034de:	e7e0      	b.n	80034a2 <_realloc_r+0x1e>

080034e0 <_malloc_usable_size_r>:
 80034e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e4:	1f18      	subs	r0, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bfbc      	itt	lt
 80034ea:	580b      	ldrlt	r3, [r1, r0]
 80034ec:	18c0      	addlt	r0, r0, r3
 80034ee:	4770      	bx	lr

080034f0 <_init>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr

080034fc <_fini>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr
