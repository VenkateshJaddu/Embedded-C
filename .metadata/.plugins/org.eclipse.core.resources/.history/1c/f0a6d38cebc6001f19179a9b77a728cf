#include "main_1.h"

UART_HandleTypeDef huart;
I2C_HandleTypeDef hi2c;

void Handle_I2C_Busy(void);
void Print_num(uint8_t);


/* Buffer for I2C Transmission */
uint8_t i2c_buffer[1];
volatile uint8_t i2c_busy = 0; // Flag to check if I2C is busy


int main()
{

	HAL_Init();

	SystemClockConfig(SYS_CLK_FREQ_84_MHZ);

	UART_init();

	I2C_Init();
	//send_msg("I2C Initialization Successful\r\n");

    LCD_Init(); // Initialize LCD
	//send_msg("LCD Initialization Successful\r\n");
    LCD_SetCursor(0, 0); // Set cursor to first row, first column
    LCD_Print("Welcome......!");
    LCD_Clear(LCD_CLR_SCREEN);
    Print_num(5);

	while(1);

	return 0;
}

void Print_num(uint8_t num)
{
	uint8_t i;
	for(i=0; i<num;i++)
	{
		LCD_Print((char *)i);
		LCD_Clear(LCD_CLR_SCREEN);
	}
}

void UART_init()
{
	huart.Instance = USART2;
	huart.Init.BaudRate = 115200;
	huart.Init.WordLength = UART_WORDLENGTH_8B;
	huart.Init.StopBits = UART_STOPBITS_1;
	huart.Init.Parity = UART_PARITY_NONE;
	huart.Init.Mode = UART_MODE_TX_RX;
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;

	if((HAL_UART_Init(&huart)) != HAL_OK)
	{
		error_handler();
	}
}

void I2C_Init(void)
	{
		hi2c.Instance = I2C1;
	    hi2c.Init.ClockSpeed = 100000;              // 100 kHz standard mode
	    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;     // Standard duty cycle
	    hi2c.Init.OwnAddress1 = 0;                 // Not used in master mode
	    hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	    hi2c.Init.OwnAddress2 = 0;
	    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

	    if (HAL_I2C_Init(&hi2c) != HAL_OK)
	    {
	        error_handler();
	    }
	}



void SystemClockConfig(uint8_t clk_freq)
{
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	osc_init.HSEState = RCC_HSE_BYPASS;

	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

	switch(clk_freq)
	{
	case SYS_CLK_FREQ_50_MHZ:
	{
		osc_init.PLL.PLLM = 8;
		osc_init.PLL.PLLN = 100;
		osc_init.PLL.PLLP = 2;
		osc_init.PLL.PLLQ = 2;
		osc_init.PLL.PLLR = 2;
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

		FLatency = FLASH_ACR_LATENCY_1WS;
		break;
	}

	case SYS_CLK_FREQ_84_MHZ:
	{
		osc_init.PLL.PLLM = 8;
		osc_init.PLL.PLLN = 160;
		osc_init.PLL.PLLP = 2;
		osc_init.PLL.PLLQ = 2;
		osc_init.PLL.PLLR = 2;
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

		FLatency = FLASH_ACR_LATENCY_2WS;
		break;
	}
	case SYS_CLK_FREQ_120_MHZ:
	{
		osc_init.PLL.PLLM = 8;
		osc_init.PLL.PLLN = 240;
		osc_init.PLL.PLLP = 2;
		osc_init.PLL.PLLQ = 2;
		osc_init.PLL.PLLR = 2;
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
							RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
		{
			error_handler();
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
		{
			error_handler();
		}


	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
}


void LCD_Init(void) {
    HAL_Delay(50); // Wait for LCD to power up

    // Initialization sequence
    LCD_Send(0x03, 0); // Function set (8-bit mode)
    HAL_Delay(5);      // Wait >4.1ms
    LCD_Send(0x03, 0); // Repeat
    HAL_Delay(1);      // Wait >100us
    LCD_Send(0x03, 0); // Repeat
    LCD_Send(0x02, 0); // Set 4-bit mode
	send_msg("LCD Initialization\r\n");

    // Configure LCD
    LCD_Command(LCD_FUNCTION_SET);  // 4-bit mode, 2-line display
    LCD_Command(LCD_DISPLAY_ON);    // Display ON, Cursor OFF
    LCD_Command(LCD_CLEAR);         // Clear display
    LCD_Command(LCD_ENTRY_MODE);    // Increment cursor, no shift
    send_msg("LCD Configuration\r\n");
}

void LCD_Command(uint8_t cmd) {
    LCD_Send(cmd, 0); // Send as command (RS = 0)
}

void LCD_Data(uint8_t data) {
    LCD_Send(data, LCD_RS); // Send as data (RS = 1)
}


/* Send Data/Command with Mode (RS) */
void LCD_Send(uint8_t value, uint8_t mode) {
    uint8_t upper_nibble = (value & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
    uint8_t lower_nibble = ((value << 4) & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;

//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }
    // Send upper nibble
    i2c_busy = 1;
    i2c_buffer[0] = upper_nibble;
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
    while (i2c_busy);
//    send_msg("Upper nibble 1\r\n");
//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }

    i2c_busy = 1;
    i2c_buffer[0] = upper_nibble & ~LCD_EN;
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
    while (i2c_busy);
//    send_msg("Upper nibble 2\r\n");

    // Send lower nibble
    i2c_busy = 1;
    i2c_buffer[0] = lower_nibble;
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
    while (i2c_busy);

    i2c_busy = 1;
    i2c_buffer[0] = lower_nibble & ~LCD_EN;
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
    while (i2c_busy);
}

void LCD_Print(char *str) {
    while (*str) {
        LCD_Data((uint8_t)*str++);
    }
    HAL_Delay(1000);
}

/* Set Cursor Position */
void LCD_SetCursor(uint8_t row, uint8_t col) {
    uint8_t addr = (row == 0) ? col : (0x40 + col);
    LCD_Command(LCD_SET_DDRAM_ADDR | addr);
}

/* I2C Transmission Complete Callback */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1) {
    if (hi2c1->Instance == hi2c.Instance) {
        i2c_busy = 0; // Clear busy flag
//        send_msg("i2c Callback\r\n");
    }
}

/* I2C Error Callback */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c1) {
//	send_msg("I2C Error Call\r\n");
    if (hi2c1->Instance == hi2c.Instance) {
        i2c_busy = 0; // Clear busy flag
        // Optional: Add error recovery logic here
    }
}

void send_msg(char msg[])
{
    HAL_UART_Transmit(&huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
  //  char line[3];
   // sprintf(line,"\r\n");
   // HAL_UART_Transmit(&huart, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);

}

void error_handler(void)
{
	send_msg("Failed\r\n");
	while(1);
}

void LCD_Clear(uint8_t cmd) {
    LCD_Send(cmd, 0);  // 0x01 is the clear screen command
    HAL_Delay(2);       // Wait for 2ms to ensure the command is processed
}

//void Handle_I2C_Busy() {
//    uint32_t timeout = 100000;  // Adjust as necessary for your application
//    while (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        if (timeout-- == 0) {
//            // If timeout expires, reset the I2C peripheral
//            HAL_I2C_DeInit(&hi2c);
//            HAL_I2C_Init(&hi2c);
//            break;
//        }
//    }
//}
