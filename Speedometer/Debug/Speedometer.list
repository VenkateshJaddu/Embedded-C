
Speedometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08005ff4  08005ff4  00006ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006270  08006270  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006270  08006270  00007270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006278  08006278  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006280  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000005c  080062dc  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080062dc  00008298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e957  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002301  00000000  00000000  000169e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00018ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095c  00000000  00000000  000198f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226e1  00000000  00000000  0001a24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c6e  00000000  00000000  0003c92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cda5f  00000000  00000000  0004d59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011affa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  0011b040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  0011e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fdc 	.word	0x08005fdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005fdc 	.word	0x08005fdc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <CAN_Init>:
#include "main_1.h"

void CAN_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	hcan.Instance = CAN1;
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <CAN_Init+0x64>)
 80005b6:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <CAN_Init+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <CAN_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <CAN_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <CAN_Init+0x64>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <CAN_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <CAN_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <CAN_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <CAN_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	775a      	strb	r2, [r3, #29]

	//Time Quanta Parameter settings
//	hcan.Init.Prescaler = 5; //To get 250Kbps Pre-scalar is 10
	hcan.Init.Prescaler = 10;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <CAN_Init+0x64>)
 80005e6:	220a      	movs	r2, #10
 80005e8:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <CAN_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <CAN_Init+0x64>)
 80005f2:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80005f6:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <CAN_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
*/

	if(HAL_CAN_Init(&hcan) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <CAN_Init+0x64>)
 8000600:	f000 fe6a 	bl	80012d8 <HAL_CAN_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <CAN_Init+0x5e>
		{
			error_handler();
 800060a:	f000 fc45 	bl	8000e98 <error_handler>
		}

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000c8 	.word	0x200000c8
 8000618:	40006400 	.word	0x40006400

0800061c <CAN_Tx>:

void CAN_Tx(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef CAN_Tx;
	uint32_t TxMailbox;
	//uint8_t data_msg[5] = {'H','E','L','L','0'};
	uint8_t data_msg[8] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77};
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <CAN_Tx+0x48>)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062a:	e883 0003 	stmia.w	r3, {r0, r1}

	CAN_Tx.StdId = 0x330;
 800062e:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000632:	613b      	str	r3, [r7, #16]
	CAN_Tx.IDE = CAN_ID_STD;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
	CAN_Tx.RTR = CAN_RTR_DATA;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
	CAN_Tx.DLC = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(&hcan, &CAN_Tx, data_msg, &TxMailbox) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	f107 0110 	add.w	r1, r7, #16
 800064a:	4807      	ldr	r0, [pc, #28]	@ (8000668 <CAN_Tx+0x4c>)
 800064c:	f001 f864 	bl	8001718 <HAL_CAN_AddTxMessage>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <CAN_Tx+0x3e>
		{
			error_handler();
 8000656:	f000 fc1f 	bl	8000e98 <error_handler>
		}
}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08005ff4 	.word	0x08005ff4
 8000668:	200000c8 	.word	0x200000c8

0800066c <CAN_Filter_Config>:
	*/

}

void CAN_Filter_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_Filter;

	CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
	CAN_Filter.FilterIdHigh = 0x620 << 5;
 8000676:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800067a:	603b      	str	r3, [r7, #0]
	CAN_Filter.FilterIdLow = 0x0000; //For Standard ID's(11bit) Low filter ID is not used
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
	CAN_Filter.FilterMaskIdHigh = 0x7F0 << 5;
 8000680:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000684:	60bb      	str	r3, [r7, #8]
	CAN_Filter.FilterMaskIdLow = 0x0000; //For Standard ID's(11bit) Low filter MaskID is not used
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
	CAN_Filter.FilterFIFOAssignment = CAN_RX_FIFO0; //Can use CAN_FILTER_FIFO0 as well
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
	CAN_Filter.FilterBank = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
	CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000696:	2301      	movs	r3, #1
 8000698:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan, &CAN_Filter) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <CAN_Filter_Config+0x4c>)
 80006a0:	f000 ff16 	bl	80014d0 <HAL_CAN_ConfigFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <CAN_Filter_Config+0x42>
		{
			error_handler();
 80006aa:	f000 fbf5 	bl	8000e98 <error_handler>
		}

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	@ 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000c8 	.word	0x200000c8

080006bc <HAL_CAN_TxMailbox0CompleteCallback>:

/*CAN Interrupt Callbacks for TX & RX*/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	send_msg("\r\nMessage Transmitted:Mailbox0\r\n");
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80006c6:	f000 fbbb 	bl	8000e40 <send_msg>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006008 	.word	0x08006008

080006d8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox1");
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80006e2:	f000 fbad 	bl	8000e40 <send_msg>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	0800602c 	.word	0x0800602c

080006f4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	send_msg("Message Transmitted:Mailbox2");
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80006fe:	f000 fb9f 	bl	8000e40 <send_msg>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	0800604c 	.word	0x0800604c

08000710 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef CAN_RxHeader;
	uint8_t Rec_data[8];

	CAN_RxHeader.IDE = CAN_ID_STD;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
	CAN_RxHeader.RTR = CAN_RTR_DATA;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
	CAN_RxHeader.DLC = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24

	send_msg("CAN Rx");
 8000724:	481a      	ldr	r0, [pc, #104]	@ (8000790 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000726:	f000 fb8b 	bl	8000e40 <send_msg>

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0, &CAN_RxHeader, Rec_data) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	f107 0214 	add.w	r2, r7, #20
 8000732:	2100      	movs	r1, #0
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 f8bf 	bl	80018b8 <HAL_CAN_GetRxMessage>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		error_handler();
 8000740:	f000 fbaa 	bl	8000e98 <error_handler>
	}
	//CAN_Tx();
	//uint32_t ID = (uint32_t)CAN_RxHeader.StdId;
	LCD_Print("CAN Rx");
 8000744:	4812      	ldr	r0, [pc, #72]	@ (8000790 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000746:	f000 f9bf 	bl	8000ac8 <LCD_Print>

	switch(CAN_RxHeader.StdId)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8000750:	d00c      	beq.n	800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
 8000752:	f240 6221 	movw	r2, #1569	@ 0x621
 8000756:	4293      	cmp	r3, r2
 8000758:	d111      	bne.n	800077e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	{
		case 0x621:
			send_msg("621 ID");
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800075c:	f000 fb70 	bl	8000e40 <send_msg>
			speed(Rec_data);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f81b 	bl	80007a0 <speed>
			break;
 800076a:	e00c      	b.n	8000786 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
		case 0x620:
			send_msg("620 ID");
 800076c:	480a      	ldr	r0, [pc, #40]	@ (8000798 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800076e:	f000 fb67 	bl	8000e40 <send_msg>
			Mode(Rec_data);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f85c 	bl	8000834 <Mode>
			break;
 800077c:	e003      	b.n	8000786 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
		default:
			send_msg("Switch entered default state");
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000780:	f000 fb5e 	bl	8000e40 <send_msg>
			break;
 8000784:	bf00      	nop
	}
}
 8000786:	bf00      	nop
 8000788:	3730      	adds	r7, #48	@ 0x30
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800606c 	.word	0x0800606c
 8000794:	08006074 	.word	0x08006074
 8000798:	0800607c 	.word	0x0800607c
 800079c:	08006084 	.word	0x08006084

080007a0 <speed>:

uint32_t speed_val,speed_kmph;
void speed(uint8_t *arr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
//	LCD_Clear(LCD_CLR_SCREEN);
	char speed[5];
	speed_val = arr[2] << 8 | arr[3];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	3203      	adds	r2, #3
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <speed+0x7c>)
 80007bc:	601a      	str	r2, [r3, #0]
	speed_kmph = (uint32_t)(0.1183f * (float)speed_val);
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <speed+0x7c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ca:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000820 <speed+0x80>
 80007ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d6:	ee17 2a90 	vmov	r2, s15
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <speed+0x84>)
 80007dc:	601a      	str	r2, [r3, #0]
	send_msg("\r\nSpeed in KMPH : ");
 80007de:	4812      	ldr	r0, [pc, #72]	@ (8000828 <speed+0x88>)
 80007e0:	f000 fb2e 	bl	8000e40 <send_msg>
    sprintf(speed,"%lu",speed_kmph);
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <speed+0x84>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	490f      	ldr	r1, [pc, #60]	@ (800082c <speed+0x8c>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 ff5c 	bl	80056ac <siprintf>
    LCD_Print(speed);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f965 	bl	8000ac8 <LCD_Print>
    HAL_UART_Transmit(&huart,(uint8_t *)speed, sizeof(speed), HAL_MAX_DELAY);
 80007fe:	f107 0108 	add.w	r1, r7, #8
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2205      	movs	r2, #5
 8000808:	4809      	ldr	r0, [pc, #36]	@ (8000830 <speed+0x90>)
 800080a:	f004 fb93 	bl	8004f34 <HAL_UART_Transmit>
    LCD_Clear(LCD_CLR_SCREEN);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 f96f 	bl	8000af2 <LCD_Clear>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000078 	.word	0x20000078
 8000820:	3df24745 	.word	0x3df24745
 8000824:	2000007c 	.word	0x2000007c
 8000828:	080060a4 	.word	0x080060a4
 800082c:	080060b8 	.word	0x080060b8
 8000830:	20000080 	.word	0x20000080

08000834 <Mode>:

void Mode(uint8_t *arr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	LCD_Clear(LCD_CLR_SCREEN);
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f958 	bl	8000af2 <LCD_Clear>
		if(arr[2] == 38)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3302      	adds	r3, #2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b26      	cmp	r3, #38	@ 0x26
 800084a:	d106      	bne.n	800085a <Mode+0x26>
		{
			send_msg("\r\nMode : ECO \r\n");
 800084c:	4820      	ldr	r0, [pc, #128]	@ (80008d0 <Mode+0x9c>)
 800084e:	f000 faf7 	bl	8000e40 <send_msg>
			LCD_Print("MODE : ECO");
 8000852:	4820      	ldr	r0, [pc, #128]	@ (80008d4 <Mode+0xa0>)
 8000854:	f000 f938 	bl	8000ac8 <LCD_Print>
		else
		{
			error_handler();
		}

}
 8000858:	e035      	b.n	80008c6 <Mode+0x92>
		else if(arr[2] == 70)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3302      	adds	r3, #2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b46      	cmp	r3, #70	@ 0x46
 8000862:	d106      	bne.n	8000872 <Mode+0x3e>
			send_msg("\r\nMode : Normal \r\n");
 8000864:	481c      	ldr	r0, [pc, #112]	@ (80008d8 <Mode+0xa4>)
 8000866:	f000 faeb 	bl	8000e40 <send_msg>
			LCD_Print("MODE : Normal");
 800086a:	481c      	ldr	r0, [pc, #112]	@ (80008dc <Mode+0xa8>)
 800086c:	f000 f92c 	bl	8000ac8 <LCD_Print>
}
 8000870:	e029      	b.n	80008c6 <Mode+0x92>
		else if(arr[2] == 134)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3302      	adds	r3, #2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b86      	cmp	r3, #134	@ 0x86
 800087a:	d106      	bne.n	800088a <Mode+0x56>
			send_msg("\r\nMode : Sports \r\n");
 800087c:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <Mode+0xac>)
 800087e:	f000 fadf 	bl	8000e40 <send_msg>
			LCD_Print("MODE : Sports");
 8000882:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <Mode+0xb0>)
 8000884:	f000 f920 	bl	8000ac8 <LCD_Print>
}
 8000888:	e01d      	b.n	80008c6 <Mode+0x92>
		else if(arr[2] == 96 && speed_kmph == 0)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3302      	adds	r3, #2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b60      	cmp	r3, #96	@ 0x60
 8000892:	d10a      	bne.n	80008aa <Mode+0x76>
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <Mode+0xb4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d106      	bne.n	80008aa <Mode+0x76>
			send_msg("\r\n ...Parking... \r\n");
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <Mode+0xb8>)
 800089e:	f000 facf 	bl	8000e40 <send_msg>
			LCD_Print("...Parking...");
 80008a2:	4813      	ldr	r0, [pc, #76]	@ (80008f0 <Mode+0xbc>)
 80008a4:	f000 f910 	bl	8000ac8 <LCD_Print>
}
 80008a8:	e00d      	b.n	80008c6 <Mode+0x92>
		else if(arr[3] == 128)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3303      	adds	r3, #3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b80      	cmp	r3, #128	@ 0x80
 80008b2:	d106      	bne.n	80008c2 <Mode+0x8e>
			send_msg("\r\n ...Reverse... \r\n");
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <Mode+0xc0>)
 80008b6:	f000 fac3 	bl	8000e40 <send_msg>
			LCD_Print("...Reverse...");
 80008ba:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <Mode+0xc4>)
 80008bc:	f000 f904 	bl	8000ac8 <LCD_Print>
}
 80008c0:	e001      	b.n	80008c6 <Mode+0x92>
			error_handler();
 80008c2:	f000 fae9 	bl	8000e98 <error_handler>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080060bc 	.word	0x080060bc
 80008d4:	080060cc 	.word	0x080060cc
 80008d8:	080060d8 	.word	0x080060d8
 80008dc:	080060ec 	.word	0x080060ec
 80008e0:	080060fc 	.word	0x080060fc
 80008e4:	08006110 	.word	0x08006110
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	08006120 	.word	0x08006120
 80008f0:	08006134 	.word	0x08006134
 80008f4:	08006144 	.word	0x08006144
 80008f8:	08006158 	.word	0x08006158

080008fc <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	send_msg("Error Occurred");
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <HAL_CAN_ErrorCallback+0x18>)
 8000906:	f000 fa9b 	bl	8000e40 <send_msg>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08006168 	.word	0x08006168

08000918 <LCD_Init>:
#include "main_1.h"

void LCD_Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for LCD to power up
 800091c:	2032      	movs	r0, #50	@ 0x32
 800091e:	f000 fcb7 	bl	8001290 <HAL_Delay>

    // Initialization sequence
    LCD_Send(0x03, 0); // Function set (8-bit mode)
 8000922:	2100      	movs	r1, #0
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f83d 	bl	80009a4 <LCD_Send>
    HAL_Delay(5);      // Wait >4.1ms
 800092a:	2005      	movs	r0, #5
 800092c:	f000 fcb0 	bl	8001290 <HAL_Delay>
    LCD_Send(0x03, 0); // Repeat
 8000930:	2100      	movs	r1, #0
 8000932:	2003      	movs	r0, #3
 8000934:	f000 f836 	bl	80009a4 <LCD_Send>
    HAL_Delay(1);      // Wait >100us
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fca9 	bl	8001290 <HAL_Delay>
    LCD_Send(0x03, 0); // Repeat
 800093e:	2100      	movs	r1, #0
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f82f 	bl	80009a4 <LCD_Send>
    LCD_Send(0x02, 0); // Set 4-bit mode
 8000946:	2100      	movs	r1, #0
 8000948:	2002      	movs	r0, #2
 800094a:	f000 f82b 	bl	80009a4 <LCD_Send>

    // Configure LCD
    LCD_Command(LCD_FUNCTION_SET);  // 4-bit mode, 2-line display
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f000 f80b 	bl	800096a <LCD_Command>
    LCD_Command(LCD_DISPLAY_ON);    // Display ON, Cursor OFF
 8000954:	200c      	movs	r0, #12
 8000956:	f000 f808 	bl	800096a <LCD_Command>
    LCD_Command(LCD_CLEAR);         // Clear display
 800095a:	2001      	movs	r0, #1
 800095c:	f000 f805 	bl	800096a <LCD_Command>
    LCD_Command(LCD_ENTRY_MODE);    // Increment cursor, no shift
 8000960:	2006      	movs	r0, #6
 8000962:	f000 f802 	bl	800096a <LCD_Command>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}

0800096a <LCD_Command>:

void LCD_Command(uint8_t cmd) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0); // Send as command (RS = 0)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f813 	bl	80009a4 <LCD_Send>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <LCD_Data>:

void LCD_Data(uint8_t data) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, LCD_RS); // Send as data (RS = 1)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f805 	bl	80009a4 <LCD_Send>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <LCD_Send>:


/* Send Data/Command with Mode (RS) */
void LCD_Send(uint8_t value, uint8_t mode) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
    uint8_t upper_nibble = (value & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	f023 030f 	bic.w	r3, r3, #15
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	f043 030c 	orr.w	r3, r3, #12
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((value << 4) & 0xF0) | mode | LCD_EN | LCD_BACKLIGHT;
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	f043 030c 	orr.w	r3, r3, #12
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	73bb      	strb	r3, [r7, #14]

//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }
    // Send upper nibble
    i2c_busy = 1;
 80009e4:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <LCD_Send+0x110>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = upper_nibble;
 80009ea:	4a33      	ldr	r2, [pc, #204]	@ (8000ab8 <LCD_Send+0x114>)
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	7013      	strb	r3, [r2, #0]
//    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
//    while (i2c_busy);
    if (HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1) == HAL_OK) {
 80009f0:	2301      	movs	r3, #1
 80009f2:	4a31      	ldr	r2, [pc, #196]	@ (8000ab8 <LCD_Send+0x114>)
 80009f4:	214e      	movs	r1, #78	@ 0x4e
 80009f6:	4831      	ldr	r0, [pc, #196]	@ (8000abc <LCD_Send+0x118>)
 80009f8:	f001 ff02 	bl	8002800 <HAL_I2C_Master_Transmit_IT>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d115      	bne.n	8000a2e <LCD_Send+0x8a>
        uint32_t timeout = HAL_GetTick() + 10;  // 10ms timeout
 8000a02:	f000 fc39 	bl	8001278 <HAL_GetTick>
 8000a06:	4603      	mov	r3, r0
 8000a08:	330a      	adds	r3, #10
 8000a0a:	60bb      	str	r3, [r7, #8]
        while (i2c_busy) {
 8000a0c:	e009      	b.n	8000a22 <LCD_Send+0x7e>
            if (HAL_GetTick() > timeout) {
 8000a0e:	f000 fc33 	bl	8001278 <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d203      	bcs.n	8000a22 <LCD_Send+0x7e>
                send_msg("I2C timeout on upper nibble\r\n");
 8000a1a:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <LCD_Send+0x11c>)
 8000a1c:	f000 fa10 	bl	8000e40 <send_msg>
                return;
 8000a20:	e045      	b.n	8000aae <LCD_Send+0x10a>
        while (i2c_busy) {
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <LCD_Send+0x110>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f0      	bne.n	8000a0e <LCD_Send+0x6a>
 8000a2c:	e003      	b.n	8000a36 <LCD_Send+0x92>
            }
        }
    } else {
        send_msg("I2C transmission error on upper nibble\r\n");
 8000a2e:	4825      	ldr	r0, [pc, #148]	@ (8000ac4 <LCD_Send+0x120>)
 8000a30:	f000 fa06 	bl	8000e40 <send_msg>
        return;
 8000a34:	e03b      	b.n	8000aae <LCD_Send+0x10a>
//    send_msg("Upper nibble 1\r\n");
//    if (HAL_I2C_GetState(&hi2c) != HAL_I2C_STATE_READY) {
//        Handle_I2C_Busy();
//    }

    i2c_busy = 1;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <LCD_Send+0x110>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = upper_nibble & ~LCD_EN;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <LCD_Send+0x114>)
 8000a46:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <LCD_Send+0x114>)
 8000a4c:	214e      	movs	r1, #78	@ 0x4e
 8000a4e:	481b      	ldr	r0, [pc, #108]	@ (8000abc <LCD_Send+0x118>)
 8000a50:	f001 fed6 	bl	8002800 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 8000a54:	bf00      	nop
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <LCD_Send+0x110>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1fa      	bne.n	8000a56 <LCD_Send+0xb2>
//    send_msg("Upper nibble 2\r\n");

    // Send lower nibble
    i2c_busy = 1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <LCD_Send+0x110>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = lower_nibble;
 8000a66:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <LCD_Send+0x114>)
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <LCD_Send+0x114>)
 8000a70:	214e      	movs	r1, #78	@ 0x4e
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <LCD_Send+0x118>)
 8000a74:	f001 fec4 	bl	8002800 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 8000a78:	bf00      	nop
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <LCD_Send+0x110>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1fa      	bne.n	8000a7a <LCD_Send+0xd6>

    i2c_busy = 1;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <LCD_Send+0x110>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
    i2c_buffer[0] = lower_nibble & ~LCD_EN;
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	f023 0304 	bic.w	r3, r3, #4
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <LCD_Send+0x114>)
 8000a94:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit_IT(&hi2c, LCD_ADDR, i2c_buffer, 1);
 8000a96:	2301      	movs	r3, #1
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <LCD_Send+0x114>)
 8000a9a:	214e      	movs	r1, #78	@ 0x4e
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <LCD_Send+0x118>)
 8000a9e:	f001 feaf 	bl	8002800 <HAL_I2C_Master_Transmit_IT>
    while (i2c_busy);
 8000aa2:	bf00      	nop
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <LCD_Send+0x110>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1fa      	bne.n	8000aa4 <LCD_Send+0x100>
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000145 	.word	0x20000145
 8000ab8:	20000144 	.word	0x20000144
 8000abc:	200000f0 	.word	0x200000f0
 8000ac0:	08006178 	.word	0x08006178
 8000ac4:	08006198 	.word	0x08006198

08000ac8 <LCD_Print>:

void LCD_Print(char *str) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ad0:	e006      	b.n	8000ae0 <LCD_Print+0x18>
        LCD_Data((uint8_t)*str++);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff53 	bl	8000986 <LCD_Data>
    while (*str) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <LCD_Print+0xa>
    }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <LCD_Clear>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
    uint8_t addr = (row == 0) ? col : (0x40 + col);
    LCD_Command(LCD_SET_DDRAM_ADDR | addr);
}

void LCD_Clear(uint8_t cmd) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
    //LCD_Send(cmd, 0);  // 0x01 is the clear screen command
    LCD_Command(cmd);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff33 	bl	800096a <LCD_Command>
    HAL_Delay(2);       // Wait for 2ms to ensure the command is processed
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fbc3 	bl	8001290 <HAL_Delay>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <SysTick_Handler>:
#include "main_1.h"
extern CAN_HandleTypeDef hcan;
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000b16:	f000 fb9b 	bl	8001250 <HAL_IncTick>
	HAL_SYSTICK_Callback(); //This may not be required
 8000b1a:	f001 fb4b 	bl	80021b4 <HAL_SYSTICK_Callback>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <CAN1_TX_IRQHandler>:

/*CAN INRQ Handlers*/
void CAN1_TX_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <CAN1_TX_IRQHandler+0x10>)
 8000b2a:	f001 f80d 	bl	8001b48 <HAL_CAN_IRQHandler>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000c8 	.word	0x200000c8

08000b38 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <CAN1_RX0_IRQHandler+0x10>)
 8000b3e:	f001 f803 	bl	8001b48 <HAL_CAN_IRQHandler>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000c8 	.word	0x200000c8

08000b4c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <CAN1_RX1_IRQHandler+0x10>)
 8000b52:	f000 fff9 	bl	8001b48 <HAL_CAN_IRQHandler>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000c8 	.word	0x200000c8

08000b60 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <CAN1_SCE_IRQHandler+0x10>)
 8000b66:	f000 ffef 	bl	8001b48 <HAL_CAN_IRQHandler>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000c8 	.word	0x200000c8

08000b74 <I2C1_EV_IRQHandler>:

/*I2C IRQ Handlers*/
void I2C1_EV_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <I2C1_EV_IRQHandler+0x10>)
 8000b7a:	f001 fee3 	bl	8002944 <HAL_I2C_EV_IRQHandler>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000f0 	.word	0x200000f0

08000b88 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(&hi2c);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <I2C1_ER_IRQHandler+0x10>)
 8000b8e:	f002 f82c 	bl	8002bea <HAL_I2C_ER_IRQHandler>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000f0 	.word	0x200000f0

08000b9c <main>:
/* Buffer for I2C Transmission */
uint8_t i2c_buffer[1];
volatile uint8_t i2c_busy = 0; // Flag to check if I2C is busy

int main()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000ba0:	f000 fb04 	bl	80011ac <HAL_Init>

	SystemClockConfig(SYS_CLK_FREQ_50_MHZ);
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	f000 f8b5 	bl	8000d14 <SystemClockConfig>

	UART2_Init();
 8000baa:	f000 f82d 	bl	8000c08 <UART2_Init>

	I2C_Init();
 8000bae:	f000 f851 	bl	8000c54 <I2C_Init>

    LCD_Init();
 8000bb2:	f7ff feb1 	bl	8000918 <LCD_Init>
    send_msg("Initializations Done");
 8000bb6:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <main+0x60>)
 8000bb8:	f000 f942 	bl	8000e40 <send_msg>

//    LCD_SetCursor(0,0);
    LCD_Print("Welcome......!");
 8000bbc:	4810      	ldr	r0, [pc, #64]	@ (8000c00 <main+0x64>)
 8000bbe:	f7ff ff83 	bl	8000ac8 <LCD_Print>
    LCD_Clear(LCD_CLR_SCREEN);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff95 	bl	8000af2 <LCD_Clear>
//    LCD_Print("Test");

	CAN_Init(); // This will change the CAN controller from Sleep mode to Initialization mode
 8000bc8:	f7ff fcf2 	bl	80005b0 <CAN_Init>

	CAN_Filter_Config(); // While Receiving CAN data we have to use filters HAL_CAN_ConfigFilter();
 8000bcc:	f7ff fd4e 	bl	800066c <CAN_Filter_Config>

	//This will Enables bxCAN interrupts @arg CAN_Interrupts.
	if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF) != HAL_OK)
 8000bd0:	f240 4103 	movw	r1, #1027	@ 0x403
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <main+0x68>)
 8000bd6:	f000 ff91 	bl	8001afc <HAL_CAN_ActivateNotification>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <main+0x48>
	{
		error_handler();
 8000be0:	f000 f95a 	bl	8000e98 <error_handler>
	}

	// This will change CAN from Initialization mode to Normal mode
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <main+0x68>)
 8000be6:	f000 fd53 	bl	8001690 <HAL_CAN_Start>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <main+0x58>
	{
		error_handler();
 8000bf0:	f000 f952 	bl	8000e98 <error_handler>
	}
//	LCD_Print("CAN Tx");
	CAN_Tx();
 8000bf4:	f7ff fd12 	bl	800061c <CAN_Tx>
//    Print_num(15);

	while(1);
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <main+0x5c>
 8000bfc:	080061c8 	.word	0x080061c8
 8000c00:	080061e0 	.word	0x080061e0
 8000c04:	200000c8 	.word	0x200000c8

08000c08 <UART2_Init>:

	return 0;
}

void UART2_Init()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	huart.Instance = USART2;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <UART2_Init+0x44>)
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <UART2_Init+0x48>)
 8000c10:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <UART2_Init+0x44>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <UART2_Init+0x44>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <UART2_Init+0x44>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <UART2_Init+0x44>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
	huart.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <UART2_Init+0x44>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <UART2_Init+0x44>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]

	if((HAL_UART_Init(&huart)) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <UART2_Init+0x44>)
 8000c3a:	f004 f92b 	bl	8004e94 <HAL_UART_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <UART2_Init+0x40>
	{
		error_handler();
 8000c44:	f000 f928 	bl	8000e98 <error_handler>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000080 	.word	0x20000080
 8000c50:	40004400 	.word	0x40004400

08000c54 <I2C_Init>:

void I2C_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	hi2c.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <I2C_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <I2C_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hi2c.Init.ClockSpeed = 100000;              // 100 kHz standard mode
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <I2C_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <I2C_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
    hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;     // Standard duty cycle
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <I2C_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hi2c.Init.OwnAddress1 = 0;                 // Not used in master mode
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <I2C_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <I2C_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
    hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <I2C_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
    hi2c.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <I2C_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
    hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <I2C_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
    hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <I2C_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <I2C_Init+0x50>)
 8000c92:	f001 fc5b 	bl	800254c <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <I2C_Init+0x4c>
    {
        error_handler();
 8000c9c:	f000 f8fc 	bl	8000e98 <error_handler>
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000f0 	.word	0x200000f0
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	000186a0 	.word	0x000186a0

08000cb0 <HAL_I2C_MasterTxCpltCallback>:

/* I2C Transmission Complete Callback */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if (hi2c1->Instance == hi2c.Instance) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <HAL_I2C_MasterTxCpltCallback+0x1a>
        i2c_busy = 0; // Clear busy flag
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
//        send_msg("i2c Callback\r\n");
    }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200000f0 	.word	0x200000f0
 8000cdc:	20000145 	.word	0x20000145

08000ce0 <HAL_I2C_ErrorCallback>:

/* I2C Error Callback */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c1) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	send_msg("I2C Error Call\r\n");
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <HAL_I2C_ErrorCallback+0x28>)
 8000cea:	f000 f8a9 	bl	8000e40 <send_msg>
    if (hi2c1->Instance == hi2c.Instance) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_I2C_ErrorCallback+0x2c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d102      	bne.n	8000d00 <HAL_I2C_ErrorCallback+0x20>
        i2c_busy = 0; // Clear busy flag
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_I2C_ErrorCallback+0x30>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
        // Optional: Add error recovery logic here
    }
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080061f0 	.word	0x080061f0
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	20000145 	.word	0x20000145

08000d14 <SystemClockConfig>:



void SystemClockConfig(uint8_t clk_freq)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	@ 0x58
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency =0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000d28:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24

	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d36:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clk_freq)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b78      	cmp	r3, #120	@ 0x78
 8000d3c:	d03a      	beq.n	8000db4 <SystemClockConfig+0xa0>
 8000d3e:	2b78      	cmp	r3, #120	@ 0x78
 8000d40:	dc77      	bgt.n	8000e32 <SystemClockConfig+0x11e>
 8000d42:	2b32      	cmp	r3, #50	@ 0x32
 8000d44:	d002      	beq.n	8000d4c <SystemClockConfig+0x38>
 8000d46:	2b54      	cmp	r3, #84	@ 0x54
 8000d48:	d01a      	beq.n	8000d80 <SystemClockConfig+0x6c>

		FLatency = FLASH_ACR_LATENCY_3WS;
		break;
	}
	default:
		return;
 8000d4a:	e072      	b.n	8000e32 <SystemClockConfig+0x11e>
		osc_init.PLL.PLLM = 8;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 100;
 8000d50:	2364      	movs	r3, #100	@ 0x64
 8000d52:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d76:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000d7e:	e033      	b.n	8000de8 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 8000d80:	2308      	movs	r3, #8
 8000d82:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 160;
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da4:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_2WS;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000db2:	e019      	b.n	8000de8 <SystemClockConfig+0xd4>
		osc_init.PLL.PLLM = 8;
 8000db4:	2308      	movs	r3, #8
 8000db6:	643b      	str	r3, [r7, #64]	@ 0x40
		osc_init.PLL.PLLN = 240;
 8000db8:	23f0      	movs	r3, #240	@ 0xf0
 8000dba:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLR = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	653b      	str	r3, [r7, #80]	@ 0x50
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000dc8:	230f      	movs	r3, #15
 8000dca:	60fb      	str	r3, [r7, #12]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	613b      	str	r3, [r7, #16]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dd8:	61bb      	str	r3, [r7, #24]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dde:	61fb      	str	r3, [r7, #28]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		break;
 8000de6:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fdb3 	bl	8004958 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClockConfig+0xe8>
		{
			error_handler();
 8000df8:	f000 f84e 	bl	8000e98 <error_handler>
		}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8000dfc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fa5c 	bl	80042c4 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClockConfig+0x102>
		{
			error_handler();
 8000e12:	f000 f841 	bl	8000e98 <error_handler>
	/*
	 * Redo systick Configuration here as we configuring HCLK as 4MHZ here but before HCLK is 16MHZ.
	 * This will Wait for the crystal to stabilize.
	 * Also Ensure proper transitions between clock sources.
	 * */
	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq()/1000);
 8000e16:	f003 fb6f 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <SystemClockConfig+0x128>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	099b      	lsrs	r3, r3, #6
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 f99c 	bl	8002162 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f001 f9a6 	bl	800217c <HAL_SYSTICK_CLKSourceConfig>
 8000e30:	e000      	b.n	8000e34 <SystemClockConfig+0x120>
		return;
 8000e32:	bf00      	nop
}
 8000e34:	3758      	adds	r7, #88	@ 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	10624dd3 	.word	0x10624dd3

08000e40 <send_msg>:


void send_msg(char msg[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff f9e1 	bl	8000210 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <send_msg+0x50>)
 8000e5a:	f004 f86b 	bl	8004f34 <HAL_UART_Transmit>
    char line[3];
    sprintf(line,"\r\n");
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <send_msg+0x54>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fc21 	bl	80056ac <siprintf>
    HAL_UART_Transmit(&huart, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9ce 	bl	8000210 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <send_msg+0x50>)
 8000e82:	f004 f857 	bl	8004f34 <HAL_UART_Transmit>

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000080 	.word	0x20000080
 8000e94:	08006204 	.word	0x08006204

08000e98 <error_handler>:

void error_handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    send_msg("Entered into Error Handler");
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <error_handler+0x10>)
 8000e9e:	f7ff ffcf 	bl	8000e40 <send_msg>
	while(1);
 8000ea2:	bf00      	nop
 8000ea4:	e7fd      	b.n	8000ea2 <error_handler+0xa>
 8000ea6:	bf00      	nop
 8000ea8:	08006208 	.word	0x08006208

08000eac <HAL_MspInit>:
#include "main_1.h"

void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/*Low level processor specific init configurations*/
	//1. Setup the priority grouping of ARM Cortex Mx Processor
			HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f001 f921 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of ARM Cortex Mx Processor
			SCB->SHCSR |= 0x7 << 16;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_MspInit+0x40>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <HAL_MspInit+0x40>)
 8000ebc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000ec0:	6253      	str	r3, [r2, #36]	@ 0x24
	//3. Configuring the priority for the system exceptions
			HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f06f 000b 	mvn.w	r0, #11
 8000eca:	f001 f920 	bl	800210e <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f06f 000a 	mvn.w	r0, #10
 8000ed6:	f001 f91a 	bl	800210e <HAL_NVIC_SetPriority>
			HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	f06f 0009 	mvn.w	r0, #9
 8000ee2:	f001 f914 	bl	800210e <HAL_NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	/*Implementing Low level init's of USART2 peripheral*/
	//1. Enable the clock for the UART2 peripheral
		__HAL_RCC_USART2_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a1d      	ldr	r2, [pc, #116]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0x88>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
	//2. Pin muxing configurations
		gpio_uart.Pin = GPIO_PIN_2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	617b      	str	r3, [r7, #20]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
		gpio_uart.Alternate = GPIO_AF7_USART2;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
		gpio_uart.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f4c:	f001 f96a 	bl	8002224 <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8000f50:	2308      	movs	r3, #8
 8000f52:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f5c:	f001 f962 	bl	8002224 <HAL_GPIO_Init>
	//3. Enable the IRQ and set-up the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f60:	2026      	movs	r0, #38	@ 0x26
 8000f62:	f001 f8f0 	bl	8002146 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	210f      	movs	r1, #15
 8000f6a:	2026      	movs	r0, #38	@ 0x26
 8000f6c:	f001 f8cf 	bl	800210e <HAL_NVIC_SetPriority>
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_CAN;
	//Enable clock for CAN1
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_CAN_MspInit+0xa0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a23      	ldr	r2, [pc, #140]	@ (8001020 <HAL_CAN_MspInit+0xa0>)
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_CAN_MspInit+0xa0>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

	//Pin Muxing Configuration
	gpio_CAN.Pin = GPIO_PIN_11;
 8000fa4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fa8:	60fb      	str	r3, [r7, #12]
	gpio_CAN.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
	gpio_CAN.Alternate = GPIO_AF9_CAN1;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	61fb      	str	r3, [r7, #28]
	gpio_CAN.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
	gpio_CAN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4818      	ldr	r0, [pc, #96]	@ (8001024 <HAL_CAN_MspInit+0xa4>)
 8000fc2:	f001 f92f 	bl	8002224 <HAL_GPIO_Init>

	gpio_CAN.Pin = GPIO_PIN_12;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fca:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&gpio_CAN);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4814      	ldr	r0, [pc, #80]	@ (8001024 <HAL_CAN_MspInit+0xa4>)
 8000fd4:	f001 f926 	bl	8002224 <HAL_GPIO_Init>

	//Enable the IRQ and set-up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000fd8:	2013      	movs	r0, #19
 8000fda:	f001 f8b4 	bl	8002146 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 f8b1 	bl	8002146 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fe4:	2015      	movs	r0, #21
 8000fe6:	f001 f8ae 	bl	8002146 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fea:	2016      	movs	r0, #22
 8000fec:	f001 f8ab 	bl	8002146 <HAL_NVIC_EnableIRQ>

	//HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 14, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	210e      	movs	r1, #14
 8000ff4:	2013      	movs	r0, #19
 8000ff6:	f001 f88a 	bl	800210e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 14, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	210e      	movs	r1, #14
 8000ffe:	2014      	movs	r0, #20
 8001000:	f001 f885 	bl	800210e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 14, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	210e      	movs	r1, #14
 8001008:	2015      	movs	r0, #21
 800100a:	f001 f880 	bl	800210e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 14, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210e      	movs	r1, #14
 8001012:	2016      	movs	r0, #22
 8001014:	f001 f87b 	bl	800210e <HAL_NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_i2c;

    if (hi2c->Instance == I2C1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <HAL_I2C_MspInit+0x94>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d13c      	bne.n	80010b4 <HAL_I2C_MspInit+0x8c>
    {
        // 1. Enable I2C clock
        __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 8001044:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_I2C_MspInit+0x98>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        // 2. Configure I2C SCL and SDA pins (e.g., PB6 for SCL, PB7 for SDA)
        gpio_i2c.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001076:	617b      	str	r3, [r7, #20]
        gpio_i2c.Mode = GPIO_MODE_AF_OD;       // Open-drain for I2C
 8001078:	2312      	movs	r3, #18
 800107a:	61bb      	str	r3, [r7, #24]
        gpio_i2c.Pull = GPIO_PULLUP;
 800107c:	2301      	movs	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
        gpio_i2c.Speed = GPIO_SPEED_FREQ_HIGH;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
        gpio_i2c.Alternate = GPIO_AF4_I2C1;    // Alternate function for I2C1
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &gpio_i2c);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <HAL_I2C_MspInit+0x9c>)
 8001090:	f001 f8c8 	bl	8002224 <HAL_GPIO_Init>

        // 3. Enable and configure NVIC for I2C interrupts (optional for interrupts)
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 11, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	210b      	movs	r1, #11
 8001098:	201f      	movs	r0, #31
 800109a:	f001 f838 	bl	800210e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800109e:	201f      	movs	r0, #31
 80010a0:	f001 f851 	bl	8002146 <HAL_NVIC_EnableIRQ>

        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 11, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	210b      	movs	r1, #11
 80010a8:	2020      	movs	r0, #32
 80010aa:	f001 f830 	bl	800210e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010ae:	2020      	movs	r0, #32
 80010b0:	f001 f849 	bl	8002146 <HAL_NVIC_EnableIRQ>
    }
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	@ 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f004 faf8 	bl	80056ec <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020000 	.word	0x20020000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000148 	.word	0x20000148
 8001130:	20000298 	.word	0x20000298

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001186:	f004 fab7 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fd07 	bl	8000b9c <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800119c:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 80011a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011a4:	20000298 	.word	0x20000298

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 ff8f 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe64 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 ffa7 	bl	8002162 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 ff6f 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	2000014c 	.word	0x2000014c

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2000014c 	.word	0x2000014c

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0ed      	b.n	80014c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fe42 	bl	8000f80 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff ffb4 	bl	8001278 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001312:	e012      	b.n	800133a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001314:	f7ff ffb0 	bl	8001278 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b0a      	cmp	r3, #10
 8001320:	d90b      	bls.n	800133a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0c5      	b.n	80014c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0e5      	beq.n	8001314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0202 	bic.w	r2, r2, #2
 8001356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001358:	f7ff ff8e 	bl	8001278 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800135e:	e012      	b.n	8001386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001360:	f7ff ff8a 	bl	8001278 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d90b      	bls.n	8001386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2205      	movs	r2, #5
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e09f      	b.n	80014c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e5      	bne.n	8001360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e1b      	ldrb	r3, [r3, #24]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7e9b      	ldrb	r3, [r3, #26]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e007      	b.n	8001412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0220 	bic.w	r2, r2, #32
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7edb      	ldrb	r3, [r3, #27]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0210 	bic.w	r2, r2, #16
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0210 	orr.w	r2, r2, #16
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7f1b      	ldrb	r3, [r3, #28]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0208 	orr.w	r2, r2, #8
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e007      	b.n	8001466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0208 	bic.w	r2, r2, #8
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7f5b      	ldrb	r3, [r3, #29]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0204 	orr.w	r2, r2, #4
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e007      	b.n	8001490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0204 	bic.w	r2, r2, #4
 800148e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	ea42 0103 	orr.w	r1, r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d003      	beq.n	80014f6 <HAL_CAN_ConfigFilter+0x26>
 80014ee:	7cfb      	ldrb	r3, [r7, #19]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 80be 	bne.w	8001672 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <HAL_CAN_ConfigFilter+0x1bc>)
 80014f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001510:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2201      	movs	r2, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d123      	bne.n	80015a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3248      	adds	r2, #72	@ 0x48
 8001580:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001596:	6979      	ldr	r1, [r7, #20]
 8001598:	3348      	adds	r3, #72	@ 0x48
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d122      	bne.n	80015ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3248      	adds	r2, #72	@ 0x48
 80015ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e4:	6979      	ldr	r1, [r7, #20]
 80015e6:	3348      	adds	r3, #72	@ 0x48
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001608:	e007      	b.n	800161a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001634:	e007      	b.n	8001646 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	431a      	orrs	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	431a      	orrs	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001664:	f023 0201 	bic.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e006      	b.n	8001680 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
  }
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40006400 	.word	0x40006400

08001690 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d12e      	bne.n	8001702 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fddc 	bl	8001278 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c2:	e012      	b.n	80016ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c4:	f7ff fdd8 	bl	8001278 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d90b      	bls.n	80016ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e012      	b.n	8001710 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e5      	bne.n	80016c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e006      	b.n	8001710 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d003      	beq.n	8001744 <HAL_CAN_AddTxMessage+0x2c>
 800173c:	7ffb      	ldrb	r3, [r7, #31]
 800173e:	2b02      	cmp	r3, #2
 8001740:	f040 80ad 	bne.w	800189e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8095 	beq.w	800188e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0e1b      	lsrs	r3, r3, #24
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3318      	adds	r3, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	440b      	add	r3, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3318      	adds	r3, #24
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3318      	adds	r3, #24
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	7d1b      	ldrb	r3, [r3, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d111      	bne.n	80017fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3318      	adds	r3, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3318      	adds	r3, #24
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	3304      	adds	r3, #4
 80017fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3307      	adds	r3, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	061a      	lsls	r2, r3, #24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3306      	adds	r3, #6
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3305      	adds	r3, #5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4313      	orrs	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	3204      	adds	r2, #4
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	ea43 0200 	orr.w	r2, r3, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001832:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3303      	adds	r3, #3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	061a      	lsls	r2, r3, #24
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3302      	adds	r3, #2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	4313      	orrs	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	4610      	mov	r0, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	ea43 0200 	orr.w	r2, r3, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001868:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3318      	adds	r3, #24
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e00e      	b.n	80018ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e006      	b.n	80018ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3724      	adds	r7, #36	@ 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_GetRxMessage+0x24>
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	f040 8103 	bne.w	8001ae2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10e      	bne.n	8001900 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d116      	bne.n	800191e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0f7      	b.n	8001af0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e0e8      	b.n	8001af0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	331b      	adds	r3, #27
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0204 	and.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10c      	bne.n	8001956 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	331b      	adds	r3, #27
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4413      	add	r3, r2
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0d5b      	lsrs	r3, r3, #21
 800194c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e00b      	b.n	800196e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	331b      	adds	r3, #27
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	331b      	adds	r3, #27
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0202 	and.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	331b      	adds	r3, #27
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2208      	movs	r2, #8
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	e00b      	b.n	80019bc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	331b      	adds	r3, #27
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 020f 	and.w	r2, r3, #15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	331b      	adds	r3, #27
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	331b      	adds	r3, #27
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0a1a      	lsrs	r2, r3, #8
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0c1a      	lsrs	r2, r3, #16
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3302      	adds	r3, #2
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0e1a      	lsrs	r2, r3, #24
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3304      	adds	r3, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0a1a      	lsrs	r2, r3, #8
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0c1a      	lsrs	r2, r3, #16
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3306      	adds	r3, #6
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0e1a      	lsrs	r2, r3, #24
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d108      	bne.n	8001ace <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	e007      	b.n	8001ade <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e006      	b.n	8001af0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d002      	beq.n	8001b1a <HAL_CAN_ActivateNotification+0x1e>
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d109      	bne.n	8001b2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6959      	ldr	r1, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e006      	b.n	8001b3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d07c      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d023      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fd86 	bl	80006bc <HAL_CAN_TxMailbox0CompleteCallback>
 8001bb0:	e016      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc4:	e00c      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd8:	e002      	b.n	8001be0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f96b 	bl	8001eb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fd6a 	bl	80006d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c04:	e016      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e00c      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2c:	e002      	b.n	8001c34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f94b 	bl	8001eca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d024      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fd4e 	bl	80006f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c58:	e016      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c6c:	e00c      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c80:	e002      	b.n	8001c88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f92b 	bl	8001ede <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f912 	bl	8001ef2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d009      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fd12 	bl	8000710 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8f4 	bl	8001f1a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8db 	bl	8001f06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8de 	bl	8001f2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8d7 	bl	8001f42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07b      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d072      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d043      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03e      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e16:	2b60      	cmp	r3, #96	@ 0x60
 8001e18:	d02b      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x32a>
 8001e1a:	2b60      	cmp	r3, #96	@ 0x60
 8001e1c:	d82e      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e1e:	2b50      	cmp	r3, #80	@ 0x50
 8001e20:	d022      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x320>
 8001e22:	2b50      	cmp	r3, #80	@ 0x50
 8001e24:	d82a      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e26:	2b40      	cmp	r3, #64	@ 0x40
 8001e28:	d019      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x316>
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d826      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e2e:	2b30      	cmp	r3, #48	@ 0x30
 8001e30:	d010      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x30c>
 8001e32:	2b30      	cmp	r3, #48	@ 0x30
 8001e34:	d822      	bhi.n	8001e7c <HAL_CAN_IRQHandler+0x334>
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d002      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x2f8>
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d005      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e3e:	e01d      	b.n	8001e7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e48:	e019      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e52:	e014      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e5c:	e00f      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e66:	e00a      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e70:	e005      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e7a:	e000      	b.n	8001e7e <HAL_CAN_IRQHandler+0x336>
            break;
 8001e7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fd27 	bl	80008fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	@ (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff29 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff3e 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff8e 	bl	800204c <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5d 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff31 	bl	8001fbc <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffa2 	bl	80020b4 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d106      	bne.n	8002198 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002196:	e005      	b.n	80021a4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d004      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e00c      	b.n	80021fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2205      	movs	r2, #5
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e165      	b.n	800250c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8154 	bne.w	8002506 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80ae 	beq.w	8002506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002524 <HAL_GPIO_Init+0x300>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x308>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_GPIO_Init+0x30c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_GPIO_Init+0x310>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x318>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x20a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_GPIO_Init+0x31c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x206>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a49      	ldr	r2, [pc, #292]	@ (8002544 <HAL_GPIO_Init+0x320>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x202>
 8002422:	2306      	movs	r3, #6
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002426:	2307      	movs	r3, #7
 8002428:	e00a      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242a:	2305      	movs	r3, #5
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242e:	2304      	movs	r3, #4
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <HAL_GPIO_Init+0x324>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a26      	ldr	r2, [pc, #152]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <HAL_GPIO_Init+0x324>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_GPIO_Init+0x324>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f ae96 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12b      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fd58 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	@ 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b0:	f001 ff7a 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a81      	ldr	r2, [pc, #516]	@ (80027c0 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d807      	bhi.n	80025d0 <HAL_I2C_Init+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a80      	ldr	r2, [pc, #512]	@ (80027c4 <HAL_I2C_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7d      	ldr	r2, [pc, #500]	@ (80027c8 <HAL_I2C_Init+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a78      	ldr	r2, [pc, #480]	@ (80027cc <HAL_I2C_Init+0x280>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a6a      	ldr	r2, [pc, #424]	@ (80027c0 <HAL_I2C_Init+0x274>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d802      	bhi.n	8002620 <HAL_I2C_Init+0xd4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	e009      	b.n	8002634 <HAL_I2C_Init+0xe8>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a69      	ldr	r2, [pc, #420]	@ (80027d0 <HAL_I2C_Init+0x284>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002646:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	495c      	ldr	r1, [pc, #368]	@ (80027c0 <HAL_I2C_Init+0x274>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d819      	bhi.n	8002688 <HAL_I2C_Init+0x13c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e59      	subs	r1, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_Init+0x138>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e59      	subs	r1, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	e051      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002684:	2304      	movs	r3, #4
 8002686:	e04f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <HAL_I2C_Init+0x168>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e012      	b.n	80026da <HAL_I2C_Init+0x18e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x196>
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_I2C_Init+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e58      	subs	r0, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6911      	ldr	r1, [r2, #16]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	000186a0 	.word	0x000186a0
 80027c4:	001e847f 	.word	0x001e847f
 80027c8:	003d08ff 	.word	0x003d08ff
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	2b80      	cmp	r3, #128	@ 0x80
 80027e8:	d103      	bne.n	80027f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	f040 8081 	bne.w	8002928 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002826:	4b44      	ldr	r3, [pc, #272]	@ (8002938 <HAL_I2C_Master_Transmit_IT+0x138>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	4a43      	ldr	r2, [pc, #268]	@ (800293c <HAL_I2C_Master_Transmit_IT+0x13c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a1a      	lsrs	r2, r3, #8
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3b01      	subs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d112      	bne.n	8002872 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	e05b      	b.n	800292a <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d0df      	beq.n	8002840 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2C_Master_Transmit_IT+0x8e>
 800288a:	2302      	movs	r3, #2
 800288c:	e04d      	b.n	800292a <HAL_I2C_Master_Transmit_IT+0x12a>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d007      	beq.n	80028b4 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2221      	movs	r2, #33	@ 0x21
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2210      	movs	r2, #16
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	893a      	ldrh	r2, [r7, #8]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <HAL_I2C_Master_Transmit_IT+0x140>)
 80028f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002912:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002922:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	14f8b589 	.word	0x14f8b589
 8002940:	ffff0000 	.word	0xffff0000

08002944 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002964:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b10      	cmp	r3, #16
 8002972:	d003      	beq.n	800297c <HAL_I2C_EV_IRQHandler+0x38>
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b40      	cmp	r3, #64	@ 0x40
 8002978:	f040 80b1 	bne.w	8002ade <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800299c:	d003      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0x62>
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_EV_IRQHandler+0x66>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_I2C_EV_IRQHandler+0x68>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f000 8114 	beq.w	8002bda <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_I2C_EV_IRQHandler+0x90>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f001 fc60 	bl	800428c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fd66 	bl	800349e <I2C_Master_SB>
 80029d2:	e083      	b.n	8002adc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0xac>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fdde 	bl	80035aa <I2C_Master_ADD10>
 80029ee:	e075      	b.n	8002adc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0xc8>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fdfa 	bl	80035fe <I2C_Master_ADDR>
 8002a0a:	e067      	b.n	8002adc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a24:	f000 80db 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9c2 	bl	8002dd0 <I2C_MasterTransmit_TXE>
 8002a4c:	e046      	b.n	8002adc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80c2 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80bc 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b21      	cmp	r3, #33	@ 0x21
 8002a6a:	d103      	bne.n	8002a74 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa4b 	bl	8002f08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a72:	e0b4      	b.n	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	f040 80b1 	bne.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fab9 	bl	8002ff4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a82:	e0ac      	b.n	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a92:	f000 80a4 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <HAL_I2C_EV_IRQHandler+0x178>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_I2C_EV_IRQHandler+0x178>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fb35 	bl	8003124 <I2C_MasterReceive_RXNE>
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 808b 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8085 	beq.w	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fbed 	bl	80032b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ada:	e080      	b.n	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
 8002adc:	e07f      	b.n	8002bde <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e007      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d011      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 ffb8 	bl	8003a9c <I2C_Slave_ADDR>
 8002b2c:	e05a      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_I2C_EV_IRQHandler+0x206>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fff2 	bl	8003b2c <I2C_Slave_STOPF>
 8002b48:	e04c      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	2b21      	cmp	r3, #33	@ 0x21
 8002b4e:	d002      	beq.n	8002b56 <HAL_I2C_EV_IRQHandler+0x212>
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	2b29      	cmp	r3, #41	@ 0x29
 8002b54:	d120      	bne.n	8002b98 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_I2C_EV_IRQHandler+0x238>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_I2C_EV_IRQHandler+0x238>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fed3 	bl	8003920 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b7a:	e032      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02d      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d028      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 ff02 	bl	800399a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b96:	e024      	b.n	8002be2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x27a>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x27a>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 ff10 	bl	80039dc <I2C_SlaveReceive_RXNE>
 8002bbc:	e012      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 ff40 	bl	8003a58 <I2C_SlaveReceive_BTF>
 8002bd8:	e004      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002be2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	@ 0x28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_I2C_ER_IRQHandler+0x4a>
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c32:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_ER_IRQHandler+0x70>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002c58:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03e      	beq.n	8002ce2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d039      	beq.n	8002ce2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002c6e:	7efb      	ldrb	r3, [r7, #27]
 8002c70:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c80:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c88:	7ebb      	ldrb	r3, [r7, #26]
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d112      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xca>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xca>
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b21      	cmp	r3, #33	@ 0x21
 8002c98:	d008      	beq.n	8002cac <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b29      	cmp	r3, #41	@ 0x29
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_ER_IRQHandler+0xc2>
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b28      	cmp	r3, #40	@ 0x28
 8002ca4:	d106      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b21      	cmp	r3, #33	@ 0x21
 8002caa:	d103      	bne.n	8002cb4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 f86d 	bl	8003d8c <I2C_Slave_AF>
 8002cb2:	e016      	b.n	8002ce2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cbc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cc6:	7efb      	ldrb	r3, [r7, #27]
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d002      	beq.n	8002cd2 <HAL_I2C_ER_IRQHandler+0xe8>
 8002ccc:	7efb      	ldrb	r3, [r7, #27]
 8002cce:	2b40      	cmp	r3, #64	@ 0x40
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_I2C_ER_IRQHandler+0x11e>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d06:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f001 f8aa 	bl	8003e74 <I2C_ITError>
  }
}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	@ 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
 8002d70:	4613      	mov	r3, r2
 8002d72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002de6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d150      	bne.n	8002e98 <I2C_MasterTransmit_TXE+0xc8>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b21      	cmp	r3, #33	@ 0x21
 8002dfa:	d14d      	bne.n	8002e98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d01d      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d01a      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e0e:	d016      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2211      	movs	r2, #17
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd ff3a 	bl	8000cb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e3c:	e060      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff87 	bl	8002d94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e86:	e03b      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd ff0d 	bl	8000cb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e96:	e033      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b21      	cmp	r3, #33	@ 0x21
 8002e9c:	d005      	beq.n	8002eaa <I2C_MasterTransmit_TXE+0xda>
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d12d      	bne.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b22      	cmp	r3, #34	@ 0x22
 8002ea8:	d12a      	bne.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ec4:	e01c      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d103      	bne.n	8002eda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f88e 	bl	8002ff4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ed8:	e012      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002efe:	e7ff      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b21      	cmp	r3, #33	@ 0x21
 8002f20:	d164      	bne.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f50:	e04c      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d01d      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d01a      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f64:	d016      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2211      	movs	r2, #17
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fe8f 	bl	8000cb0 <HAL_I2C_MasterTxCpltCallback>
}
 8002f92:	e02b      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fa2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d107      	bne.n	8002fde <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fedc 	bl	8002d94 <HAL_I2C_MemTxCpltCallback>
}
 8002fdc:	e006      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fe62 	bl	8000cb0 <HAL_I2C_MasterTxCpltCallback>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003002:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10b      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800302a:	e077      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	b29b      	uxth	r3, r3
 8003032:	121b      	asrs	r3, r3, #8
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003046:	e069      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10b      	bne.n	8003068 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003054:	b2da      	uxtb	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003066:	e059      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306c:	2b02      	cmp	r3, #2
 800306e:	d152      	bne.n	8003116 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b22      	cmp	r3, #34	@ 0x22
 8003074:	d10d      	bne.n	8003092 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003084:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003090:	e044      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b21      	cmp	r3, #33	@ 0x21
 80030a0:	d112      	bne.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030c6:	e029      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d124      	bne.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b21      	cmp	r3, #33	@ 0x21
 80030d6:	d121      	bne.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe40 	bl	8002d94 <HAL_I2C_MemTxCpltCallback>
}
 8003114:	e002      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fb5c 	bl	80027d4 <I2C_Flush_DR>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b22      	cmp	r3, #34	@ 0x22
 8003136:	f040 80b9 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d921      	bls.n	8003192 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b03      	cmp	r3, #3
 800317c:	f040 8096 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003190:	e08c      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	2b02      	cmp	r3, #2
 8003198:	d07f      	beq.n	800329a <I2C_MasterReceive_RXNE+0x176>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <I2C_MasterReceive_RXNE+0x82>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d179      	bne.n	800329a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f001 f83e 	bl	8004228 <I2C_WaitOnSTOPRequestThroughIT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d14c      	bne.n	800324c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d10a      	bne.n	8003222 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fdc4 	bl	8002da8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003220:	e044      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d002      	beq.n	8003236 <I2C_MasterReceive_RXNE+0x112>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b20      	cmp	r3, #32
 8003234:	d103      	bne.n	800323e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
 800323c:	e002      	b.n	8003244 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2212      	movs	r2, #18
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fd6f 	bl	8002d28 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800324a:	e02f      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800325a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fd24 	bl	8000ce0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003298:	e008      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a8:	605a      	str	r2, [r3, #4]
}
 80032aa:	e7ff      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003302:	e0c8      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d129      	bne.n	8003362 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00a      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003360:	e099      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	f040 8081 	bne.w	8003470 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d002      	beq.n	800337a <I2C_MasterReceive_BTF+0xc6>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d108      	bne.n	800338c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e019      	b.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <I2C_MasterReceive_BTF+0xe4>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d108      	bne.n	80033aa <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e00a      	b.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d007      	beq.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800341a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b40      	cmp	r3, #64	@ 0x40
 800342e:	d10a      	bne.n	8003446 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fcb2 	bl	8002da8 <HAL_I2C_MemRxCpltCallback>
}
 8003444:	e027      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d002      	beq.n	800345a <I2C_MasterReceive_BTF+0x1a6>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d103      	bne.n	8003462 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003460:	e002      	b.n	8003468 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2212      	movs	r2, #18
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fc5d 	bl	8002d28 <HAL_I2C_MasterRxCpltCallback>
}
 800346e:	e012      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d117      	bne.n	80034e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034cc:	e067      	b.n	800359e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
}
 80034e0:	e05d      	b.n	800359e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ea:	d133      	bne.n	8003554 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b21      	cmp	r3, #33	@ 0x21
 80034f6:	d109      	bne.n	800350c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e008      	b.n	800351e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <I2C_Master_SB+0x92>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <I2C_Master_SB+0x100>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02d      	beq.n	800359e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003550:	605a      	str	r2, [r3, #4]
}
 8003552:	e024      	b.n	800359e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10e      	bne.n	800357a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	b29b      	uxth	r3, r3
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030f 	orn	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
}
 8003578:	e011      	b.n	800359e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	b29b      	uxth	r3, r3
 8003588:	11db      	asrs	r3, r3, #7
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0306 	and.w	r3, r3, #6
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f063 030e 	orn	r3, r3, #14
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <I2C_Master_ADD10+0x26>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <I2C_Master_ADD10+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f0:	605a      	str	r2, [r3, #4]
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035fe:	b480      	push	{r7}
 8003600:	b091      	sub	sp, #68	@ 0x44
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800360c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b22      	cmp	r3, #34	@ 0x22
 8003626:	f040 8169 	bne.w	80038fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <I2C_Master_ADDR+0x54>
 8003632:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d10b      	bne.n	8003652 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	e160      	b.n	8003914 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11d      	bne.n	8003696 <I2C_Master_ADDR+0x98>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003662:	d118      	bne.n	8003696 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003688:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	651a      	str	r2, [r3, #80]	@ 0x50
 8003694:	e13e      	b.n	8003914 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e115      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	f040 808a 	bne.w	80037e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036da:	d137      	bne.n	800374c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fa:	d113      	bne.n	8003724 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	e0e7      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e0d3      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374e:	2b08      	cmp	r3, #8
 8003750:	d02e      	beq.n	80037b0 <I2C_Master_ADDR+0x1b2>
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	2b20      	cmp	r3, #32
 8003756:	d02b      	beq.n	80037b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	2b12      	cmp	r3, #18
 800375c:	d102      	bne.n	8003764 <I2C_Master_ADDR+0x166>
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	2b01      	cmp	r3, #1
 8003762:	d125      	bne.n	80037b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00e      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2b02      	cmp	r3, #2
 800376e:	d00b      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
 8003770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003772:	2b10      	cmp	r3, #16
 8003774:	d008      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e007      	b.n	8003798 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003796:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	e0a1      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e085      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d14d      	bne.n	800388e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d016      	beq.n	8003826 <I2C_Master_ADDR+0x228>
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d013      	beq.n	8003826 <I2C_Master_ADDR+0x228>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	2b10      	cmp	r3, #16
 8003802:	d010      	beq.n	8003826 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003812:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003844:	d117      	bne.n	8003876 <I2C_Master_ADDR+0x278>
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800384c:	d00b      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b01      	cmp	r3, #1
 8003852:	d008      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 8003854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003856:	2b08      	cmp	r3, #8
 8003858:	d005      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	2b10      	cmp	r3, #16
 800385e:	d002      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	2b20      	cmp	r3, #32
 8003864:	d107      	bne.n	8003876 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003874:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	e032      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800389c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ac:	d117      	bne.n	80038de <I2C_Master_ADDR+0x2e0>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038b4:	d00b      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d008      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d005      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d002      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d107      	bne.n	80038de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038fa:	e00b      	b.n	8003914 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	e7ff      	b.n	8003914 <I2C_Master_ADDR+0x316>
 8003914:	bf00      	nop
 8003916:	3744      	adds	r7, #68	@ 0x44
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02b      	beq.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b29      	cmp	r3, #41	@ 0x29
 800396c:	d111      	bne.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2221      	movs	r2, #33	@ 0x21
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2228      	movs	r2, #40	@ 0x28
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff f9d5 	bl	8002d3c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02c      	beq.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d114      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d111      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2222      	movs	r2, #34	@ 0x22
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2228      	movs	r2, #40	@ 0x28
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff f980 	bl	8002d50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ab6:	2b28      	cmp	r3, #40	@ 0x28
 8003ab8:	d125      	bne.n	8003b06 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	81bb      	strh	r3, [r7, #12]
 8003ae8:	e002      	b.n	8003af0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003af8:	89ba      	ldrh	r2, [r7, #12]
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff f930 	bl	8002d64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b04:	e00e      	b.n	8003b24 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b88:	d172      	bne.n	8003c70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b22      	cmp	r3, #34	@ 0x22
 8003b8e:	d002      	beq.n	8003b96 <I2C_Slave_STOPF+0x6a>
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b94:	d135      	bne.n	8003c02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f043 0204 	orr.w	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fb19 	bl	8002206 <HAL_DMA_GetState>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d049      	beq.n	8003c6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	4a69      	ldr	r2, [pc, #420]	@ (8003d84 <I2C_Slave_STOPF+0x258>)
 8003be0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe faeb 	bl	80021c2 <HAL_DMA_Abort_IT>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03d      	beq.n	8003c6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c00:	e035      	b.n	8003c6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fae3 	bl	8002206 <HAL_DMA_GetState>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d014      	beq.n	8003c70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003d84 <I2C_Slave_STOPF+0x258>)
 8003c4c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fab5 	bl	80021c2 <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
 8003c6c:	e000      	b.n	8003c70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03e      	beq.n	8003cf8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d112      	bne.n	8003cae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb8:	2b40      	cmp	r3, #64	@ 0x40
 8003cba:	d112      	bne.n	8003ce2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8b7 	bl	8003e74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d06:	e039      	b.n	8003d7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d0c:	d109      	bne.n	8003d22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2228      	movs	r2, #40	@ 0x28
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff f817 	bl	8002d50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b28      	cmp	r3, #40	@ 0x28
 8003d2c:	d111      	bne.n	8003d52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <I2C_Slave_STOPF+0x25c>)
 8003d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff f818 	bl	8002d80 <HAL_I2C_ListenCpltCallback>
}
 8003d50:	e014      	b.n	8003d7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	2b22      	cmp	r3, #34	@ 0x22
 8003d58:	d002      	beq.n	8003d60 <I2C_Slave_STOPF+0x234>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b22      	cmp	r3, #34	@ 0x22
 8003d5e:	d10d      	bne.n	8003d7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe ffea 	bl	8002d50 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	080040d9 	.word	0x080040d9
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d002      	beq.n	8003dae <I2C_Slave_AF+0x22>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d129      	bne.n	8003e02 <I2C_Slave_AF+0x76>
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b28      	cmp	r3, #40	@ 0x28
 8003db2:	d126      	bne.n	8003e02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e70 <I2C_Slave_AF+0xe4>)
 8003db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe ffc0 	bl	8002d80 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e00:	e031      	b.n	8003e66 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b21      	cmp	r3, #33	@ 0x21
 8003e06:	d129      	bne.n	8003e5c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <I2C_Slave_AF+0xe4>)
 8003e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2221      	movs	r2, #33	@ 0x21
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fcc0 	bl	80027d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fe ff71 	bl	8002d3c <HAL_I2C_SlaveTxCpltCallback>
}
 8003e5a:	e004      	b.n	8003e66 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e64:	615a      	str	r2, [r3, #20]
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	ffff0000 	.word	0xffff0000

08003e74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d002      	beq.n	8003e98 <I2C_ITError+0x24>
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d10a      	bne.n	8003eae <I2C_ITError+0x3a>
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b22      	cmp	r3, #34	@ 0x22
 8003e9c:	d107      	bne.n	8003eae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003eb4:	2b28      	cmp	r3, #40	@ 0x28
 8003eb6:	d107      	bne.n	8003ec8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2228      	movs	r2, #40	@ 0x28
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ec6:	e015      	b.n	8003ef4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed6:	d00a      	beq.n	8003eee <I2C_ITError+0x7a>
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b60      	cmp	r3, #96	@ 0x60
 8003edc:	d007      	beq.n	8003eee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f02:	d162      	bne.n	8003fca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d020      	beq.n	8003f64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	4a6a      	ldr	r2, [pc, #424]	@ (80040d0 <I2C_ITError+0x25c>)
 8003f28:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe f947 	bl	80021c2 <HAL_DMA_Abort_IT>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8089 	beq.w	800404e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4798      	blx	r3
 8003f62:	e074      	b.n	800404e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	4a59      	ldr	r2, [pc, #356]	@ (80040d0 <I2C_ITError+0x25c>)
 8003f6a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe f926 	bl	80021c2 <HAL_DMA_Abort_IT>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d068      	beq.n	800404e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d10b      	bne.n	8003fa2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4798      	blx	r3
 8003fc8:	e041      	b.n	800404e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b60      	cmp	r3, #96	@ 0x60
 8003fd4:	d125      	bne.n	8004022 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d10b      	bne.n	800400a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fece 	bl	8002dbc <HAL_I2C_AbortCpltCallback>
 8004020:	e015      	b.n	800404e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	d10b      	bne.n	8004048 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fc fe49 	bl	8000ce0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004092:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d113      	bne.n	80040c8 <I2C_ITError+0x254>
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b28      	cmp	r3, #40	@ 0x28
 80040a4:	d110      	bne.n	80040c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <I2C_ITError+0x260>)
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fe5c 	bl	8002d80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	080040d9 	.word	0x080040d9
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004220 <I2C_DMAAbort+0x148>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004224 <I2C_DMAAbort+0x14c>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a1a      	lsrs	r2, r3, #8
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00da      	lsls	r2, r3, #3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800411e:	e00a      	b.n	8004136 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b01      	subs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d0ea      	beq.n	800410c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004142:	2200      	movs	r2, #0
 8004144:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	2200      	movs	r2, #0
 8004154:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	2200      	movs	r2, #0
 800417a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b60      	cmp	r3, #96	@ 0x60
 80041a6:	d10e      	bne.n	80041c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041be:	6978      	ldr	r0, [r7, #20]
 80041c0:	f7fe fdfc 	bl	8002dbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041c4:	e027      	b.n	8004216 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041cc:	2b28      	cmp	r3, #40	@ 0x28
 80041ce:	d117      	bne.n	8004200 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2228      	movs	r2, #40	@ 0x28
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041fe:	e007      	b.n	8004210 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004210:	6978      	ldr	r0, [r7, #20]
 8004212:	f7fc fd65 	bl	8000ce0 <HAL_I2C_ErrorCallback>
}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000000 	.word	0x20000000
 8004224:	14f8b589 	.word	0x14f8b589

08004228 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	4a13      	ldr	r2, [pc, #76]	@ (8004288 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0a1a      	lsrs	r2, r3, #8
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3b01      	subs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e008      	b.n	8004278 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004274:	d0e9      	beq.n	800424a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20000000 	.word	0x20000000
 8004288:	14f8b589 	.word	0x14f8b589

0800428c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800429c:	d103      	bne.n	80042a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042a4:	e007      	b.n	80042b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042ae:	d102      	bne.n	80042b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2208      	movs	r2, #8
 80042b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cc      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d8:	4b68      	ldr	r3, [pc, #416]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d90c      	bls.n	8004300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b65      	ldr	r3, [pc, #404]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b63      	ldr	r3, [pc, #396]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b8      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004318:	4b59      	ldr	r3, [pc, #356]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a58      	ldr	r2, [pc, #352]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004330:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a52      	ldr	r2, [pc, #328]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800433a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b50      	ldr	r3, [pc, #320]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	494d      	ldr	r1, [pc, #308]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d044      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b47      	ldr	r3, [pc, #284]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d119      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e07f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	2b03      	cmp	r3, #3
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e067      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4934      	ldr	r1, [pc, #208]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fc ff60 	bl	8001278 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fc ff5c 	bl	8001278 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 020c 	and.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1eb      	bne.n	80043bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b25      	ldr	r3, [pc, #148]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20c      	bcs.n	800440c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b22      	ldr	r3, [pc, #136]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e032      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4916      	ldr	r1, [pc, #88]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004436:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490e      	ldr	r1, [pc, #56]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444a:	f000 f855 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490a      	ldr	r1, [pc, #40]	@ (8004484 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a09      	ldr	r2, [pc, #36]	@ (8004488 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004466:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc fec0 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00
 8004480:	40023800 	.word	0x40023800
 8004484:	08006224 	.word	0x08006224
 8004488:	20000000 	.word	0x20000000
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	@ (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08006234 	.word	0x08006234

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	08006234 	.word	0x08006234

080044f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b0ae      	sub	sp, #184	@ 0xb8
 80044fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451e:	4bcb      	ldr	r3, [pc, #812]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b0c      	cmp	r3, #12
 8004528:	f200 8206 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x440>
 800452c:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	08004939 	.word	0x08004939
 800453c:	08004939 	.word	0x08004939
 8004540:	08004939 	.word	0x08004939
 8004544:	08004571 	.word	0x08004571
 8004548:	08004939 	.word	0x08004939
 800454c:	08004939 	.word	0x08004939
 8004550:	08004939 	.word	0x08004939
 8004554:	08004579 	.word	0x08004579
 8004558:	08004939 	.word	0x08004939
 800455c:	08004939 	.word	0x08004939
 8004560:	08004939 	.word	0x08004939
 8004564:	08004769 	.word	0x08004769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4bb9      	ldr	r3, [pc, #740]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x358>)
 800456a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800456e:	e1e7      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004570:	4bb8      	ldr	r3, [pc, #736]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004576:	e1e3      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004578:	4bb4      	ldr	r3, [pc, #720]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004584:	4bb1      	ldr	r3, [pc, #708]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d071      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004590:	4bae      	ldr	r3, [pc, #696]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800459c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	f04f 0000 	mov.w	r0, #0
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	0159      	lsls	r1, r3, #5
 80045c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c8:	0150      	lsls	r0, r2, #5
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4621      	mov	r1, r4
 80045d0:	1a51      	subs	r1, r2, r1
 80045d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb63 0301 	sbc.w	r3, r3, r1
 80045da:	647b      	str	r3, [r7, #68]	@ 0x44
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80045e8:	4649      	mov	r1, r9
 80045ea:	018b      	lsls	r3, r1, #6
 80045ec:	4641      	mov	r1, r8
 80045ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045f2:	4641      	mov	r1, r8
 80045f4:	018a      	lsls	r2, r1, #6
 80045f6:	4641      	mov	r1, r8
 80045f8:	1a51      	subs	r1, r2, r1
 80045fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045fc:	4649      	mov	r1, r9
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004610:	4649      	mov	r1, r9
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4641      	mov	r1, r8
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4622      	mov	r2, r4
 8004626:	189b      	adds	r3, r3, r2
 8004628:	633b      	str	r3, [r7, #48]	@ 0x30
 800462a:	462b      	mov	r3, r5
 800462c:	460a      	mov	r2, r1
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004640:	4629      	mov	r1, r5
 8004642:	024b      	lsls	r3, r1, #9
 8004644:	4621      	mov	r1, r4
 8004646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464a:	4621      	mov	r1, r4
 800464c:	024a      	lsls	r2, r1, #9
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800465c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004664:	f7fb fe2c 	bl	80002c0 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004672:	e067      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004674:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004680:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468e:	2300      	movs	r3, #0
 8004690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4621      	mov	r1, r4
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80046c8:	4649      	mov	r1, r9
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4641      	mov	r1, r8
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4641      	mov	r1, r8
 80046d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80046dc:	4649      	mov	r1, r9
 80046de:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f6:	4692      	mov	sl, r2
 80046f8:	469b      	mov	fp, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	462b      	mov	r3, r5
 8004704:	eb4b 0303 	adc.w	r3, fp, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004716:	4629      	mov	r1, r5
 8004718:	028b      	lsls	r3, r1, #10
 800471a:	4621      	mov	r1, r4
 800471c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004720:	4621      	mov	r1, r4
 8004722:	028a      	lsls	r2, r1, #10
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800472c:	2200      	movs	r2, #0
 800472e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004730:	677a      	str	r2, [r7, #116]	@ 0x74
 8004732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004736:	f7fb fdc3 	bl	80002c0 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4613      	mov	r3, r2
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800475a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004766:	e0eb      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b38      	ldr	r3, [pc, #224]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004774:	4b35      	ldr	r3, [pc, #212]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d06b      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4b32      	ldr	r3, [pc, #200]	@ (800484c <HAL_RCC_GetSysClockFreq+0x354>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	2200      	movs	r2, #0
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800478a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800478c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	663b      	str	r3, [r7, #96]	@ 0x60
 8004794:	2300      	movs	r3, #0
 8004796:	667b      	str	r3, [r7, #100]	@ 0x64
 8004798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	f04f 0000 	mov.w	r0, #0
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	0159      	lsls	r1, r3, #5
 80047aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ae:	0150      	lsls	r0, r2, #5
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4621      	mov	r1, r4
 80047b6:	1a51      	subs	r1, r2, r1
 80047b8:	61b9      	str	r1, [r7, #24]
 80047ba:	4629      	mov	r1, r5
 80047bc:	eb63 0301 	sbc.w	r3, r3, r1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047ce:	4659      	mov	r1, fp
 80047d0:	018b      	lsls	r3, r1, #6
 80047d2:	4651      	mov	r1, sl
 80047d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d8:	4651      	mov	r1, sl
 80047da:	018a      	lsls	r2, r1, #6
 80047dc:	4651      	mov	r1, sl
 80047de:	ebb2 0801 	subs.w	r8, r2, r1
 80047e2:	4659      	mov	r1, fp
 80047e4:	eb63 0901 	sbc.w	r9, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fc:	4690      	mov	r8, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	4623      	mov	r3, r4
 8004802:	eb18 0303 	adds.w	r3, r8, r3
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	462b      	mov	r3, r5
 800480a:	eb49 0303 	adc.w	r3, r9, r3
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	024b      	lsls	r3, r1, #9
 8004820:	4621      	mov	r1, r4
 8004822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004826:	4621      	mov	r1, r4
 8004828:	024a      	lsls	r2, r1, #9
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004832:	2200      	movs	r2, #0
 8004834:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004836:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800483c:	f7fb fd40 	bl	80002c0 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800484a:	e065      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x420>
 800484c:	40023800 	.word	0x40023800
 8004850:	00f42400 	.word	0x00f42400
 8004854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004858:	4b3d      	ldr	r3, [pc, #244]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x458>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	2200      	movs	r2, #0
 8004860:	4618      	mov	r0, r3
 8004862:	4611      	mov	r1, r2
 8004864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004868:	653b      	str	r3, [r7, #80]	@ 0x50
 800486a:	2300      	movs	r3, #0
 800486c:	657b      	str	r3, [r7, #84]	@ 0x54
 800486e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004872:	4642      	mov	r2, r8
 8004874:	464b      	mov	r3, r9
 8004876:	f04f 0000 	mov.w	r0, #0
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	0159      	lsls	r1, r3, #5
 8004880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004884:	0150      	lsls	r0, r2, #5
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4641      	mov	r1, r8
 800488c:	1a51      	subs	r1, r2, r1
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	4649      	mov	r1, r9
 8004892:	eb63 0301 	sbc.w	r3, r3, r1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048a4:	4659      	mov	r1, fp
 80048a6:	018b      	lsls	r3, r1, #6
 80048a8:	4651      	mov	r1, sl
 80048aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ae:	4651      	mov	r1, sl
 80048b0:	018a      	lsls	r2, r1, #6
 80048b2:	4651      	mov	r1, sl
 80048b4:	1a54      	subs	r4, r2, r1
 80048b6:	4659      	mov	r1, fp
 80048b8:	eb63 0501 	sbc.w	r5, r3, r1
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	00eb      	lsls	r3, r5, #3
 80048c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ca:	00e2      	lsls	r2, r4, #3
 80048cc:	4614      	mov	r4, r2
 80048ce:	461d      	mov	r5, r3
 80048d0:	4643      	mov	r3, r8
 80048d2:	18e3      	adds	r3, r4, r3
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	464b      	mov	r3, r9
 80048d8:	eb45 0303 	adc.w	r3, r5, r3
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ea:	4629      	mov	r1, r5
 80048ec:	028b      	lsls	r3, r1, #10
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f4:	4621      	mov	r1, r4
 80048f6:	028a      	lsls	r2, r1, #10
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004900:	2200      	movs	r2, #0
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800490a:	f7fb fcd9 	bl	80002c0 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4613      	mov	r3, r2
 8004914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004918:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x458>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800492a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004936:	e003      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800493a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800493e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004944:	4618      	mov	r0, r3
 8004946:	37b8      	adds	r7, #184	@ 0xb8
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400

08004958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e28d      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8083 	beq.w	8004a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004978:	4b94      	ldr	r3, [pc, #592]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b04      	cmp	r3, #4
 8004982:	d019      	beq.n	80049b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004984:	4b91      	ldr	r3, [pc, #580]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
        || \
 800498c:	2b08      	cmp	r3, #8
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004990:	4b8e      	ldr	r3, [pc, #568]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b88      	ldr	r3, [pc, #544]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b84      	ldr	r3, [pc, #528]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x124>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e25a      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x90>
 80049da:	4b7c      	ldr	r3, [pc, #496]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7b      	ldr	r2, [pc, #492]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xcc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0xb4>
 80049f2:	4b76      	ldr	r3, [pc, #472]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a75      	ldr	r2, [pc, #468]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b73      	ldr	r3, [pc, #460]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a72      	ldr	r2, [pc, #456]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xcc>
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6e      	ldr	r2, [pc, #440]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b6c      	ldr	r3, [pc, #432]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fc24 	bl	8001278 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fc fc20 	bl	8001278 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e21f      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xdc>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fc10 	bl	8001278 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fc0c 	bl	8001278 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e20b      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b57      	ldr	r3, [pc, #348]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x104>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06f      	beq.n	8004b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a8a:	4b50      	ldr	r3, [pc, #320]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d017      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a96:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aae:	4b47      	ldr	r3, [pc, #284]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d11c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aba:	4b44      	ldr	r3, [pc, #272]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d116      	bne.n	8004af4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac6:	4b41      	ldr	r3, [pc, #260]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_RCC_OscConfig+0x186>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e1d3      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ade:	4b3b      	ldr	r3, [pc, #236]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4937      	ldr	r1, [pc, #220]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	e03a      	b.n	8004b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004afc:	4b34      	ldr	r3, [pc, #208]	@ (8004bd0 <HAL_RCC_OscConfig+0x278>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fbb9 	bl	8001278 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fc fbb5 	bl	8001278 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e1b4      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4925      	ldr	r1, [pc, #148]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]
 8004b3c:	e015      	b.n	8004b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3e:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <HAL_RCC_OscConfig+0x278>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fb98 	bl	8001278 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fc fb94 	bl	8001278 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e193      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d036      	beq.n	8004be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc fb78 	bl	8001278 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fc fb74 	bl	8001278 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e173      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_RCC_OscConfig+0x274>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x234>
 8004baa:	e01b      	b.n	8004be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fc fb61 	bl	8001278 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb8:	e00e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bba:	f7fc fb5d 	bl	8001278 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d907      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e15c      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	42470000 	.word	0x42470000
 8004bd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ea      	bne.n	8004bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8097 	beq.w	8004d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf6:	4b83      	ldr	r3, [pc, #524]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10f      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	4b7f      	ldr	r3, [pc, #508]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c12:	4b7c      	ldr	r3, [pc, #496]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	4b79      	ldr	r3, [pc, #484]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2e:	4b76      	ldr	r3, [pc, #472]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a75      	ldr	r2, [pc, #468]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fc fb1d 	bl	8001278 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fc fb19 	bl	8001278 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e118      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	4b6c      	ldr	r3, [pc, #432]	@ (8004e08 <HAL_RCC_OscConfig+0x4b0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x31e>
 8004c68:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x358>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x340>
 8004c7e:	4b61      	ldr	r3, [pc, #388]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	4a60      	ldr	r2, [pc, #384]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x358>
 8004c98:	4b5a      	ldr	r3, [pc, #360]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	4a59      	ldr	r2, [pc, #356]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca4:	4b57      	ldr	r3, [pc, #348]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a56      	ldr	r2, [pc, #344]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004caa:	f023 0304 	bic.w	r3, r3, #4
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fc fade 	bl	8001278 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fc fada 	bl	8001278 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0d7      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0ee      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x368>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fac8 	bl	8001278 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fc fac4 	bl	8001278 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0c1      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d02:	4b40      	ldr	r3, [pc, #256]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ee      	bne.n	8004cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d14:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	4a3a      	ldr	r2, [pc, #232]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80ad 	beq.w	8004e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2a:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d060      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d145      	bne.n	8004dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fa98 	bl	8001278 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fa94 	bl	8001278 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e093      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	3b01      	subs	r3, #1
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	061b      	lsls	r3, r3, #24
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	491b      	ldr	r1, [pc, #108]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fc fa69 	bl	8001278 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fc fa65 	bl	8001278 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e064      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x452>
 8004dc8:	e05c      	b.n	8004e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_RCC_OscConfig+0x4b4>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fc fa52 	bl	8001278 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fc fa4e 	bl	8001278 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e04d      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <HAL_RCC_OscConfig+0x4ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x480>
 8004df6:	e045      	b.n	8004e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e040      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e10:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <HAL_RCC_OscConfig+0x538>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d030      	beq.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d129      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d122      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d119      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10f      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e042      	b.n	8004f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f818 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	@ 0x24
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f973 	bl	80051c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	@ 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d175      	bne.n	8005040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_UART_Transmit+0x2c>
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e06e      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	@ 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f72:	f7fc f981 	bl	8001278 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fa8:	e02e      	b.n	8005008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	@ 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f848 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e03a      	b.n	8005042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	@ 0x40
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f814 	bl	800504a <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e006      	b.n	8005042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	e03b      	b.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d037      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fc f908 	bl	8001278 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	6a3a      	ldr	r2, [r7, #32]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <UART_WaitOnFlagUntilTimeout+0x30>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e03a      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b80      	cmp	r3, #128	@ 0x80
 8005090:	d020      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d01d      	beq.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d116      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f81d 	bl	80050fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2208      	movs	r2, #8
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e00f      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d0b4      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b095      	sub	sp, #84	@ 0x54
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005124:	643a      	str	r2, [r7, #64]	@ 0x40
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	@ 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005194:	61ba      	str	r2, [r7, #24]
 8005196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051b6:	bf00      	nop
 80051b8:	3754      	adds	r7, #84	@ 0x54
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b0c0      	sub	sp, #256	@ 0x100
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	68d9      	ldr	r1, [r3, #12]
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	ea40 0301 	orr.w	r3, r0, r1
 80051ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800521c:	f021 010c 	bic.w	r1, r1, #12
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800522a:	430b      	orrs	r3, r1
 800522c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523e:	6999      	ldr	r1, [r3, #24]
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	ea40 0301 	orr.w	r3, r0, r1
 800524a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b8f      	ldr	r3, [pc, #572]	@ (8005490 <UART_SetConfig+0x2cc>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d005      	beq.n	8005264 <UART_SetConfig+0xa0>
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b8d      	ldr	r3, [pc, #564]	@ (8005494 <UART_SetConfig+0x2d0>)
 8005260:	429a      	cmp	r2, r3
 8005262:	d104      	bne.n	800526e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7ff f934 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8005268:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800526c:	e003      	b.n	8005276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800526e:	f7ff f91b 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8005272:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005280:	f040 810c 	bne.w	800549c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800528e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005296:	4622      	mov	r2, r4
 8005298:	462b      	mov	r3, r5
 800529a:	1891      	adds	r1, r2, r2
 800529c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800529e:	415b      	adcs	r3, r3
 80052a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052a6:	4621      	mov	r1, r4
 80052a8:	eb12 0801 	adds.w	r8, r2, r1
 80052ac:	4629      	mov	r1, r5
 80052ae:	eb43 0901 	adc.w	r9, r3, r1
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c6:	4690      	mov	r8, r2
 80052c8:	4699      	mov	r9, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	eb18 0303 	adds.w	r3, r8, r3
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052d4:	462b      	mov	r3, r5
 80052d6:	eb49 0303 	adc.w	r3, r9, r3
 80052da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052f2:	460b      	mov	r3, r1
 80052f4:	18db      	adds	r3, r3, r3
 80052f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052f8:	4613      	mov	r3, r2
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005308:	f7fa ffda 	bl	80002c0 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b61      	ldr	r3, [pc, #388]	@ (8005498 <UART_SetConfig+0x2d4>)
 8005312:	fba3 2302 	umull	r2, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	011c      	lsls	r4, r3, #4
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005324:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005334:	415b      	adcs	r3, r3
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800533c:	4641      	mov	r1, r8
 800533e:	eb12 0a01 	adds.w	sl, r2, r1
 8005342:	4649      	mov	r1, r9
 8005344:	eb43 0b01 	adc.w	fp, r3, r1
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535c:	4692      	mov	sl, r2
 800535e:	469b      	mov	fp, r3
 8005360:	4643      	mov	r3, r8
 8005362:	eb1a 0303 	adds.w	r3, sl, r3
 8005366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800536a:	464b      	mov	r3, r9
 800536c:	eb4b 0303 	adc.w	r3, fp, r3
 8005370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005380:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	643b      	str	r3, [r7, #64]	@ 0x40
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	647b      	str	r3, [r7, #68]	@ 0x44
 8005396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800539a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800539e:	f7fa ff8f 	bl	80002c0 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005498 <UART_SetConfig+0x2d4>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	@ 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <UART_SetConfig+0x2d4>)
 80053c0:	fba3 2302 	umull	r2, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053cc:	441c      	add	r4, r3
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053e8:	415b      	adcs	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053f0:	4641      	mov	r1, r8
 80053f2:	1851      	adds	r1, r2, r1
 80053f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80053f6:	4649      	mov	r1, r9
 80053f8:	414b      	adcs	r3, r1
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005408:	4659      	mov	r1, fp
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4651      	mov	r1, sl
 800540e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005412:	4651      	mov	r1, sl
 8005414:	00ca      	lsls	r2, r1, #3
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	4603      	mov	r3, r0
 800541c:	4642      	mov	r2, r8
 800541e:	189b      	adds	r3, r3, r2
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005424:	464b      	mov	r3, r9
 8005426:	460a      	mov	r2, r1
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800543c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005444:	460b      	mov	r3, r1
 8005446:	18db      	adds	r3, r3, r3
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800544a:	4613      	mov	r3, r2
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800545a:	f7fa ff31 	bl	80002c0 <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <UART_SetConfig+0x2d4>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	@ 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	@ 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	@ (8005498 <UART_SetConfig+0x2d4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 0207 	and.w	r2, r3, #7
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4422      	add	r2, r4
 800548a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800548c:	e106      	b.n	800569c <UART_SetConfig+0x4d8>
 800548e:	bf00      	nop
 8005490:	40011000 	.word	0x40011000
 8005494:	40011400 	.word	0x40011400
 8005498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	6239      	str	r1, [r7, #32]
 80054b6:	415b      	adcs	r3, r3
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054be:	4641      	mov	r1, r8
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb43 0501 	adc.w	r5, r3, r1
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	18e3      	adds	r3, r4, r3
 80054e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054e4:	464b      	mov	r3, r9
 80054e6:	eb45 0303 	adc.w	r3, r5, r3
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800550a:	4629      	mov	r1, r5
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005514:	4621      	mov	r1, r4
 8005516:	008a      	lsls	r2, r1, #2
 8005518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800551c:	f7fa fed0 	bl	80002c0 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4b60      	ldr	r3, [pc, #384]	@ (80056a8 <UART_SetConfig+0x4e4>)
 8005526:	fba3 2302 	umull	r2, r3, r3, r2
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	011c      	lsls	r4, r3, #4
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005538:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800553c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	61b9      	str	r1, [r7, #24]
 8005548:	415b      	adcs	r3, r3
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6139      	str	r1, [r7, #16]
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800559a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055a8:	4649      	mov	r1, r9
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	4641      	mov	r1, r8
 80055ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b2:	4641      	mov	r1, r8
 80055b4:	008a      	lsls	r2, r1, #2
 80055b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055ba:	f7fa fe81 	bl	80002c0 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	4b38      	ldr	r3, [pc, #224]	@ (80056a8 <UART_SetConfig+0x4e4>)
 80055c6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2264      	movs	r2, #100	@ 0x64
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	1acb      	subs	r3, r1, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	@ 0x32
 80055d8:	4a33      	ldr	r2, [pc, #204]	@ (80056a8 <UART_SetConfig+0x4e4>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055e4:	441c      	add	r4, r3
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ea:	2200      	movs	r2, #0
 80055ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80055ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80055f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	1891      	adds	r1, r2, r2
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	415b      	adcs	r3, r3
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005604:	4641      	mov	r1, r8
 8005606:	1851      	adds	r1, r2, r1
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	4649      	mov	r1, r9
 800560c:	414b      	adcs	r3, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800561c:	4659      	mov	r1, fp
 800561e:	00cb      	lsls	r3, r1, #3
 8005620:	4651      	mov	r1, sl
 8005622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005626:	4651      	mov	r1, sl
 8005628:	00ca      	lsls	r2, r1, #3
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	4603      	mov	r3, r0
 8005630:	4642      	mov	r2, r8
 8005632:	189b      	adds	r3, r3, r2
 8005634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005636:	464b      	mov	r3, r9
 8005638:	460a      	mov	r2, r1
 800563a:	eb42 0303 	adc.w	r3, r2, r3
 800563e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	663b      	str	r3, [r7, #96]	@ 0x60
 800564a:	667a      	str	r2, [r7, #100]	@ 0x64
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005658:	4649      	mov	r1, r9
 800565a:	008b      	lsls	r3, r1, #2
 800565c:	4641      	mov	r1, r8
 800565e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005662:	4641      	mov	r1, r8
 8005664:	008a      	lsls	r2, r1, #2
 8005666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800566a:	f7fa fe29 	bl	80002c0 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <UART_SetConfig+0x4e4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	@ 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	3332      	adds	r3, #50	@ 0x32
 8005686:	4a08      	ldr	r2, [pc, #32]	@ (80056a8 <UART_SetConfig+0x4e4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4422      	add	r2, r4
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056a2:	46bd      	mov	sp, r7
 80056a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a8:	51eb851f 	.word	0x51eb851f

080056ac <siprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b500      	push	{lr}
 80056b0:	b09c      	sub	sp, #112	@ 0x70
 80056b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	9006      	str	r0, [sp, #24]
 80056b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056bc:	4809      	ldr	r0, [pc, #36]	@ (80056e4 <siprintf+0x38>)
 80056be:	9107      	str	r1, [sp, #28]
 80056c0:	9104      	str	r1, [sp, #16]
 80056c2:	4909      	ldr	r1, [pc, #36]	@ (80056e8 <siprintf+0x3c>)
 80056c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	a902      	add	r1, sp, #8
 80056d0:	f000 f98c 	bl	80059ec <_svfiprintf_r>
 80056d4:	9b02      	ldr	r3, [sp, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	b01c      	add	sp, #112	@ 0x70
 80056dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e0:	b003      	add	sp, #12
 80056e2:	4770      	bx	lr
 80056e4:	2000000c 	.word	0x2000000c
 80056e8:	ffff0208 	.word	0xffff0208

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	@ (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005734 <__libc_init_array+0x3c>)
 80056fe:	1b64      	subs	r4, r4, r5
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2600      	movs	r6, #0
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4d0b      	ldr	r5, [pc, #44]	@ (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	@ (800573c <__libc_init_array+0x44>)
 800570c:	f000 fc66 	bl	8005fdc <_init>
 8005710:	1b64      	subs	r4, r4, r5
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2600      	movs	r6, #0
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	08006278 	.word	0x08006278
 8005734:	08006278 	.word	0x08006278
 8005738:	08006278 	.word	0x08006278
 800573c:	0800627c 	.word	0x0800627c

08005740 <__retarget_lock_acquire_recursive>:
 8005740:	4770      	bx	lr

08005742 <__retarget_lock_release_recursive>:
 8005742:	4770      	bx	lr

08005744 <_free_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4605      	mov	r5, r0
 8005748:	2900      	cmp	r1, #0
 800574a:	d041      	beq.n	80057d0 <_free_r+0x8c>
 800574c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005750:	1f0c      	subs	r4, r1, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	bfb8      	it	lt
 8005756:	18e4      	addlt	r4, r4, r3
 8005758:	f000 f8e0 	bl	800591c <__malloc_lock>
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <_free_r+0x90>)
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	b933      	cbnz	r3, 8005770 <_free_r+0x2c>
 8005762:	6063      	str	r3, [r4, #4]
 8005764:	6014      	str	r4, [r2, #0]
 8005766:	4628      	mov	r0, r5
 8005768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800576c:	f000 b8dc 	b.w	8005928 <__malloc_unlock>
 8005770:	42a3      	cmp	r3, r4
 8005772:	d908      	bls.n	8005786 <_free_r+0x42>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	1821      	adds	r1, r4, r0
 8005778:	428b      	cmp	r3, r1
 800577a:	bf01      	itttt	eq
 800577c:	6819      	ldreq	r1, [r3, #0]
 800577e:	685b      	ldreq	r3, [r3, #4]
 8005780:	1809      	addeq	r1, r1, r0
 8005782:	6021      	streq	r1, [r4, #0]
 8005784:	e7ed      	b.n	8005762 <_free_r+0x1e>
 8005786:	461a      	mov	r2, r3
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b10b      	cbz	r3, 8005790 <_free_r+0x4c>
 800578c:	42a3      	cmp	r3, r4
 800578e:	d9fa      	bls.n	8005786 <_free_r+0x42>
 8005790:	6811      	ldr	r1, [r2, #0]
 8005792:	1850      	adds	r0, r2, r1
 8005794:	42a0      	cmp	r0, r4
 8005796:	d10b      	bne.n	80057b0 <_free_r+0x6c>
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	4401      	add	r1, r0
 800579c:	1850      	adds	r0, r2, r1
 800579e:	4283      	cmp	r3, r0
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	d1e0      	bne.n	8005766 <_free_r+0x22>
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	6053      	str	r3, [r2, #4]
 80057aa:	4408      	add	r0, r1
 80057ac:	6010      	str	r0, [r2, #0]
 80057ae:	e7da      	b.n	8005766 <_free_r+0x22>
 80057b0:	d902      	bls.n	80057b8 <_free_r+0x74>
 80057b2:	230c      	movs	r3, #12
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	e7d6      	b.n	8005766 <_free_r+0x22>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	1821      	adds	r1, r4, r0
 80057bc:	428b      	cmp	r3, r1
 80057be:	bf04      	itt	eq
 80057c0:	6819      	ldreq	r1, [r3, #0]
 80057c2:	685b      	ldreq	r3, [r3, #4]
 80057c4:	6063      	str	r3, [r4, #4]
 80057c6:	bf04      	itt	eq
 80057c8:	1809      	addeq	r1, r1, r0
 80057ca:	6021      	streq	r1, [r4, #0]
 80057cc:	6054      	str	r4, [r2, #4]
 80057ce:	e7ca      	b.n	8005766 <_free_r+0x22>
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	20000294 	.word	0x20000294

080057d8 <sbrk_aligned>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4e0f      	ldr	r6, [pc, #60]	@ (8005818 <sbrk_aligned+0x40>)
 80057dc:	460c      	mov	r4, r1
 80057de:	6831      	ldr	r1, [r6, #0]
 80057e0:	4605      	mov	r5, r0
 80057e2:	b911      	cbnz	r1, 80057ea <sbrk_aligned+0x12>
 80057e4:	f000 fba6 	bl	8005f34 <_sbrk_r>
 80057e8:	6030      	str	r0, [r6, #0]
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 fba1 	bl	8005f34 <_sbrk_r>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d103      	bne.n	80057fe <sbrk_aligned+0x26>
 80057f6:	f04f 34ff 	mov.w	r4, #4294967295
 80057fa:	4620      	mov	r0, r4
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d0f8      	beq.n	80057fa <sbrk_aligned+0x22>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 fb92 	bl	8005f34 <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d1f2      	bne.n	80057fa <sbrk_aligned+0x22>
 8005814:	e7ef      	b.n	80057f6 <sbrk_aligned+0x1e>
 8005816:	bf00      	nop
 8005818:	20000290 	.word	0x20000290

0800581c <_malloc_r>:
 800581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005820:	1ccd      	adds	r5, r1, #3
 8005822:	f025 0503 	bic.w	r5, r5, #3
 8005826:	3508      	adds	r5, #8
 8005828:	2d0c      	cmp	r5, #12
 800582a:	bf38      	it	cc
 800582c:	250c      	movcc	r5, #12
 800582e:	2d00      	cmp	r5, #0
 8005830:	4606      	mov	r6, r0
 8005832:	db01      	blt.n	8005838 <_malloc_r+0x1c>
 8005834:	42a9      	cmp	r1, r5
 8005836:	d904      	bls.n	8005842 <_malloc_r+0x26>
 8005838:	230c      	movs	r3, #12
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	2000      	movs	r0, #0
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005918 <_malloc_r+0xfc>
 8005846:	f000 f869 	bl	800591c <__malloc_lock>
 800584a:	f8d8 3000 	ldr.w	r3, [r8]
 800584e:	461c      	mov	r4, r3
 8005850:	bb44      	cbnz	r4, 80058a4 <_malloc_r+0x88>
 8005852:	4629      	mov	r1, r5
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff ffbf 	bl	80057d8 <sbrk_aligned>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	4604      	mov	r4, r0
 800585e:	d158      	bne.n	8005912 <_malloc_r+0xf6>
 8005860:	f8d8 4000 	ldr.w	r4, [r8]
 8005864:	4627      	mov	r7, r4
 8005866:	2f00      	cmp	r7, #0
 8005868:	d143      	bne.n	80058f2 <_malloc_r+0xd6>
 800586a:	2c00      	cmp	r4, #0
 800586c:	d04b      	beq.n	8005906 <_malloc_r+0xea>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	4639      	mov	r1, r7
 8005872:	4630      	mov	r0, r6
 8005874:	eb04 0903 	add.w	r9, r4, r3
 8005878:	f000 fb5c 	bl	8005f34 <_sbrk_r>
 800587c:	4581      	cmp	r9, r0
 800587e:	d142      	bne.n	8005906 <_malloc_r+0xea>
 8005880:	6821      	ldr	r1, [r4, #0]
 8005882:	1a6d      	subs	r5, r5, r1
 8005884:	4629      	mov	r1, r5
 8005886:	4630      	mov	r0, r6
 8005888:	f7ff ffa6 	bl	80057d8 <sbrk_aligned>
 800588c:	3001      	adds	r0, #1
 800588e:	d03a      	beq.n	8005906 <_malloc_r+0xea>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	442b      	add	r3, r5
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	f8d8 3000 	ldr.w	r3, [r8]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	bb62      	cbnz	r2, 80058f8 <_malloc_r+0xdc>
 800589e:	f8c8 7000 	str.w	r7, [r8]
 80058a2:	e00f      	b.n	80058c4 <_malloc_r+0xa8>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	1b52      	subs	r2, r2, r5
 80058a8:	d420      	bmi.n	80058ec <_malloc_r+0xd0>
 80058aa:	2a0b      	cmp	r2, #11
 80058ac:	d917      	bls.n	80058de <_malloc_r+0xc2>
 80058ae:	1961      	adds	r1, r4, r5
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	bf18      	it	ne
 80058b6:	6059      	strne	r1, [r3, #4]
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	bf08      	it	eq
 80058bc:	f8c8 1000 	streq.w	r1, [r8]
 80058c0:	5162      	str	r2, [r4, r5]
 80058c2:	604b      	str	r3, [r1, #4]
 80058c4:	4630      	mov	r0, r6
 80058c6:	f000 f82f 	bl	8005928 <__malloc_unlock>
 80058ca:	f104 000b 	add.w	r0, r4, #11
 80058ce:	1d23      	adds	r3, r4, #4
 80058d0:	f020 0007 	bic.w	r0, r0, #7
 80058d4:	1ac2      	subs	r2, r0, r3
 80058d6:	bf1c      	itt	ne
 80058d8:	1a1b      	subne	r3, r3, r0
 80058da:	50a3      	strne	r3, [r4, r2]
 80058dc:	e7af      	b.n	800583e <_malloc_r+0x22>
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	bf0c      	ite	eq
 80058e4:	f8c8 2000 	streq.w	r2, [r8]
 80058e8:	605a      	strne	r2, [r3, #4]
 80058ea:	e7eb      	b.n	80058c4 <_malloc_r+0xa8>
 80058ec:	4623      	mov	r3, r4
 80058ee:	6864      	ldr	r4, [r4, #4]
 80058f0:	e7ae      	b.n	8005850 <_malloc_r+0x34>
 80058f2:	463c      	mov	r4, r7
 80058f4:	687f      	ldr	r7, [r7, #4]
 80058f6:	e7b6      	b.n	8005866 <_malloc_r+0x4a>
 80058f8:	461a      	mov	r2, r3
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d1fb      	bne.n	80058f8 <_malloc_r+0xdc>
 8005900:	2300      	movs	r3, #0
 8005902:	6053      	str	r3, [r2, #4]
 8005904:	e7de      	b.n	80058c4 <_malloc_r+0xa8>
 8005906:	230c      	movs	r3, #12
 8005908:	6033      	str	r3, [r6, #0]
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f80c 	bl	8005928 <__malloc_unlock>
 8005910:	e794      	b.n	800583c <_malloc_r+0x20>
 8005912:	6005      	str	r5, [r0, #0]
 8005914:	e7d6      	b.n	80058c4 <_malloc_r+0xa8>
 8005916:	bf00      	nop
 8005918:	20000294 	.word	0x20000294

0800591c <__malloc_lock>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__malloc_lock+0x8>)
 800591e:	f7ff bf0f 	b.w	8005740 <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	2000028c 	.word	0x2000028c

08005928 <__malloc_unlock>:
 8005928:	4801      	ldr	r0, [pc, #4]	@ (8005930 <__malloc_unlock+0x8>)
 800592a:	f7ff bf0a 	b.w	8005742 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	2000028c 	.word	0x2000028c

08005934 <__ssputs_r>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	688e      	ldr	r6, [r1, #8]
 800593a:	461f      	mov	r7, r3
 800593c:	42be      	cmp	r6, r7
 800593e:	680b      	ldr	r3, [r1, #0]
 8005940:	4682      	mov	sl, r0
 8005942:	460c      	mov	r4, r1
 8005944:	4690      	mov	r8, r2
 8005946:	d82d      	bhi.n	80059a4 <__ssputs_r+0x70>
 8005948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800594c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005950:	d026      	beq.n	80059a0 <__ssputs_r+0x6c>
 8005952:	6965      	ldr	r5, [r4, #20]
 8005954:	6909      	ldr	r1, [r1, #16]
 8005956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800595a:	eba3 0901 	sub.w	r9, r3, r1
 800595e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005962:	1c7b      	adds	r3, r7, #1
 8005964:	444b      	add	r3, r9
 8005966:	106d      	asrs	r5, r5, #1
 8005968:	429d      	cmp	r5, r3
 800596a:	bf38      	it	cc
 800596c:	461d      	movcc	r5, r3
 800596e:	0553      	lsls	r3, r2, #21
 8005970:	d527      	bpl.n	80059c2 <__ssputs_r+0x8e>
 8005972:	4629      	mov	r1, r5
 8005974:	f7ff ff52 	bl	800581c <_malloc_r>
 8005978:	4606      	mov	r6, r0
 800597a:	b360      	cbz	r0, 80059d6 <__ssputs_r+0xa2>
 800597c:	6921      	ldr	r1, [r4, #16]
 800597e:	464a      	mov	r2, r9
 8005980:	f000 fae8 	bl	8005f54 <memcpy>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800598a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	6126      	str	r6, [r4, #16]
 8005992:	6165      	str	r5, [r4, #20]
 8005994:	444e      	add	r6, r9
 8005996:	eba5 0509 	sub.w	r5, r5, r9
 800599a:	6026      	str	r6, [r4, #0]
 800599c:	60a5      	str	r5, [r4, #8]
 800599e:	463e      	mov	r6, r7
 80059a0:	42be      	cmp	r6, r7
 80059a2:	d900      	bls.n	80059a6 <__ssputs_r+0x72>
 80059a4:	463e      	mov	r6, r7
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	4632      	mov	r2, r6
 80059aa:	4641      	mov	r1, r8
 80059ac:	f000 faa8 	bl	8005f00 <memmove>
 80059b0:	68a3      	ldr	r3, [r4, #8]
 80059b2:	1b9b      	subs	r3, r3, r6
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	4433      	add	r3, r6
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	2000      	movs	r0, #0
 80059be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c2:	462a      	mov	r2, r5
 80059c4:	f000 fad4 	bl	8005f70 <_realloc_r>
 80059c8:	4606      	mov	r6, r0
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d1e0      	bne.n	8005990 <__ssputs_r+0x5c>
 80059ce:	6921      	ldr	r1, [r4, #16]
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7ff feb7 	bl	8005744 <_free_r>
 80059d6:	230c      	movs	r3, #12
 80059d8:	f8ca 3000 	str.w	r3, [sl]
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	e7e9      	b.n	80059be <__ssputs_r+0x8a>
	...

080059ec <_svfiprintf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	4698      	mov	r8, r3
 80059f2:	898b      	ldrh	r3, [r1, #12]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	b09d      	sub	sp, #116	@ 0x74
 80059f8:	4607      	mov	r7, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	d510      	bpl.n	8005a22 <_svfiprintf_r+0x36>
 8005a00:	690b      	ldr	r3, [r1, #16]
 8005a02:	b973      	cbnz	r3, 8005a22 <_svfiprintf_r+0x36>
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	f7ff ff09 	bl	800581c <_malloc_r>
 8005a0a:	6028      	str	r0, [r5, #0]
 8005a0c:	6128      	str	r0, [r5, #16]
 8005a0e:	b930      	cbnz	r0, 8005a1e <_svfiprintf_r+0x32>
 8005a10:	230c      	movs	r3, #12
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b01d      	add	sp, #116	@ 0x74
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	2340      	movs	r3, #64	@ 0x40
 8005a20:	616b      	str	r3, [r5, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a26:	2320      	movs	r3, #32
 8005a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a30:	2330      	movs	r3, #48	@ 0x30
 8005a32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bd0 <_svfiprintf_r+0x1e4>
 8005a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a3a:	f04f 0901 	mov.w	r9, #1
 8005a3e:	4623      	mov	r3, r4
 8005a40:	469a      	mov	sl, r3
 8005a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a46:	b10a      	cbz	r2, 8005a4c <_svfiprintf_r+0x60>
 8005a48:	2a25      	cmp	r2, #37	@ 0x25
 8005a4a:	d1f9      	bne.n	8005a40 <_svfiprintf_r+0x54>
 8005a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a50:	d00b      	beq.n	8005a6a <_svfiprintf_r+0x7e>
 8005a52:	465b      	mov	r3, fp
 8005a54:	4622      	mov	r2, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff6b 	bl	8005934 <__ssputs_r>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f000 80a7 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a66:	445a      	add	r2, fp
 8005a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 809f 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7e:	f10a 0a01 	add.w	sl, sl, #1
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a8c:	4654      	mov	r4, sl
 8005a8e:	2205      	movs	r2, #5
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	484e      	ldr	r0, [pc, #312]	@ (8005bd0 <_svfiprintf_r+0x1e4>)
 8005a96:	f7fa fbc3 	bl	8000220 <memchr>
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	b9d8      	cbnz	r0, 8005ad6 <_svfiprintf_r+0xea>
 8005a9e:	06d0      	lsls	r0, r2, #27
 8005aa0:	bf44      	itt	mi
 8005aa2:	2320      	movmi	r3, #32
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa8:	0711      	lsls	r1, r2, #28
 8005aaa:	bf44      	itt	mi
 8005aac:	232b      	movmi	r3, #43	@ 0x2b
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab8:	d015      	beq.n	8005ae6 <_svfiprintf_r+0xfa>
 8005aba:	9a07      	ldr	r2, [sp, #28]
 8005abc:	4654      	mov	r4, sl
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f04f 0c0a 	mov.w	ip, #10
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aca:	3b30      	subs	r3, #48	@ 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d94b      	bls.n	8005b68 <_svfiprintf_r+0x17c>
 8005ad0:	b1b0      	cbz	r0, 8005b00 <_svfiprintf_r+0x114>
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	e014      	b.n	8005b00 <_svfiprintf_r+0x114>
 8005ad6:	eba0 0308 	sub.w	r3, r0, r8
 8005ada:	fa09 f303 	lsl.w	r3, r9, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	46a2      	mov	sl, r4
 8005ae4:	e7d2      	b.n	8005a8c <_svfiprintf_r+0xa0>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9103      	str	r1, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbb      	ittet	lt
 8005af2:	425b      	neglt	r3, r3
 8005af4:	f042 0202 	orrlt.w	r2, r2, #2
 8005af8:	9307      	strge	r3, [sp, #28]
 8005afa:	9307      	strlt	r3, [sp, #28]
 8005afc:	bfb8      	it	lt
 8005afe:	9204      	strlt	r2, [sp, #16]
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b04:	d10a      	bne.n	8005b1c <_svfiprintf_r+0x130>
 8005b06:	7863      	ldrb	r3, [r4, #1]
 8005b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0a:	d132      	bne.n	8005b72 <_svfiprintf_r+0x186>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	1d1a      	adds	r2, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	9203      	str	r2, [sp, #12]
 8005b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b18:	3402      	adds	r4, #2
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005be0 <_svfiprintf_r+0x1f4>
 8005b20:	7821      	ldrb	r1, [r4, #0]
 8005b22:	2203      	movs	r2, #3
 8005b24:	4650      	mov	r0, sl
 8005b26:	f7fa fb7b 	bl	8000220 <memchr>
 8005b2a:	b138      	cbz	r0, 8005b3c <_svfiprintf_r+0x150>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	eba0 000a 	sub.w	r0, r0, sl
 8005b32:	2240      	movs	r2, #64	@ 0x40
 8005b34:	4082      	lsls	r2, r0
 8005b36:	4313      	orrs	r3, r2
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	4824      	ldr	r0, [pc, #144]	@ (8005bd4 <_svfiprintf_r+0x1e8>)
 8005b42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b46:	2206      	movs	r2, #6
 8005b48:	f7fa fb6a 	bl	8000220 <memchr>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d036      	beq.n	8005bbe <_svfiprintf_r+0x1d2>
 8005b50:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <_svfiprintf_r+0x1ec>)
 8005b52:	bb1b      	cbnz	r3, 8005b9c <_svfiprintf_r+0x1b0>
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	3307      	adds	r3, #7
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	4433      	add	r3, r6
 8005b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b66:	e76a      	b.n	8005a3e <_svfiprintf_r+0x52>
 8005b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e7a8      	b.n	8005ac4 <_svfiprintf_r+0xd8>
 8005b72:	2300      	movs	r3, #0
 8005b74:	3401      	adds	r4, #1
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f04f 0c0a 	mov.w	ip, #10
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b84:	3a30      	subs	r2, #48	@ 0x30
 8005b86:	2a09      	cmp	r2, #9
 8005b88:	d903      	bls.n	8005b92 <_svfiprintf_r+0x1a6>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c6      	beq.n	8005b1c <_svfiprintf_r+0x130>
 8005b8e:	9105      	str	r1, [sp, #20]
 8005b90:	e7c4      	b.n	8005b1c <_svfiprintf_r+0x130>
 8005b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b96:	4604      	mov	r4, r0
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f0      	b.n	8005b7e <_svfiprintf_r+0x192>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8005bdc <_svfiprintf_r+0x1f0>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f3af 8000 	nop.w
 8005bac:	1c42      	adds	r2, r0, #1
 8005bae:	4606      	mov	r6, r0
 8005bb0:	d1d6      	bne.n	8005b60 <_svfiprintf_r+0x174>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	065b      	lsls	r3, r3, #25
 8005bb6:	f53f af2d 	bmi.w	8005a14 <_svfiprintf_r+0x28>
 8005bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bbc:	e72c      	b.n	8005a18 <_svfiprintf_r+0x2c>
 8005bbe:	ab03      	add	r3, sp, #12
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <_svfiprintf_r+0x1f0>)
 8005bc6:	a904      	add	r1, sp, #16
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f000 f879 	bl	8005cc0 <_printf_i>
 8005bce:	e7ed      	b.n	8005bac <_svfiprintf_r+0x1c0>
 8005bd0:	0800623c 	.word	0x0800623c
 8005bd4:	08006246 	.word	0x08006246
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	08005935 	.word	0x08005935
 8005be0:	08006242 	.word	0x08006242

08005be4 <_printf_common>:
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4616      	mov	r6, r2
 8005bea:	4698      	mov	r8, r3
 8005bec:	688a      	ldr	r2, [r1, #8]
 8005bee:	690b      	ldr	r3, [r1, #16]
 8005bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bfb8      	it	lt
 8005bf8:	4613      	movlt	r3, r2
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c00:	4607      	mov	r7, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	b10a      	cbz	r2, 8005c0a <_printf_common+0x26>
 8005c06:	3301      	adds	r3, #1
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	6833      	ldrmi	r3, [r6, #0]
 8005c12:	3302      	addmi	r3, #2
 8005c14:	6033      	strmi	r3, [r6, #0]
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	f015 0506 	ands.w	r5, r5, #6
 8005c1c:	d106      	bne.n	8005c2c <_printf_common+0x48>
 8005c1e:	f104 0a19 	add.w	sl, r4, #25
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	6832      	ldr	r2, [r6, #0]
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dc26      	bgt.n	8005c7a <_printf_common+0x96>
 8005c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	3b00      	subs	r3, #0
 8005c34:	bf18      	it	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	0692      	lsls	r2, r2, #26
 8005c3a:	d42b      	bmi.n	8005c94 <_printf_common+0xb0>
 8005c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c40:	4641      	mov	r1, r8
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c8      	blx	r9
 8005c46:	3001      	adds	r0, #1
 8005c48:	d01e      	beq.n	8005c88 <_printf_common+0xa4>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	f003 0306 	and.w	r3, r3, #6
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	bf02      	ittt	eq
 8005c56:	68e5      	ldreq	r5, [r4, #12]
 8005c58:	6833      	ldreq	r3, [r6, #0]
 8005c5a:	1aed      	subeq	r5, r5, r3
 8005c5c:	68a3      	ldr	r3, [r4, #8]
 8005c5e:	bf0c      	ite	eq
 8005c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c64:	2500      	movne	r5, #0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfc4      	itt	gt
 8005c6a:	1a9b      	subgt	r3, r3, r2
 8005c6c:	18ed      	addgt	r5, r5, r3
 8005c6e:	2600      	movs	r6, #0
 8005c70:	341a      	adds	r4, #26
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d11a      	bne.n	8005cac <_printf_common+0xc8>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e008      	b.n	8005c8c <_printf_common+0xa8>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4641      	mov	r1, r8
 8005c80:	4638      	mov	r0, r7
 8005c82:	47c8      	blx	r9
 8005c84:	3001      	adds	r0, #1
 8005c86:	d103      	bne.n	8005c90 <_printf_common+0xac>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	3501      	adds	r5, #1
 8005c92:	e7c6      	b.n	8005c22 <_printf_common+0x3e>
 8005c94:	18e1      	adds	r1, r4, r3
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	2030      	movs	r0, #48	@ 0x30
 8005c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c9e:	4422      	add	r2, r4
 8005ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ca4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ca8:	3302      	adds	r3, #2
 8005caa:	e7c7      	b.n	8005c3c <_printf_common+0x58>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c8      	blx	r9
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0e6      	beq.n	8005c88 <_printf_common+0xa4>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7d9      	b.n	8005c72 <_printf_common+0x8e>
	...

08005cc0 <_printf_i>:
 8005cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	7e0f      	ldrb	r7, [r1, #24]
 8005cc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cc8:	2f78      	cmp	r7, #120	@ 0x78
 8005cca:	4691      	mov	r9, r2
 8005ccc:	4680      	mov	r8, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	469a      	mov	sl, r3
 8005cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cd6:	d807      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cd8:	2f62      	cmp	r7, #98	@ 0x62
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x32>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	f000 80d2 	beq.w	8005e86 <_printf_i+0x1c6>
 8005ce2:	2f58      	cmp	r7, #88	@ 0x58
 8005ce4:	f000 80b9 	beq.w	8005e5a <_printf_i+0x19a>
 8005ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cf0:	e03a      	b.n	8005d68 <_printf_i+0xa8>
 8005cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cf6:	2b15      	cmp	r3, #21
 8005cf8:	d8f6      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005d00 <_printf_i+0x40>)
 8005cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005ce9 	.word	0x08005ce9
 8005d0c:	08005ce9 	.word	0x08005ce9
 8005d10:	08005ce9 	.word	0x08005ce9
 8005d14:	08005ce9 	.word	0x08005ce9
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ce9 	.word	0x08005ce9
 8005d20:	08005ce9 	.word	0x08005ce9
 8005d24:	08005ce9 	.word	0x08005ce9
 8005d28:	08005ce9 	.word	0x08005ce9
 8005d2c:	08005e6d 	.word	0x08005e6d
 8005d30:	08005d97 	.word	0x08005d97
 8005d34:	08005e27 	.word	0x08005e27
 8005d38:	08005ce9 	.word	0x08005ce9
 8005d3c:	08005ce9 	.word	0x08005ce9
 8005d40:	08005e8f 	.word	0x08005e8f
 8005d44:	08005ce9 	.word	0x08005ce9
 8005d48:	08005d97 	.word	0x08005d97
 8005d4c:	08005ce9 	.word	0x08005ce9
 8005d50:	08005ce9 	.word	0x08005ce9
 8005d54:	08005e2f 	.word	0x08005e2f
 8005d58:	6833      	ldr	r3, [r6, #0]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6032      	str	r2, [r6, #0]
 8005d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e09d      	b.n	8005ea8 <_printf_i+0x1e8>
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	1d19      	adds	r1, r3, #4
 8005d72:	6031      	str	r1, [r6, #0]
 8005d74:	0606      	lsls	r6, r0, #24
 8005d76:	d501      	bpl.n	8005d7c <_printf_i+0xbc>
 8005d78:	681d      	ldr	r5, [r3, #0]
 8005d7a:	e003      	b.n	8005d84 <_printf_i+0xc4>
 8005d7c:	0645      	lsls	r5, r0, #25
 8005d7e:	d5fb      	bpl.n	8005d78 <_printf_i+0xb8>
 8005d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	da03      	bge.n	8005d90 <_printf_i+0xd0>
 8005d88:	232d      	movs	r3, #45	@ 0x2d
 8005d8a:	426d      	negs	r5, r5
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d90:	4859      	ldr	r0, [pc, #356]	@ (8005ef8 <_printf_i+0x238>)
 8005d92:	230a      	movs	r3, #10
 8005d94:	e011      	b.n	8005dba <_printf_i+0xfa>
 8005d96:	6821      	ldr	r1, [r4, #0]
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	0608      	lsls	r0, r1, #24
 8005d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005da0:	d402      	bmi.n	8005da8 <_printf_i+0xe8>
 8005da2:	0649      	lsls	r1, r1, #25
 8005da4:	bf48      	it	mi
 8005da6:	b2ad      	uxthmi	r5, r5
 8005da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005daa:	4853      	ldr	r0, [pc, #332]	@ (8005ef8 <_printf_i+0x238>)
 8005dac:	6033      	str	r3, [r6, #0]
 8005dae:	bf14      	ite	ne
 8005db0:	230a      	movne	r3, #10
 8005db2:	2308      	moveq	r3, #8
 8005db4:	2100      	movs	r1, #0
 8005db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dba:	6866      	ldr	r6, [r4, #4]
 8005dbc:	60a6      	str	r6, [r4, #8]
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	bfa2      	ittt	ge
 8005dc2:	6821      	ldrge	r1, [r4, #0]
 8005dc4:	f021 0104 	bicge.w	r1, r1, #4
 8005dc8:	6021      	strge	r1, [r4, #0]
 8005dca:	b90d      	cbnz	r5, 8005dd0 <_printf_i+0x110>
 8005dcc:	2e00      	cmp	r6, #0
 8005dce:	d04b      	beq.n	8005e68 <_printf_i+0x1a8>
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8005dda:	5dc7      	ldrb	r7, [r0, r7]
 8005ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005de0:	462f      	mov	r7, r5
 8005de2:	42bb      	cmp	r3, r7
 8005de4:	460d      	mov	r5, r1
 8005de6:	d9f4      	bls.n	8005dd2 <_printf_i+0x112>
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d10b      	bne.n	8005e04 <_printf_i+0x144>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07df      	lsls	r7, r3, #31
 8005df0:	d508      	bpl.n	8005e04 <_printf_i+0x144>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	6861      	ldr	r1, [r4, #4]
 8005df6:	4299      	cmp	r1, r3
 8005df8:	bfde      	ittt	le
 8005dfa:	2330      	movle	r3, #48	@ 0x30
 8005dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e04:	1b92      	subs	r2, r2, r6
 8005e06:	6122      	str	r2, [r4, #16]
 8005e08:	f8cd a000 	str.w	sl, [sp]
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	aa03      	add	r2, sp, #12
 8005e10:	4621      	mov	r1, r4
 8005e12:	4640      	mov	r0, r8
 8005e14:	f7ff fee6 	bl	8005be4 <_printf_common>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d14a      	bne.n	8005eb2 <_printf_i+0x1f2>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	b004      	add	sp, #16
 8005e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	f043 0320 	orr.w	r3, r3, #32
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	4833      	ldr	r0, [pc, #204]	@ (8005efc <_printf_i+0x23c>)
 8005e30:	2778      	movs	r7, #120	@ 0x78
 8005e32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	6831      	ldr	r1, [r6, #0]
 8005e3a:	061f      	lsls	r7, r3, #24
 8005e3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e40:	d402      	bmi.n	8005e48 <_printf_i+0x188>
 8005e42:	065f      	lsls	r7, r3, #25
 8005e44:	bf48      	it	mi
 8005e46:	b2ad      	uxthmi	r5, r5
 8005e48:	6031      	str	r1, [r6, #0]
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	bf44      	itt	mi
 8005e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e52:	6023      	strmi	r3, [r4, #0]
 8005e54:	b11d      	cbz	r5, 8005e5e <_printf_i+0x19e>
 8005e56:	2310      	movs	r3, #16
 8005e58:	e7ac      	b.n	8005db4 <_printf_i+0xf4>
 8005e5a:	4827      	ldr	r0, [pc, #156]	@ (8005ef8 <_printf_i+0x238>)
 8005e5c:	e7e9      	b.n	8005e32 <_printf_i+0x172>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	f023 0320 	bic.w	r3, r3, #32
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	e7f6      	b.n	8005e56 <_printf_i+0x196>
 8005e68:	4616      	mov	r6, r2
 8005e6a:	e7bd      	b.n	8005de8 <_printf_i+0x128>
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	6825      	ldr	r5, [r4, #0]
 8005e70:	6961      	ldr	r1, [r4, #20]
 8005e72:	1d18      	adds	r0, r3, #4
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	062e      	lsls	r6, r5, #24
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0x1c0>
 8005e7c:	6019      	str	r1, [r3, #0]
 8005e7e:	e002      	b.n	8005e86 <_printf_i+0x1c6>
 8005e80:	0668      	lsls	r0, r5, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0x1bc>
 8005e84:	8019      	strh	r1, [r3, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	4616      	mov	r6, r2
 8005e8c:	e7bc      	b.n	8005e08 <_printf_i+0x148>
 8005e8e:	6833      	ldr	r3, [r6, #0]
 8005e90:	1d1a      	adds	r2, r3, #4
 8005e92:	6032      	str	r2, [r6, #0]
 8005e94:	681e      	ldr	r6, [r3, #0]
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7fa f9c0 	bl	8000220 <memchr>
 8005ea0:	b108      	cbz	r0, 8005ea6 <_printf_i+0x1e6>
 8005ea2:	1b80      	subs	r0, r0, r6
 8005ea4:	6060      	str	r0, [r4, #4]
 8005ea6:	6863      	ldr	r3, [r4, #4]
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb0:	e7aa      	b.n	8005e08 <_printf_i+0x148>
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4640      	mov	r0, r8
 8005eba:	47d0      	blx	sl
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d0ad      	beq.n	8005e1c <_printf_i+0x15c>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	079b      	lsls	r3, r3, #30
 8005ec4:	d413      	bmi.n	8005eee <_printf_i+0x22e>
 8005ec6:	68e0      	ldr	r0, [r4, #12]
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	4298      	cmp	r0, r3
 8005ecc:	bfb8      	it	lt
 8005ece:	4618      	movlt	r0, r3
 8005ed0:	e7a6      	b.n	8005e20 <_printf_i+0x160>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	47d0      	blx	sl
 8005edc:	3001      	adds	r0, #1
 8005ede:	d09d      	beq.n	8005e1c <_printf_i+0x15c>
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	9903      	ldr	r1, [sp, #12]
 8005ee6:	1a5b      	subs	r3, r3, r1
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dcf2      	bgt.n	8005ed2 <_printf_i+0x212>
 8005eec:	e7eb      	b.n	8005ec6 <_printf_i+0x206>
 8005eee:	2500      	movs	r5, #0
 8005ef0:	f104 0619 	add.w	r6, r4, #25
 8005ef4:	e7f5      	b.n	8005ee2 <_printf_i+0x222>
 8005ef6:	bf00      	nop
 8005ef8:	0800624d 	.word	0x0800624d
 8005efc:	0800625e 	.word	0x0800625e

08005f00 <memmove>:
 8005f00:	4288      	cmp	r0, r1
 8005f02:	b510      	push	{r4, lr}
 8005f04:	eb01 0402 	add.w	r4, r1, r2
 8005f08:	d902      	bls.n	8005f10 <memmove+0x10>
 8005f0a:	4284      	cmp	r4, r0
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	d807      	bhi.n	8005f20 <memmove+0x20>
 8005f10:	1e43      	subs	r3, r0, #1
 8005f12:	42a1      	cmp	r1, r4
 8005f14:	d008      	beq.n	8005f28 <memmove+0x28>
 8005f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f1e:	e7f8      	b.n	8005f12 <memmove+0x12>
 8005f20:	4402      	add	r2, r0
 8005f22:	4601      	mov	r1, r0
 8005f24:	428a      	cmp	r2, r1
 8005f26:	d100      	bne.n	8005f2a <memmove+0x2a>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f32:	e7f7      	b.n	8005f24 <memmove+0x24>

08005f34 <_sbrk_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	@ (8005f50 <_sbrk_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fb f8c2 	bl	80010c8 <_sbrk>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_sbrk_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_sbrk_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000288 	.word	0x20000288

08005f54 <memcpy>:
 8005f54:	440a      	add	r2, r1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f5c:	d100      	bne.n	8005f60 <memcpy+0xc>
 8005f5e:	4770      	bx	lr
 8005f60:	b510      	push	{r4, lr}
 8005f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d1f9      	bne.n	8005f62 <memcpy+0xe>
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <_realloc_r>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	4615      	mov	r5, r2
 8005f78:	460c      	mov	r4, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x16>
 8005f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4611      	mov	r1, r2
 8005f82:	f7ff bc4b 	b.w	800581c <_malloc_r>
 8005f86:	b92a      	cbnz	r2, 8005f94 <_realloc_r+0x24>
 8005f88:	f7ff fbdc 	bl	8005744 <_free_r>
 8005f8c:	2400      	movs	r4, #0
 8005f8e:	4620      	mov	r0, r4
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	f000 f81a 	bl	8005fcc <_malloc_usable_size_r>
 8005f98:	4285      	cmp	r5, r0
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	d802      	bhi.n	8005fa4 <_realloc_r+0x34>
 8005f9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fa2:	d8f4      	bhi.n	8005f8e <_realloc_r+0x1e>
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fc38 	bl	800581c <_malloc_r>
 8005fac:	4607      	mov	r7, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0ec      	beq.n	8005f8c <_realloc_r+0x1c>
 8005fb2:	42b5      	cmp	r5, r6
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	bf28      	it	cs
 8005fba:	4632      	movcs	r2, r6
 8005fbc:	f7ff ffca 	bl	8005f54 <memcpy>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fbbe 	bl	8005744 <_free_r>
 8005fc8:	463c      	mov	r4, r7
 8005fca:	e7e0      	b.n	8005f8e <_realloc_r+0x1e>

08005fcc <_malloc_usable_size_r>:
 8005fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd0:	1f18      	subs	r0, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bfbc      	itt	lt
 8005fd6:	580b      	ldrlt	r3, [r1, r0]
 8005fd8:	18c0      	addlt	r0, r0, r3
 8005fda:	4770      	bx	lr

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr
